
{***************************************************************************}
{                                                                           }
{                             XML Data Binding                              }
{                                                                           }
{         Generated on: 2006/8/26 ¤U¤È 02:33:26                             }
{       Generated from: D:\D7-ERP\xmlproject\DeliveryMessageWoodV2R31.xsd   }
{   Settings stored in: D:\D7-ERP\xmlproject\DeliveryMessageWoodV2R31.xdb   }
{                                                                           }
{***************************************************************************}

unit DeliveryMessageWoodV2R31;

interface

uses xmldom, XMLDoc, XMLIntf;

type

{ Forward Decls }

  IXMLDeliveryMessageWood = interface;
  IXMLDeliveryMessageWoodHeader = interface;
  IXMLDeliveryMessageDate = interface;
  IXMLDateBasis = interface;
  IXMLDeliveryMessageReference = interface;
  IXMLDeliveryMessageReferenceList = interface;
  IXMLDocumentReferenceInformation = interface;
  IXMLDocumentReferenceInformationList = interface;
  IXMLDocumentReferenceID = interface;
  IXMLParty = interface;
  IXMLPartyIdentifier = interface;
  IXMLPartyIdentifierList = interface;
  IXMLNameAddress = interface;
  IXMLOrganisationUnit = interface;
  IXMLPostalCode = interface;
  IXMLCountry = interface;
  IXMLGPSCoordinates = interface;
  IXMLMeasurement = interface;
  IXMLMeasurementList = interface;
  IXMLValue = interface;
  IXMLRangeMin = interface;
  IXMLRangeMax = interface;
  IXMLCommonContact = interface;
  IXMLCommonContactList = interface;
  IXMLTypedParty = interface;
  IXMLTypedPartyList = interface;
  IXMLShipToInformation = interface;
  IXMLShipToInformationList = interface;
  IXMLShipToCharacteristics = interface;
  IXMLLocationCode = interface;
  IXMLTermsOfDelivery = interface;
  IXMLIncotermsLocation = interface;
  IXMLShipmentMethodOfPayment = interface;
  IXMLDeliveryRouteCode = interface;
  IXMLDeliverySchedule = interface;
  IXMLDeliveryScheduleList = interface;
  IXMLProductionStatus = interface;
  IXMLProductionLastDateOfChange = interface;
  IXMLDeliveryStatus = interface;
  IXMLDeliveryLastDateOfChange = interface;
  IXMLDeliveryDateWindow = interface;
  IXMLDeliveryDateWindowList = interface;
  IXMLDateTimeRange = interface;
  IXMLDateTimeFrom = interface;
  IXMLDateTimeTo = interface;
  IXMLQuantity = interface;
  IXMLInformationalQuantity = interface;
  IXMLInformationalQuantityList = interface;
  IXMLPriceDetails = interface;
  IXMLPricePerUnit = interface;
  IXMLPricePerUnitList = interface;
  IXMLCurrencyValue = interface;
  IXMLExchangeRate = interface;
  IXMLMinCurrencyValue = interface;
  IXMLMaxCurrencyValue = interface;
  IXMLMonetaryAdjustment = interface;
  IXMLMonetaryAdjustmentList = interface;
  IXMLMonetaryAdjustmentStartAmount = interface;
  IXMLPriceAdjustment = interface;
  IXMLFlatAmountAdjustment = interface;
  IXMLAdjustmentFixedAmount = interface;
  IXMLTaxAdjustment = interface;
  IXMLTaxAmount = interface;
  IXMLInformationalAmount = interface;
  IXMLInformationalAmountList = interface;
  IXMLGeneralLedgerAccount = interface;
  IXMLMonetaryAdjustmentAmount = interface;
  IXMLDeliveryLeg = interface;
  IXMLDeliveryLegList = interface;
  IXMLDeliveryOrigin = interface;
  IXMLLocationParty = interface;
  IXMLTransportModeCharacteristics = interface;
  IXMLTransportModeCode = interface;
  IXMLTransportVehicleCharacteristics = interface;
  IXMLTransportVehicleCode = interface;
  IXMLTransportVehicleMeasurements = interface;
  IXMLTransportVehicleIdentifier = interface;
  IXMLTransportVehicleIdentifierList = interface;
  IXMLTransportUnitCharacteristics = interface;
  IXMLTransportUnitCharacteristicsList = interface;
  IXMLTransportUnitCode = interface;
  IXMLTransportUnitMeasurements = interface;
  IXMLTransportUnitMeasurementsList = interface;
  IXMLTransportUnitIdentifier = interface;
  IXMLTransportUnitIdentifierList = interface;
  IXMLTransportUnitDetail = interface;
  IXMLTransportUnitDetailCode = interface;
  IXMLTransportLoadingCharacteristics = interface;
  IXMLTransportLoadingCharacteristicsList = interface;
  IXMLTransportLoadingCode = interface;
  IXMLTransportLoadingCodeDescription = interface;
  IXMLEAttachment = interface;
  IXMLTransportUnloadingCharacteristics = interface;
  IXMLTransportUnloadingCode = interface;
  IXMLTransportUnloadingCodeDescription = interface;
  IXMLTransportOtherInstructions = interface;
  IXMLTransportOtherInstructionsList = interface;
  IXMLTransportInstructionCode = interface;
  IXMLDeliveryTransitTime = interface;
  IXMLDeliveryDestination = interface;
  IXMLDeliveryLegReference = interface;
  IXMLDeliveryLegReferenceList = interface;
  IXMLTermsOfChartering = interface;
  IXMLTermsOfCharteringList = interface;
  IXMLDeliveryScheduleReference = interface;
  IXMLDeliveryScheduleReferenceList = interface;
  IXMLCountryOfOrigin = interface;
  IXMLCountryOfDestination = interface;
  IXMLCountryOfConsumption = interface;
  IXMLInsurance = interface;
  IXMLInsuredValue = interface;
  IXMLDocumentInformation = interface;
  IXMLDocumentInformationList = interface;
  IXMLNumberOfDocuments = interface;
  IXMLNumberOfDocumentsList = interface;
  IXMLDeliveryMessageShipment = interface;
  IXMLDeliveryMessageShipmentList = interface;
  IXMLShipmentID = interface;
  IXMLDeliveryMessageProductGroup = interface;
  IXMLDeliveryMessageProductGroupList = interface;
  IXMLProductGroupID = interface;
  IXMLDeliveryShipmentLineItem = interface;
  IXMLDeliveryShipmentLineItemList = interface;
  IXMLPurchaseOrderInformation = interface;
  IXMLDateTimeBasis = interface;
  IXMLPurchaseOrderReference = interface;
  IXMLPurchaseOrderReferenceList = interface;
  IXMLMillProductionInformation = interface;
  IXMLMillCharacteristics = interface;
  IXMLQuantityOrderedInformation = interface;
  IXMLSafetyAndEnvironmentalInformationClass = interface;
  IXMLSafetyAndEnvironmentalInformationClassList = interface;
  IXMLChainOfCustody = interface;
  IXMLProductClass = interface;
  IXMLProductIdentifier = interface;
  IXMLProductIdentifierList = interface;
  IXMLProductDescription = interface;
  IXMLProductDescriptionList = interface;
  IXMLClassification = interface;
  IXMLClassificationList = interface;
  IXMLClassificationCode = interface;
  IXMLBookManufacturing = interface;
  IXMLProofInformationalQuantity = interface;
  IXMLProofInformationalQuantityList = interface;
  IXMLProofApprovalDate = interface;
  IXMLProofDueDate = interface;
  IXMLPrepInformation = interface;
  IXMLPrepInformationList = interface;
  IXMLSuppliedComponentInformation = interface;
  IXMLSuppliedComponentInformationList = interface;
  IXMLComponentShipDate = interface;
  IXMLComponentDueDate = interface;
  IXMLComponentNeededDate = interface;
  IXMLOrderStatusInformation = interface;
  IXMLOrderPrimaryStatus = interface;
  IXMLPackagingCharacteristics = interface;
  IXMLBoxCharacteristics = interface;
  IXMLDetailMeasurement = interface;
  IXMLBurstIndex = interface;
  IXMLBurstIndexList = interface;
  IXMLLabelCharacteristics = interface;
  IXMLLabelCharacteristicsList = interface;
  IXMLColourCode = interface;
  IXMLStencilCharacteristics = interface;
  IXMLStencilCharacteristicsList = interface;
  IXMLWrapCharacteristics = interface;
  IXMLWrap = interface;
  IXMLWrapList = interface;
  IXMLBandCharacteristics = interface;
  IXMLBandCharacteristicsList = interface;
  IXMLPalletPackagingCharacteristics = interface;
  IXMLPackagingCode = interface;
  IXMLPackagingCodeList = interface;
  IXMLPackagingDescription = interface;
  IXMLPackagingDescriptionList = interface;
  IXMLPalletCharacteristics = interface;
  IXMLPalletCharacteristicsList = interface;
  IXMLBookUnitPacking = interface;
  IXMLUnitCharacteristics = interface;
  IXMLLabelStock = interface;
  IXMLLabelStockCharacteristics = interface;
  IXMLLabelStockLayer = interface;
  IXMLLabelStockLayerList = interface;
  IXMLLayerMaterial = interface;
  IXMLExtraFeature = interface;
  IXMLExtraFeatureList = interface;
  IXMLSingleWidthReel = interface;
  IXMLSingleWidthReelConversionCharacteristics = interface;
  IXMLCoreCharacteristics = interface;
  IXMLCoreCharacteristicsList = interface;
  IXMLCoreStrengthCode = interface;
  IXMLReelPackagingCharacteristicsClass = interface;
  IXMLMaximumClampingForce = interface;
  IXMLTrimmedReel = interface;
  IXMLTrimmedReelConversionCharacteristics = interface;
  IXMLSlitReel = interface;
  IXMLSlitReelList = interface;
  IXMLSlitReelOrderQuantity = interface;
  IXMLSlitReelReference = interface;
  IXMLSlitReelReferenceList = interface;
  IXMLSheet = interface;
  IXMLSheetConversionCharacteristicsClass = interface;
  IXMLConversionCode = interface;
  IXMLSheetSize = interface;
  IXMLSheetSizeList = interface;
  IXMLPunchedHoleDetails = interface;
  IXMLPunchedHoleDetailsList = interface;
  IXMLNumberOfHoles = interface;
  IXMLSizeOfHolePunch = interface;
  IXMLHoleSpacing = interface;
  IXMLEvenSpacing = interface;
  IXMLDistanceFromEdge = interface;
  IXMLDistanceFromEdgeList = interface;
  IXMLCuttingDetails = interface;
  IXMLCuttingDetailsList = interface;
  IXMLCuttingTemplateCode = interface;
  IXMLEmbossing = interface;
  IXMLEmbossingList = interface;
  IXMLEmbossingCode = interface;
  IXMLWatermark = interface;
  IXMLWatermarkList = interface;
  IXMLWatermarkCode = interface;
  IXMLSheetPackagingCharacteristicsClass = interface;
  IXMLSheetCount = interface;
  IXMLSheetCountList = interface;
  IXMLPaper = interface;
  IXMLPaperCharacteristics = interface;
  IXMLAbrasion = interface;
  IXMLAbrasionList = interface;
  IXMLAbsorptionInk = interface;
  IXMLAbsorptionInkList = interface;
  IXMLAbsorptionLight = interface;
  IXMLAbsorptionLightList = interface;
  IXMLAbsorptionWater = interface;
  IXMLAbsorptionWaterList = interface;
  IXMLAppearance = interface;
  IXMLAppearanceList = interface;
  IXMLAsh = interface;
  IXMLAshList = interface;
  IXMLBasisWeight = interface;
  IXMLBasisWeightList = interface;
  IXMLBendingResistance = interface;
  IXMLBendingResistanceList = interface;
  IXMLBendingStiffness = interface;
  IXMLBendingStiffnessList = interface;
  IXMLBrightness = interface;
  IXMLBrightnessList = interface;
  IXMLBulk = interface;
  IXMLBulkList = interface;
  IXMLCaliper = interface;
  IXMLCaliperList = interface;
  IXMLCoatWeight = interface;
  IXMLCoatWeightList = interface;
  IXMLColourDetail = interface;
  IXMLColourDetailList = interface;
  IXMLCMYK = interface;
  IXMLBurst = interface;
  IXMLBurstList = interface;
  IXMLDetailValue = interface;
  IXMLDetailRangeMin = interface;
  IXMLDetailRangeMax = interface;
  IXMLStandardDeviation = interface;
  IXMLTwoSigmaLower = interface;
  IXMLTwoSigmaUpper = interface;
  IXMLColourShade = interface;
  IXMLHSB = interface;
  IXMLLab = interface;
  IXMLRGB = interface;
  IXMLDensity = interface;
  IXMLDensityList = interface;
  IXMLDirt = interface;
  IXMLDirtList = interface;
  IXMLDominantWavelength = interface;
  IXMLDominantWavelengthList = interface;
  IXMLExcitationPurity = interface;
  IXMLExcitationPurityList = interface;
  IXMLFibreLength = interface;
  IXMLFibreLengthList = interface;
  IXMLFibreClassification = interface;
  IXMLFibreClassificationList = interface;
  IXMLFolding = interface;
  IXMLFoldingList = interface;
  IXMLFormation = interface;
  IXMLFormationList = interface;
  IXMLFreeness = interface;
  IXMLFreenessList = interface;
  IXMLFriction = interface;
  IXMLFrictionList = interface;
  IXMLGloss = interface;
  IXMLGlossList = interface;
  IXMLLightScattering = interface;
  IXMLLightScatteringList = interface;
  IXMLLuminance = interface;
  IXMLLuminanceList = interface;
  IXMLMoisture = interface;
  IXMLMoistureList = interface;
  IXMLMullen = interface;
  IXMLMullenList = interface;
  IXMLOpacity = interface;
  IXMLOpacityList = interface;
  IXMLPermeability = interface;
  IXMLPermeabilityList = interface;
  IXMLPH = interface;
  IXMLPHList = interface;
  IXMLPlyBond = interface;
  IXMLPlyBondList = interface;
  IXMLPorosity = interface;
  IXMLPorosityList = interface;
  IXMLPostConsumerWaste = interface;
  IXMLPostConsumerWasteList = interface;
  IXMLPreConsumerWaste = interface;
  IXMLPreConsumerWasteList = interface;
  IXMLRecycled = interface;
  IXMLRecycledList = interface;
  IXMLResistance = interface;
  IXMLResistanceList = interface;
  IXMLRingCrush = interface;
  IXMLRingCrushList = interface;
  IXMLRoughness = interface;
  IXMLRoughnessList = interface;
  IXMLRunnabilityIndex = interface;
  IXMLRunnabilityIndexList = interface;
  IXMLShowThrough = interface;
  IXMLShowThroughList = interface;
  IXMLSizing = interface;
  IXMLSizingList = interface;
  IXMLSmoothness = interface;
  IXMLSmoothnessList = interface;
  IXMLStiffness = interface;
  IXMLStiffnessList = interface;
  IXMLStretch = interface;
  IXMLStretchList = interface;
  IXMLSurfaceStrength = interface;
  IXMLSurfaceStrengthList = interface;
  IXMLTEA = interface;
  IXMLTEAList = interface;
  IXMLTear = interface;
  IXMLTearList = interface;
  IXMLTearIndex = interface;
  IXMLTearIndexList = interface;
  IXMLTensile = interface;
  IXMLTensileList = interface;
  IXMLTensileIndex = interface;
  IXMLTensileIndexList = interface;
  IXMLWhiteness = interface;
  IXMLWhitenessList = interface;
  IXMLAdditionalTest = interface;
  IXMLPlyAttributes = interface;
  IXMLPlyAttributesList = interface;
  IXMLPlySet = interface;
  IXMLPlySetList = interface;
  IXMLReel = interface;
  IXMLReelConversionCharacteristicsClass = interface;
  IXMLPulpClass = interface;
  IXMLPulpCharacteristics = interface;
  IXMLDrainageResistance = interface;
  IXMLDrainageResistanceList = interface;
  IXMLViscosity = interface;
  IXMLViscosityList = interface;
  IXMLBale = interface;
  IXMLBaleConversionCharacteristics = interface;
  IXMLBalePackagingCharacteristics = interface;
  IXMLPulpUnitCharacteristics = interface;
  IXMLSlurry = interface;
  IXMLNonStandardPulp = interface;
  IXMLRecoveredPaper = interface;
  IXMLVirginFibre = interface;
  IXMLTimberCharacteristics = interface;
  IXMLLumberSpeciesClass = interface;
  IXMLLumberSpeciesClassList = interface;
  IXMLLog = interface;
  IXMLLogCharacteristics = interface;
  IXMLLogPackagingCharacteristics = interface;
  IXMLIdentifierS60 = interface;
  IXMLIdentifierS60List = interface;
  IXMLChip = interface;
  IXMLChipCharacteristics = interface;
  IXMLBark = interface;
  IXMLSawdust = interface;
  IXMLChipPackagingCharacteristics = interface;
  IXMLWoodProducts = interface;
  IXMLWoodTimbersDimensionalLumberBoards = interface;
  IXMLSoftwoodLumber = interface;
  IXMLSoftwoodLumberCharacteristicsClass = interface;
  IXMLLumberGradeClass = interface;
  IXMLDimensionConstructionClass = interface;
  IXMLDimensionConstructionClassList = interface;
  IXMLLumberSeasoningClass = interface;
  IXMLLumberMoistureContentClass = interface;
  IXMLHeatTreatmentClass = interface;
  IXMLLumberManufacturingProcessClass = interface;
  IXMLLumberManufacturingProcessClassList = interface;
  IXMLLumberPatternProfileClass = interface;
  IXMLLumberTrimClass = interface;
  IXMLLumberJoiningClass = interface;
  IXMLPressureTreatmentClass = interface;
  IXMLPressureTreatmentCompoundClass = interface;
  IXMLPressureTreatmentConcentration = interface;
  IXMLFireTreatmentClass = interface;
  IXMLOtherTreatmentClass = interface;
  IXMLConstructionGradeStampClass = interface;
  IXMLExLogClass = interface;
  IXMLLengthCutDescription = interface;
  IXMLPackaging = interface;
  IXMLProductPackagingClass = interface;
  IXMLUnitDimensionType = interface;
  IXMLDimensionMeasurementClass = interface;
  IXMLLumberPackageCodeClass = interface;
  IXMLHardwoodLumber = interface;
  IXMLRoofingSidingDeckingFencing = interface;
  IXMLNaturalWoodSiding = interface;
  IXMLNaturalWoodSidingOther = interface;
  IXMLDeckAndPorchFlooringMaterialsNaturalWood = interface;
  IXMLCompositeAndVeneerWoodPanels = interface;
  IXMLNAPlywoodOSBCharacteristicsClass = interface;
  IXMLPlywoodOSBGradeClass = interface;
  IXMLPlywoodOSBSurfaceClass = interface;
  IXMLPlywoodOSBOverlayClass = interface;
  IXMLPlywoodOSBOverlayClassList = interface;
  IXMLPlywoodOSBEdgeClass = interface;
  IXMLPlywoodOSBSupplementalClass = interface;
  IXMLPlywoodOSBSupplementalClassList = interface;
  IXMLConstructionPackagesAndPreFabPanels = interface;
  IXMLFloor = interface;
  IXMLWall = interface;
  IXMLRoof = interface;
  IXMLPackageInformationClass = interface;
  IXMLPackageInformationClassList = interface;
  IXMLInventoryClass = interface;
  IXMLInventoryClassCode = interface;
  IXMLInventoryClassCodeList = interface;
  IXMLPackageCharacteristics = interface;
  IXMLBaleItem = interface;
  IXMLBaleItemList = interface;
  IXMLBoxItem = interface;
  IXMLBoxItemList = interface;
  IXMLReamItem = interface;
  IXMLReamItemList = interface;
  IXMLSheetItem = interface;
  IXMLSheetItemList = interface;
  IXMLDateSheeted = interface;
  IXMLDateFinished = interface;
  IXMLUnitItem = interface;
  IXMLUnitItemList = interface;
  IXMLReelItem = interface;
  IXMLReelItemList = interface;
  IXMLDeliveryMessageReelCharacteristics = interface;
  IXMLMillJoinLocation = interface;
  IXMLMillJoinLocationList = interface;
  IXMLDateWound = interface;
  IXMLWoodItem = interface;
  IXMLWoodItemList = interface;
  IXMLProductSummary = interface;
  IXMLTotalQuantity = interface;
  IXMLTotalQuantityList = interface;
  IXMLTotalInformationalQuantity = interface;
  IXMLTotalInformationalQuantityList = interface;
  IXMLLengthSpecification = interface;
  IXMLLengthSpecificationList = interface;
  IXMLOtherDate = interface;
  IXMLOtherDateList = interface;
  IXMLTransportPackageInformation = interface;
  IXMLTransportPackageInformationList = interface;
  IXMLMeasurementWithText = interface;
  IXMLProductGroupSummary = interface;
  IXMLShipmentSummary = interface;
  IXMLDeliveryMessageWoodSummary = interface;
  IXMLCustomsTotals = interface;
  IXMLCustomsTotalsList = interface;
  IXMLCustomsStampInformation = interface;
  IXMLCustomsStampInformationList = interface;
  IXMLCustomsStampDate = interface;
  IXMLCustomsReferenceNumber = interface;
  IXMLSupplierCustomsReference = interface;
  IXMLTermsAndDisclaimers = interface;
  IXMLTermsAndDisclaimersList = interface;
  IXMLS255List = interface;
  IXMLS60List = interface;
  IXMLAnyURIList = interface;
  IXMLS72List = interface;
  IXMLS20List = interface;
  IXMLNni1List = interface;
  IXMLHolePunchTemplateReferenceTypeList = interface;
  IXMLReamTypeList = interface;
  IXMLPlywoodOSBSpeciesTypeList = interface;

{ IXMLDeliveryMessageWood }

  IXMLDeliveryMessageWood = interface(IXMLNode)
    ['{B2899B7C-991D-423A-96E3-D6EA3F58BA1D}']
    { Property Accessors }
    function Get_DeliveryMessageType: WideString;
    function Get_DeliveryMessageStatusType: WideString;
    function Get_Reissued: WideString;
    function Get_Language: WideString;
    function Get_DeliveryMessageWoodHeader: IXMLDeliveryMessageWoodHeader;
    function Get_DeliveryMessageShipment: IXMLDeliveryMessageShipmentList;
    function Get_DeliveryMessageWoodSummary: IXMLDeliveryMessageWoodSummary;
    procedure Set_DeliveryMessageType(Value: WideString);
    procedure Set_DeliveryMessageStatusType(Value: WideString);
    procedure Set_Reissued(Value: WideString);
    procedure Set_Language(Value: WideString);
    { Methods & Properties }
    property DeliveryMessageType: WideString read Get_DeliveryMessageType write Set_DeliveryMessageType;
    property DeliveryMessageStatusType: WideString read Get_DeliveryMessageStatusType write Set_DeliveryMessageStatusType;
    property Reissued: WideString read Get_Reissued write Set_Reissued;
    property Language: WideString read Get_Language write Set_Language;
    property DeliveryMessageWoodHeader: IXMLDeliveryMessageWoodHeader read Get_DeliveryMessageWoodHeader;
    property DeliveryMessageShipment: IXMLDeliveryMessageShipmentList read Get_DeliveryMessageShipment;
    property DeliveryMessageWoodSummary: IXMLDeliveryMessageWoodSummary read Get_DeliveryMessageWoodSummary;
  end;

{ IXMLDeliveryMessageWoodHeader }

  IXMLDeliveryMessageWoodHeader = interface(IXMLNode)
    ['{3875B2F0-9A34-4976-8749-9F87A62A6DF6}']
    { Property Accessors }
    function Get_DeliveryMessageNumber: WideString;
    function Get_TransactionHistoryNumber: LongWord;
    function Get_DeliveryMessageDate: IXMLDeliveryMessageDate;
    function Get_DeliveryMessageReference: IXMLDeliveryMessageReferenceList;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    function Get_BuyerParty: IXMLParty;
    function Get_BillToParty: IXMLParty;
    function Get_SupplierParty: IXMLParty;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_SenderParty: IXMLTypedParty;
    function Get_ReceiverParty: IXMLTypedPartyList;
    function Get_ShipToInformation: IXMLShipToInformationList;
    function Get_CountryOfOrigin: IXMLCountryOfOrigin;
    function Get_CountryOfDestination: IXMLCountryOfDestination;
    function Get_CountryOfConsumption: IXMLCountryOfConsumption;
    function Get_Insurance: IXMLInsurance;
    function Get_AdditionalText: IXMLS255List;
    function Get_DocumentInformation: IXMLDocumentInformationList;
    procedure Set_DeliveryMessageNumber(Value: WideString);
    procedure Set_TransactionHistoryNumber(Value: LongWord);
    { Methods & Properties }
    property DeliveryMessageNumber: WideString read Get_DeliveryMessageNumber write Set_DeliveryMessageNumber;
    property TransactionHistoryNumber: LongWord read Get_TransactionHistoryNumber write Set_TransactionHistoryNumber;
    property DeliveryMessageDate: IXMLDeliveryMessageDate read Get_DeliveryMessageDate;
    property DeliveryMessageReference: IXMLDeliveryMessageReferenceList read Get_DeliveryMessageReference;
    property DocumentReferenceInformation: IXMLDocumentReferenceInformationList read Get_DocumentReferenceInformation;
    property BuyerParty: IXMLParty read Get_BuyerParty;
    property BillToParty: IXMLParty read Get_BillToParty;
    property SupplierParty: IXMLParty read Get_SupplierParty;
    property OtherParty: IXMLTypedPartyList read Get_OtherParty;
    property SenderParty: IXMLTypedParty read Get_SenderParty;
    property ReceiverParty: IXMLTypedPartyList read Get_ReceiverParty;
    property ShipToInformation: IXMLShipToInformationList read Get_ShipToInformation;
    property CountryOfOrigin: IXMLCountryOfOrigin read Get_CountryOfOrigin;
    property CountryOfDestination: IXMLCountryOfDestination read Get_CountryOfDestination;
    property CountryOfConsumption: IXMLCountryOfConsumption read Get_CountryOfConsumption;
    property Insurance: IXMLInsurance read Get_Insurance;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property DocumentInformation: IXMLDocumentInformationList read Get_DocumentInformation;
  end;

{ IXMLDeliveryMessageDate }

  IXMLDeliveryMessageDate = interface(IXMLNode)
    ['{C1E1B603-26AD-4BE1-A902-893A43192192}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
  end;

{ IXMLDateBasis }

  IXMLDateBasis = interface(IXMLNode)
    ['{419D7072-62EC-4D7C-A48A-4AD9D0284C66}']
    { Property Accessors }
    function Get_Year: WideString;
    function Get_Month: LongWord;
    function Get_Day: LongWord;
    procedure Set_Year(Value: WideString);
    procedure Set_Month(Value: LongWord);
    procedure Set_Day(Value: LongWord);
    { Methods & Properties }
    property Year: WideString read Get_Year write Set_Year;
    property Month: LongWord read Get_Month write Set_Month;
    property Day: LongWord read Get_Day write Set_Day;
  end;

{ IXMLDeliveryMessageReference }

  IXMLDeliveryMessageReference = interface(IXMLNode)
    ['{A4D7F976-E991-4672-B478-BDF3D1267C75}']
    { Property Accessors }
    function Get_DeliveryMessageReferenceType: WideString;
    function Get_AssignedBy: WideString;
    procedure Set_DeliveryMessageReferenceType(Value: WideString);
    procedure Set_AssignedBy(Value: WideString);
    { Methods & Properties }
    property DeliveryMessageReferenceType: WideString read Get_DeliveryMessageReferenceType write Set_DeliveryMessageReferenceType;
    property AssignedBy: WideString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLDeliveryMessageReferenceList }

  IXMLDeliveryMessageReferenceList = interface(IXMLNodeCollection)
    ['{CDB2354E-23F6-4A76-8A03-52EAFE9D22BD}']
    { Methods & Properties }
    function Add: IXMLDeliveryMessageReference;
    function Insert(const Index: Integer): IXMLDeliveryMessageReference;
    function Get_Item(Index: Integer): IXMLDeliveryMessageReference;
    property Items[Index: Integer]: IXMLDeliveryMessageReference read Get_Item; default;
  end;

{ IXMLDocumentReferenceInformation }

  IXMLDocumentReferenceInformation = interface(IXMLNode)
    ['{2546A242-E6BB-4D64-9D84-BB98E7752208}']
    { Property Accessors }
    function Get_DocumentReferenceID: IXMLDocumentReferenceID;
    function Get_DocumentReferenceIDLineItemNumber: LongWord;
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    function Get_NumberOfDocumentsRequired: LongWord;
    procedure Set_DocumentReferenceIDLineItemNumber(Value: LongWord);
    procedure Set_Time(Value: WideString);
    procedure Set_NumberOfDocumentsRequired(Value: LongWord);
    { Methods & Properties }
    property DocumentReferenceID: IXMLDocumentReferenceID read Get_DocumentReferenceID;
    property DocumentReferenceIDLineItemNumber: LongWord read Get_DocumentReferenceIDLineItemNumber write Set_DocumentReferenceIDLineItemNumber;
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
    property NumberOfDocumentsRequired: LongWord read Get_NumberOfDocumentsRequired write Set_NumberOfDocumentsRequired;
  end;

{ IXMLDocumentReferenceInformationList }

  IXMLDocumentReferenceInformationList = interface(IXMLNodeCollection)
    ['{070DCB29-CFD2-4781-8EBF-9E351FDA0611}']
    { Methods & Properties }
    function Add: IXMLDocumentReferenceInformation;
    function Insert(const Index: Integer): IXMLDocumentReferenceInformation;
    function Get_Item(Index: Integer): IXMLDocumentReferenceInformation;
    property Items[Index: Integer]: IXMLDocumentReferenceInformation read Get_Item; default;
  end;

{ IXMLDocumentReferenceID }

  IXMLDocumentReferenceID = interface(IXMLNode)
    ['{C6548F3E-6AE5-4BD6-A9F0-2D39BF317793}']
    { Property Accessors }
    function Get_DocumentReferenceIDType: WideString;
    function Get_AssignedBy: WideString;
    procedure Set_DocumentReferenceIDType(Value: WideString);
    procedure Set_AssignedBy(Value: WideString);
    { Methods & Properties }
    property DocumentReferenceIDType: WideString read Get_DocumentReferenceIDType write Set_DocumentReferenceIDType;
    property AssignedBy: WideString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLParty }

  IXMLParty = interface(IXMLNode)
    ['{82C5B493-F1A4-4042-A9B7-8F767C4C7FE5}']
    { Property Accessors }
    function Get_LogisticsRole: WideString;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_NameAddress: IXMLNameAddress;
    function Get_URL: WideString;
    function Get_CommonContact: IXMLCommonContactList;
    procedure Set_LogisticsRole(Value: WideString);
    procedure Set_URL(Value: WideString);
    { Methods & Properties }
    property LogisticsRole: WideString read Get_LogisticsRole write Set_LogisticsRole;
    property PartyIdentifier: IXMLPartyIdentifierList read Get_PartyIdentifier;
    property NameAddress: IXMLNameAddress read Get_NameAddress;
    property URL: WideString read Get_URL write Set_URL;
    property CommonContact: IXMLCommonContactList read Get_CommonContact;
  end;

{ IXMLPartyIdentifier }

  IXMLPartyIdentifier = interface(IXMLNode)
    ['{AFC4CB4A-1E00-44EB-82A3-455A142105B1}']
    { Property Accessors }
    function Get_PartyIdentifierType: WideString;
    procedure Set_PartyIdentifierType(Value: WideString);
    { Methods & Properties }
    property PartyIdentifierType: WideString read Get_PartyIdentifierType write Set_PartyIdentifierType;
  end;

{ IXMLPartyIdentifierList }

  IXMLPartyIdentifierList = interface(IXMLNodeCollection)
    ['{8B4A8940-29AA-4C81-ABD3-444CDF315F55}']
    { Methods & Properties }
    function Add: IXMLPartyIdentifier;
    function Insert(const Index: Integer): IXMLPartyIdentifier;
    function Get_Item(Index: Integer): IXMLPartyIdentifier;
    property Items[Index: Integer]: IXMLPartyIdentifier read Get_Item; default;
  end;

{ IXMLNameAddress }

  IXMLNameAddress = interface(IXMLNode)
    ['{60CBA6BE-AD9D-49C6-987A-7DD9DBFAE5AD}']
    { Property Accessors }
    function Get_CommunicationRole: WideString;
    function Get_Name1: WideString;
    function Get_Name2: WideString;
    function Get_Name3: WideString;
    function Get_OrganisationUnit: IXMLOrganisationUnit;
    function Get_Address1: WideString;
    function Get_Address2: WideString;
    function Get_Address3: WideString;
    function Get_Address4: WideString;
    function Get_City: WideString;
    function Get_County: WideString;
    function Get_StateOrProvince: WideString;
    function Get_PostalCode: IXMLPostalCode;
    function Get_Country: IXMLCountry;
    function Get_GPSCoordinates: IXMLGPSCoordinates;
    procedure Set_CommunicationRole(Value: WideString);
    procedure Set_Name1(Value: WideString);
    procedure Set_Name2(Value: WideString);
    procedure Set_Name3(Value: WideString);
    procedure Set_Address1(Value: WideString);
    procedure Set_Address2(Value: WideString);
    procedure Set_Address3(Value: WideString);
    procedure Set_Address4(Value: WideString);
    procedure Set_City(Value: WideString);
    procedure Set_County(Value: WideString);
    procedure Set_StateOrProvince(Value: WideString);
    { Methods & Properties }
    property CommunicationRole: WideString read Get_CommunicationRole write Set_CommunicationRole;
    property Name1: WideString read Get_Name1 write Set_Name1;
    property Name2: WideString read Get_Name2 write Set_Name2;
    property Name3: WideString read Get_Name3 write Set_Name3;
    property OrganisationUnit: IXMLOrganisationUnit read Get_OrganisationUnit;
    property Address1: WideString read Get_Address1 write Set_Address1;
    property Address2: WideString read Get_Address2 write Set_Address2;
    property Address3: WideString read Get_Address3 write Set_Address3;
    property Address4: WideString read Get_Address4 write Set_Address4;
    property City: WideString read Get_City write Set_City;
    property County: WideString read Get_County write Set_County;
    property StateOrProvince: WideString read Get_StateOrProvince write Set_StateOrProvince;
    property PostalCode: IXMLPostalCode read Get_PostalCode;
    property Country: IXMLCountry read Get_Country;
    property GPSCoordinates: IXMLGPSCoordinates read Get_GPSCoordinates;
  end;

{ IXMLOrganisationUnit }

  IXMLOrganisationUnit = interface(IXMLNode)
    ['{8A48475D-17DA-4B2F-94F5-1C0E1CB3EEB1}']
    { Property Accessors }
    function Get_OrganisationUnitType: WideString;
    function Get_OrganisationUnitName: WideString;
    function Get_OrganisationUnitCode: WideString;
    procedure Set_OrganisationUnitType(Value: WideString);
    procedure Set_OrganisationUnitName(Value: WideString);
    procedure Set_OrganisationUnitCode(Value: WideString);
    { Methods & Properties }
    property OrganisationUnitType: WideString read Get_OrganisationUnitType write Set_OrganisationUnitType;
    property OrganisationUnitName: WideString read Get_OrganisationUnitName write Set_OrganisationUnitName;
    property OrganisationUnitCode: WideString read Get_OrganisationUnitCode write Set_OrganisationUnitCode;
  end;

{ IXMLPostalCode }

  IXMLPostalCode = interface(IXMLNode)
    ['{673977B7-F963-4823-9317-F884C1DF0F50}']
  end;

{ IXMLCountry }

  IXMLCountry = interface(IXMLNode)
    ['{F47AC335-05D9-4C97-94CB-F14D5247C2B5}']
    { Property Accessors }
    function Get_ISOCountryCode: WideString;
    procedure Set_ISOCountryCode(Value: WideString);
    { Methods & Properties }
    property ISOCountryCode: WideString read Get_ISOCountryCode write Set_ISOCountryCode;
  end;

{ IXMLGPSCoordinates }

  IXMLGPSCoordinates = interface(IXMLNode)
    ['{9108462E-670B-4098-A742-1FB628527113}']
    { Property Accessors }
    function Get_GPSSystem: WideString;
    function Get_Latitude: WideString;
    function Get_Longitude: WideString;
    function Get_Height: IXMLMeasurement;
    procedure Set_GPSSystem(Value: WideString);
    procedure Set_Latitude(Value: WideString);
    procedure Set_Longitude(Value: WideString);
    { Methods & Properties }
    property GPSSystem: WideString read Get_GPSSystem write Set_GPSSystem;
    property Latitude: WideString read Get_Latitude write Set_Latitude;
    property Longitude: WideString read Get_Longitude write Set_Longitude;
    property Height: IXMLMeasurement read Get_Height;
  end;

{ IXMLMeasurement }

  IXMLMeasurement = interface(IXMLNode)
    ['{9E2DFF14-D60A-42BC-9D47-6737C796B225}']
    { Property Accessors }
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    { Methods & Properties }
    property Value: IXMLValue read Get_Value;
    property RangeMin: IXMLRangeMin read Get_RangeMin;
    property RangeMax: IXMLRangeMax read Get_RangeMax;
  end;

{ IXMLMeasurementList }

  IXMLMeasurementList = interface(IXMLNodeCollection)
    ['{9BC48053-23C8-4CF6-A40E-C39ADD585948}']
    { Methods & Properties }
    function Add: IXMLMeasurement;
    function Insert(const Index: Integer): IXMLMeasurement;
    function Get_Item(Index: Integer): IXMLMeasurement;
    property Items[Index: Integer]: IXMLMeasurement read Get_Item; default;
  end;

{ IXMLValue }

  IXMLValue = interface(IXMLNode)
    ['{03892215-2736-43CB-A5EF-A1E3E49D86DB}']
    { Property Accessors }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
    { Methods & Properties }
    property UOM: WideString read Get_UOM write Set_UOM;
  end;

{ IXMLRangeMin }

  IXMLRangeMin = interface(IXMLNode)
    ['{EF65CF94-4980-4C01-98F9-05104CA83130}']
    { Property Accessors }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
    { Methods & Properties }
    property UOM: WideString read Get_UOM write Set_UOM;
  end;

{ IXMLRangeMax }

  IXMLRangeMax = interface(IXMLNode)
    ['{25F7EE5A-3C93-4A00-BC7F-F921BB2338F8}']
    { Property Accessors }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
    { Methods & Properties }
    property UOM: WideString read Get_UOM write Set_UOM;
  end;

{ IXMLCommonContact }

  IXMLCommonContact = interface(IXMLNode)
    ['{309D36C1-B9A5-41E4-A9CA-392024870DDF}']
    { Property Accessors }
    function Get_ContactType: WideString;
    function Get_ContactName: WideString;
    function Get_Telephone: WideString;
    function Get_MobilePhone: WideString;
    function Get_Email: WideString;
    function Get_Fax: WideString;
    function Get_GPSCoordinates: IXMLGPSCoordinates;
    procedure Set_ContactType(Value: WideString);
    procedure Set_ContactName(Value: WideString);
    procedure Set_Telephone(Value: WideString);
    procedure Set_MobilePhone(Value: WideString);
    procedure Set_Email(Value: WideString);
    procedure Set_Fax(Value: WideString);
    { Methods & Properties }
    property ContactType: WideString read Get_ContactType write Set_ContactType;
    property ContactName: WideString read Get_ContactName write Set_ContactName;
    property Telephone: WideString read Get_Telephone write Set_Telephone;
    property MobilePhone: WideString read Get_MobilePhone write Set_MobilePhone;
    property Email: WideString read Get_Email write Set_Email;
    property Fax: WideString read Get_Fax write Set_Fax;
    property GPSCoordinates: IXMLGPSCoordinates read Get_GPSCoordinates;
  end;

{ IXMLCommonContactList }

  IXMLCommonContactList = interface(IXMLNodeCollection)
    ['{129CE0DF-F06A-4359-A014-18AA07FFFCF5}']
    { Methods & Properties }
    function Add: IXMLCommonContact;
    function Insert(const Index: Integer): IXMLCommonContact;
    function Get_Item(Index: Integer): IXMLCommonContact;
    property Items[Index: Integer]: IXMLCommonContact read Get_Item; default;
  end;

{ IXMLTypedParty }

  IXMLTypedParty = interface(IXMLParty)
    ['{CFEE7423-A09A-4F20-94F1-F9A2628FE139}']
    { Property Accessors }
    function Get_PartyType: WideString;
    procedure Set_PartyType(Value: WideString);
    { Methods & Properties }
    property PartyType: WideString read Get_PartyType write Set_PartyType;
  end;

{ IXMLTypedPartyList }

  IXMLTypedPartyList = interface(IXMLNodeCollection)
    ['{70E7BD08-2824-4EB2-91C9-50539FA7D2B3}']
    { Methods & Properties }
    function Add: IXMLTypedParty;
    function Insert(const Index: Integer): IXMLTypedParty;
    function Get_Item(Index: Integer): IXMLTypedParty;
    property Items[Index: Integer]: IXMLTypedParty read Get_Item; default;
  end;

{ IXMLShipToInformation }

  IXMLShipToInformation = interface(IXMLNode)
    ['{4AEB8768-B43C-47B2-B50D-FB3AC100CD8F}']
    { Property Accessors }
    function Get_ShipToCharacteristics: IXMLShipToCharacteristics;
    function Get_DeliverySchedule: IXMLDeliveryScheduleList;
    { Methods & Properties }
    property ShipToCharacteristics: IXMLShipToCharacteristics read Get_ShipToCharacteristics;
    property DeliverySchedule: IXMLDeliveryScheduleList read Get_DeliverySchedule;
  end;

{ IXMLShipToInformationList }

  IXMLShipToInformationList = interface(IXMLNodeCollection)
    ['{D22DF124-9B46-439C-B2CD-B68733B1D889}']
    { Methods & Properties }
    function Add: IXMLShipToInformation;
    function Insert(const Index: Integer): IXMLShipToInformation;
    function Get_Item(Index: Integer): IXMLShipToInformation;
    property Items[Index: Integer]: IXMLShipToInformation read Get_Item; default;
  end;

{ IXMLShipToCharacteristics }

  IXMLShipToCharacteristics = interface(IXMLNode)
    ['{8156DD85-F529-4DA2-9C34-66F7B1205E89}']
    { Property Accessors }
    function Get_ShipToParty: IXMLTypedParty;
    function Get_LocationCode: IXMLLocationCode;
    function Get_TermsOfDelivery: IXMLTermsOfDelivery;
    function Get_DeliveryRouteCode: IXMLDeliveryRouteCode;
    { Methods & Properties }
    property ShipToParty: IXMLTypedParty read Get_ShipToParty;
    property LocationCode: IXMLLocationCode read Get_LocationCode;
    property TermsOfDelivery: IXMLTermsOfDelivery read Get_TermsOfDelivery;
    property DeliveryRouteCode: IXMLDeliveryRouteCode read Get_DeliveryRouteCode;
  end;

{ IXMLLocationCode }

  IXMLLocationCode = interface(IXMLNode)
    ['{06219F55-B2DA-4CF6-B018-267255605E7D}']
    { Property Accessors }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
  end;

{ IXMLTermsOfDelivery }

  IXMLTermsOfDelivery = interface(IXMLNode)
    ['{6761937D-0A9C-4156-A170-486ADC4EFF03}']
    { Property Accessors }
    function Get_IncotermsLocation: IXMLIncotermsLocation;
    function Get_ShipmentMethodOfPayment: IXMLShipmentMethodOfPayment;
    function Get_FreightPayableAt: WideString;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_FreightPayableAt(Value: WideString);
    { Methods & Properties }
    property IncotermsLocation: IXMLIncotermsLocation read Get_IncotermsLocation;
    property ShipmentMethodOfPayment: IXMLShipmentMethodOfPayment read Get_ShipmentMethodOfPayment;
    property FreightPayableAt: WideString read Get_FreightPayableAt write Set_FreightPayableAt;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLIncotermsLocation }

  IXMLIncotermsLocation = interface(IXMLNode)
    ['{43C838C4-E91B-44EC-ABDF-40792A6CF62D}']
    { Property Accessors }
    function Get_Incoterms: WideString;
    function Get_IncotermsVersion: WideString;
    procedure Set_Incoterms(Value: WideString);
    procedure Set_IncotermsVersion(Value: WideString);
    { Methods & Properties }
    property Incoterms: WideString read Get_Incoterms write Set_Incoterms;
    property IncotermsVersion: WideString read Get_IncotermsVersion write Set_IncotermsVersion;
  end;

{ IXMLShipmentMethodOfPayment }

  IXMLShipmentMethodOfPayment = interface(IXMLNode)
    ['{AEF1B8F6-FD3A-429A-B482-EDAE52B208C6}']
    { Property Accessors }
    function Get_LocationQualifier: WideString;
    function Get_Method: WideString;
    procedure Set_LocationQualifier(Value: WideString);
    procedure Set_Method(Value: WideString);
    { Methods & Properties }
    property LocationQualifier: WideString read Get_LocationQualifier write Set_LocationQualifier;
    property Method: WideString read Get_Method write Set_Method;
  end;

{ IXMLDeliveryRouteCode }

  IXMLDeliveryRouteCode = interface(IXMLNode)
    ['{4A773D9A-E6A5-4ACA-A800-5B8DA15509AC}']
    { Property Accessors }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
  end;

{ IXMLDeliverySchedule }

  IXMLDeliverySchedule = interface(IXMLNode)
    ['{5DEE7E2E-13AB-4A88-8F71-A0DC35C1904F}']
    { Property Accessors }
    function Get_DeliveryLineNumber: LongWord;
    function Get_ProductionStatus: IXMLProductionStatus;
    function Get_DeliveryStatus: IXMLDeliveryStatus;
    function Get_DeliveryDateWindow: IXMLDeliveryDateWindowList;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_PriceDetails: IXMLPriceDetails;
    function Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
    function Get_DeliveryLeg: IXMLDeliveryLegList;
    function Get_DeliveryScheduleReference: IXMLDeliveryScheduleReferenceList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_DeliveryLineNumber(Value: LongWord);
    { Methods & Properties }
    property DeliveryLineNumber: LongWord read Get_DeliveryLineNumber write Set_DeliveryLineNumber;
    property ProductionStatus: IXMLProductionStatus read Get_ProductionStatus;
    property DeliveryStatus: IXMLDeliveryStatus read Get_DeliveryStatus;
    property DeliveryDateWindow: IXMLDeliveryDateWindowList read Get_DeliveryDateWindow;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property PriceDetails: IXMLPriceDetails read Get_PriceDetails;
    property MonetaryAdjustment: IXMLMonetaryAdjustmentList read Get_MonetaryAdjustment;
    property DeliveryLeg: IXMLDeliveryLegList read Get_DeliveryLeg;
    property DeliveryScheduleReference: IXMLDeliveryScheduleReferenceList read Get_DeliveryScheduleReference;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLDeliveryScheduleList }

  IXMLDeliveryScheduleList = interface(IXMLNodeCollection)
    ['{49FB0406-FF24-49B5-A4BE-3F5F9BD28958}']
    { Methods & Properties }
    function Add: IXMLDeliverySchedule;
    function Insert(const Index: Integer): IXMLDeliverySchedule;
    function Get_Item(Index: Integer): IXMLDeliverySchedule;
    property Items[Index: Integer]: IXMLDeliverySchedule read Get_Item; default;
  end;

{ IXMLProductionStatus }

  IXMLProductionStatus = interface(IXMLNode)
    ['{9D6B499A-F038-4198-8F47-E8DE72241B7E}']
    { Property Accessors }
    function Get_ProductionStatusType: WideString;
    function Get_ProductionLastDateOfChange: IXMLProductionLastDateOfChange;
    procedure Set_ProductionStatusType(Value: WideString);
    { Methods & Properties }
    property ProductionStatusType: WideString read Get_ProductionStatusType write Set_ProductionStatusType;
    property ProductionLastDateOfChange: IXMLProductionLastDateOfChange read Get_ProductionLastDateOfChange;
  end;

{ IXMLProductionLastDateOfChange }

  IXMLProductionLastDateOfChange = interface(IXMLNode)
    ['{DBFE5601-7683-421E-9DF6-254C85D2A3C3}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
  end;

{ IXMLDeliveryStatus }

  IXMLDeliveryStatus = interface(IXMLNode)
    ['{12F958FD-8556-49B1-A694-E1FD72004DAB}']
    { Property Accessors }
    function Get_DeliveryStatusType: WideString;
    function Get_DeliveryLastDateOfChange: IXMLDeliveryLastDateOfChange;
    procedure Set_DeliveryStatusType(Value: WideString);
    { Methods & Properties }
    property DeliveryStatusType: WideString read Get_DeliveryStatusType write Set_DeliveryStatusType;
    property DeliveryLastDateOfChange: IXMLDeliveryLastDateOfChange read Get_DeliveryLastDateOfChange;
  end;

{ IXMLDeliveryLastDateOfChange }

  IXMLDeliveryLastDateOfChange = interface(IXMLNode)
    ['{D5BD9E3E-549B-401B-A105-1CC63DCC5828}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
  end;

{ IXMLDeliveryDateWindow }

  IXMLDeliveryDateWindow = interface(IXMLNode)
    ['{4D21706A-D369-4D20-B306-9CF1AAFBF12A}']
    { Property Accessors }
    function Get_DeliveryDateType: WideString;
    function Get_DateTimeRange: IXMLDateTimeRange;
    function Get_Month: LongWord;
    function Get_Week: WideString;
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_DeliveryDateType(Value: WideString);
    procedure Set_Month(Value: LongWord);
    procedure Set_Week(Value: WideString);
    procedure Set_Time(Value: WideString);
    { Methods & Properties }
    property DeliveryDateType: WideString read Get_DeliveryDateType write Set_DeliveryDateType;
    property DateTimeRange: IXMLDateTimeRange read Get_DateTimeRange;
    property Month: LongWord read Get_Month write Set_Month;
    property Week: WideString read Get_Week write Set_Week;
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
  end;

{ IXMLDeliveryDateWindowList }

  IXMLDeliveryDateWindowList = interface(IXMLNodeCollection)
    ['{8D406531-E366-4703-9063-AF6CCC52DBC8}']
    { Methods & Properties }
    function Add: IXMLDeliveryDateWindow;
    function Insert(const Index: Integer): IXMLDeliveryDateWindow;
    function Get_Item(Index: Integer): IXMLDeliveryDateWindow;
    property Items[Index: Integer]: IXMLDeliveryDateWindow read Get_Item; default;
  end;

{ IXMLDateTimeRange }

  IXMLDateTimeRange = interface(IXMLNode)
    ['{E3DB39CF-4C3E-4470-83D4-DD260641D10B}']
    { Property Accessors }
    function Get_DateTimeFrom: IXMLDateTimeFrom;
    function Get_DateTimeTo: IXMLDateTimeTo;
    { Methods & Properties }
    property DateTimeFrom: IXMLDateTimeFrom read Get_DateTimeFrom;
    property DateTimeTo: IXMLDateTimeTo read Get_DateTimeTo;
  end;

{ IXMLDateTimeFrom }

  IXMLDateTimeFrom = interface(IXMLNode)
    ['{66EDFBEB-E065-4F6D-9532-B2FAE130ADBF}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
  end;

{ IXMLDateTimeTo }

  IXMLDateTimeTo = interface(IXMLNode)
    ['{9B0F1295-55B2-46C8-A9E6-64BF3175B808}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
  end;

{ IXMLQuantity }

  IXMLQuantity = interface(IXMLMeasurement)
    ['{C8A9A8E8-C4CB-4771-A688-02AD6F85EF41}']
    { Property Accessors }
    function Get_QuantityType: WideString;
    function Get_QuantityTypeContext: WideString;
    function Get_AdjustmentType: WideString;
    procedure Set_QuantityType(Value: WideString);
    procedure Set_QuantityTypeContext(Value: WideString);
    procedure Set_AdjustmentType(Value: WideString);
    { Methods & Properties }
    property QuantityType: WideString read Get_QuantityType write Set_QuantityType;
    property QuantityTypeContext: WideString read Get_QuantityTypeContext write Set_QuantityTypeContext;
    property AdjustmentType: WideString read Get_AdjustmentType write Set_AdjustmentType;
  end;

{ IXMLInformationalQuantity }

  IXMLInformationalQuantity = interface(IXMLMeasurement)
    ['{09A61180-1C43-4ED7-9E04-29201441055A}']
    { Property Accessors }
    function Get_QuantityType: WideString;
    function Get_QuantityTypeContext: WideString;
    function Get_AdjustmentType: WideString;
    procedure Set_QuantityType(Value: WideString);
    procedure Set_QuantityTypeContext(Value: WideString);
    procedure Set_AdjustmentType(Value: WideString);
    { Methods & Properties }
    property QuantityType: WideString read Get_QuantityType write Set_QuantityType;
    property QuantityTypeContext: WideString read Get_QuantityTypeContext write Set_QuantityTypeContext;
    property AdjustmentType: WideString read Get_AdjustmentType write Set_AdjustmentType;
  end;

{ IXMLInformationalQuantityList }

  IXMLInformationalQuantityList = interface(IXMLNodeCollection)
    ['{45F05C74-BA31-4CCC-B744-E196200FD2F2}']
    { Methods & Properties }
    function Add: IXMLInformationalQuantity;
    function Insert(const Index: Integer): IXMLInformationalQuantity;
    function Get_Item(Index: Integer): IXMLInformationalQuantity;
    property Items[Index: Integer]: IXMLInformationalQuantity read Get_Item; default;
  end;

{ IXMLPriceDetails }

  IXMLPriceDetails = interface(IXMLNode)
    ['{9CE98633-98C5-4B06-955E-51FB875BFC06}']
    { Property Accessors }
    function Get_PriceQuantityBasis: WideString;
    function Get_PriceTaxBasis: WideString;
    function Get_PricePerUnit: IXMLPricePerUnit;
    function Get_InformationalPricePerUnit: IXMLPricePerUnitList;
    function Get_AdditionalText: IXMLS255List;
    function Get_ExchangeRate: IXMLExchangeRate;
    function Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
    function Get_GeneralLedgerAccount: IXMLGeneralLedgerAccount;
    procedure Set_PriceQuantityBasis(Value: WideString);
    procedure Set_PriceTaxBasis(Value: WideString);
    { Methods & Properties }
    property PriceQuantityBasis: WideString read Get_PriceQuantityBasis write Set_PriceQuantityBasis;
    property PriceTaxBasis: WideString read Get_PriceTaxBasis write Set_PriceTaxBasis;
    property PricePerUnit: IXMLPricePerUnit read Get_PricePerUnit;
    property InformationalPricePerUnit: IXMLPricePerUnitList read Get_InformationalPricePerUnit;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property ExchangeRate: IXMLExchangeRate read Get_ExchangeRate;
    property MonetaryAdjustment: IXMLMonetaryAdjustmentList read Get_MonetaryAdjustment;
    property GeneralLedgerAccount: IXMLGeneralLedgerAccount read Get_GeneralLedgerAccount;
  end;

{ IXMLPricePerUnit }

  IXMLPricePerUnit = interface(IXMLNode)
    ['{6E181892-7FCD-45B2-AB94-79B2485DC213}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
    property Value: IXMLValue read Get_Value;
    property RangeMin: IXMLRangeMin read Get_RangeMin;
    property RangeMax: IXMLRangeMax read Get_RangeMax;
  end;

{ IXMLPricePerUnitList }

  IXMLPricePerUnitList = interface(IXMLNodeCollection)
    ['{669EDD27-284E-400F-B5C6-D9EF04B617BB}']
    { Methods & Properties }
    function Add: IXMLPricePerUnit;
    function Insert(const Index: Integer): IXMLPricePerUnit;
    function Get_Item(Index: Integer): IXMLPricePerUnit;
    property Items[Index: Integer]: IXMLPricePerUnit read Get_Item; default;
  end;

{ IXMLCurrencyValue }

  IXMLCurrencyValue = interface(IXMLNode)
    ['{638A39A8-ECE1-498B-A8B9-6022540C6A26}']
    { Property Accessors }
    function Get_CurrencyType: WideString;
    procedure Set_CurrencyType(Value: WideString);
    { Methods & Properties }
    property CurrencyType: WideString read Get_CurrencyType write Set_CurrencyType;
  end;

{ IXMLExchangeRate }

  IXMLExchangeRate = interface(IXMLNode)
    ['{916F7A04-274D-4795-8B01-B43C704010DD}']
    { Property Accessors }
    function Get_ExchangeRateType: WideString;
    function Get_CurrencyFromType: WideString;
    function Get_CurrencyValue: IXMLCurrencyValue;
    function Get_MinCurrencyValue: IXMLMinCurrencyValue;
    function Get_MaxCurrencyValue: IXMLMaxCurrencyValue;
    function Get_Date: IXMLDateBasis;
    procedure Set_ExchangeRateType(Value: WideString);
    procedure Set_CurrencyFromType(Value: WideString);
    { Methods & Properties }
    property ExchangeRateType: WideString read Get_ExchangeRateType write Set_ExchangeRateType;
    property CurrencyFromType: WideString read Get_CurrencyFromType write Set_CurrencyFromType;
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
    property MinCurrencyValue: IXMLMinCurrencyValue read Get_MinCurrencyValue;
    property MaxCurrencyValue: IXMLMaxCurrencyValue read Get_MaxCurrencyValue;
    property Date: IXMLDateBasis read Get_Date;
  end;

{ IXMLMinCurrencyValue }

  IXMLMinCurrencyValue = interface(IXMLNode)
    ['{72F3398D-D8B9-494D-8D07-B26FA948F2B2}']
    { Property Accessors }
    function Get_CurrencyType: WideString;
    procedure Set_CurrencyType(Value: WideString);
    { Methods & Properties }
    property CurrencyType: WideString read Get_CurrencyType write Set_CurrencyType;
  end;

{ IXMLMaxCurrencyValue }

  IXMLMaxCurrencyValue = interface(IXMLNode)
    ['{D8848791-AC7E-4D90-940E-5D115DF110A4}']
    { Property Accessors }
    function Get_CurrencyType: WideString;
    procedure Set_CurrencyType(Value: WideString);
    { Methods & Properties }
    property CurrencyType: WideString read Get_CurrencyType write Set_CurrencyType;
  end;

{ IXMLMonetaryAdjustment }

  IXMLMonetaryAdjustment = interface(IXMLNode)
    ['{61647D88-C71B-41BC-8D70-786117158FCC}']
    { Property Accessors }
    function Get_AdjustmentType: WideString;
    function Get_MonetaryAdjustmentLine: LongWord;
    function Get_MonetaryAdjustmentStartAmount: IXMLMonetaryAdjustmentStartAmount;
    function Get_MonetaryAdjustmentStartQuantity: IXMLMeasurement;
    function Get_PriceAdjustment: IXMLPriceAdjustment;
    function Get_FlatAmountAdjustment: IXMLFlatAmountAdjustment;
    function Get_TaxAdjustment: IXMLTaxAdjustment;
    function Get_InformationalAmount: IXMLInformationalAmount;
    function Get_MonetaryAdjustmentReferenceLine: LongWord;
    function Get_AdditionalText: IXMLS255List;
    function Get_GeneralLedgerAccount: IXMLGeneralLedgerAccount;
    function Get_MonetaryAdjustmentAmount: IXMLMonetaryAdjustmentAmount;
    function Get_AdjustmentTypeReason: WideString;
    procedure Set_AdjustmentType(Value: WideString);
    procedure Set_MonetaryAdjustmentLine(Value: LongWord);
    procedure Set_MonetaryAdjustmentReferenceLine(Value: LongWord);
    procedure Set_AdjustmentTypeReason(Value: WideString);
    { Methods & Properties }
    property AdjustmentType: WideString read Get_AdjustmentType write Set_AdjustmentType;
    property MonetaryAdjustmentLine: LongWord read Get_MonetaryAdjustmentLine write Set_MonetaryAdjustmentLine;
    property MonetaryAdjustmentStartAmount: IXMLMonetaryAdjustmentStartAmount read Get_MonetaryAdjustmentStartAmount;
    property MonetaryAdjustmentStartQuantity: IXMLMeasurement read Get_MonetaryAdjustmentStartQuantity;
    property PriceAdjustment: IXMLPriceAdjustment read Get_PriceAdjustment;
    property FlatAmountAdjustment: IXMLFlatAmountAdjustment read Get_FlatAmountAdjustment;
    property TaxAdjustment: IXMLTaxAdjustment read Get_TaxAdjustment;
    property InformationalAmount: IXMLInformationalAmount read Get_InformationalAmount;
    property MonetaryAdjustmentReferenceLine: LongWord read Get_MonetaryAdjustmentReferenceLine write Set_MonetaryAdjustmentReferenceLine;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property GeneralLedgerAccount: IXMLGeneralLedgerAccount read Get_GeneralLedgerAccount;
    property MonetaryAdjustmentAmount: IXMLMonetaryAdjustmentAmount read Get_MonetaryAdjustmentAmount;
    property AdjustmentTypeReason: WideString read Get_AdjustmentTypeReason write Set_AdjustmentTypeReason;
  end;

{ IXMLMonetaryAdjustmentList }

  IXMLMonetaryAdjustmentList = interface(IXMLNodeCollection)
    ['{BFD3934A-5864-44C7-BC88-B5CED3E93AFE}']
    { Methods & Properties }
    function Add: IXMLMonetaryAdjustment;
    function Insert(const Index: Integer): IXMLMonetaryAdjustment;
    function Get_Item(Index: Integer): IXMLMonetaryAdjustment;
    property Items[Index: Integer]: IXMLMonetaryAdjustment read Get_Item; default;
  end;

{ IXMLMonetaryAdjustmentStartAmount }

  IXMLMonetaryAdjustmentStartAmount = interface(IXMLNode)
    ['{F6EDB791-6AC5-41AE-B249-B3808CB97346}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLPriceAdjustment }

  IXMLPriceAdjustment = interface(IXMLNode)
    ['{03997778-B572-40CB-B91A-81F236918B4B}']
    { Property Accessors }
    function Get_AdjustmentPercentage: IXMLMeasurement;
    function Get_AdjustmentValue: IXMLPricePerUnit;
    { Methods & Properties }
    property AdjustmentPercentage: IXMLMeasurement read Get_AdjustmentPercentage;
    property AdjustmentValue: IXMLPricePerUnit read Get_AdjustmentValue;
  end;

{ IXMLFlatAmountAdjustment }

  IXMLFlatAmountAdjustment = interface(IXMLNode)
    ['{1D6B66E8-F82F-4DE1-B3C5-4A1EF3F13475}']
    { Property Accessors }
    function Get_AdjustmentPercentage: IXMLMeasurement;
    function Get_AdjustmentFixedAmount: IXMLAdjustmentFixedAmount;
    { Methods & Properties }
    property AdjustmentPercentage: IXMLMeasurement read Get_AdjustmentPercentage;
    property AdjustmentFixedAmount: IXMLAdjustmentFixedAmount read Get_AdjustmentFixedAmount;
  end;

{ IXMLAdjustmentFixedAmount }

  IXMLAdjustmentFixedAmount = interface(IXMLNode)
    ['{1C342313-5046-47FE-B340-1AD48E08F764}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLTaxAdjustment }

  IXMLTaxAdjustment = interface(IXMLNode)
    ['{8CC9460E-D0F9-4A9F-BA5E-3D11FAA72F5C}']
    { Property Accessors }
    function Get_TaxCategoryType: WideString;
    function Get_TaxType: WideString;
    function Get_TaxPercent: WideString;
    function Get_TaxAmount: IXMLTaxAmount;
    function Get_TaxLocation: WideString;
    function Get_InformationalAmount: IXMLInformationalAmountList;
    procedure Set_TaxCategoryType(Value: WideString);
    procedure Set_TaxType(Value: WideString);
    procedure Set_TaxPercent(Value: WideString);
    procedure Set_TaxLocation(Value: WideString);
    { Methods & Properties }
    property TaxCategoryType: WideString read Get_TaxCategoryType write Set_TaxCategoryType;
    property TaxType: WideString read Get_TaxType write Set_TaxType;
    property TaxPercent: WideString read Get_TaxPercent write Set_TaxPercent;
    property TaxAmount: IXMLTaxAmount read Get_TaxAmount;
    property TaxLocation: WideString read Get_TaxLocation write Set_TaxLocation;
    property InformationalAmount: IXMLInformationalAmountList read Get_InformationalAmount;
  end;

{ IXMLTaxAmount }

  IXMLTaxAmount = interface(IXMLNode)
    ['{AC4A35F2-55FD-4A9F-B73A-312E5682E9EC}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLInformationalAmount }

  IXMLInformationalAmount = interface(IXMLNode)
    ['{F1419D15-E6B1-4BC4-900C-6CAC03A84D2B}']
    { Property Accessors }
    function Get_AmountType: WideString;
    function Get_CurrencyValue: IXMLCurrencyValue;
    function Get_ExchangeRate: IXMLExchangeRate;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_AmountType(Value: WideString);
    { Methods & Properties }
    property AmountType: WideString read Get_AmountType write Set_AmountType;
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
    property ExchangeRate: IXMLExchangeRate read Get_ExchangeRate;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLInformationalAmountList }

  IXMLInformationalAmountList = interface(IXMLNodeCollection)
    ['{A96D5550-DE9B-4B57-A618-E79986C08B60}']
    { Methods & Properties }
    function Add: IXMLInformationalAmount;
    function Insert(const Index: Integer): IXMLInformationalAmount;
    function Get_Item(Index: Integer): IXMLInformationalAmount;
    property Items[Index: Integer]: IXMLInformationalAmount read Get_Item; default;
  end;

{ IXMLGeneralLedgerAccount }

  IXMLGeneralLedgerAccount = interface(IXMLNode)
    ['{D8F5B735-86C2-4D63-8932-6CC60DBF0769}']
    { Property Accessors }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
  end;

{ IXMLMonetaryAdjustmentAmount }

  IXMLMonetaryAdjustmentAmount = interface(IXMLNode)
    ['{2F1AF86A-20C5-432B-8867-29C8AE282C5B}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLDeliveryLeg }

  IXMLDeliveryLeg = interface(IXMLNode)
    ['{03AC2F1F-C4C2-4A82-90C5-39245861566E}']
    { Property Accessors }
    function Get_DeliveryModeType: WideString;
    function Get_DeliveryLegType: WideString;
    function Get_DeliveryLegSequenceNumber: LongWord;
    function Get_DeliveryOrigin: IXMLDeliveryOrigin;
    function Get_CarrierParty: IXMLParty;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_TransportModeCharacteristics: IXMLTransportModeCharacteristics;
    function Get_TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics;
    function Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
    function Get_TransportLoadingCharacteristics: IXMLTransportLoadingCharacteristics;
    function Get_TransportUnloadingCharacteristics: IXMLTransportUnloadingCharacteristics;
    function Get_TransportOtherInstructions: IXMLTransportOtherInstructionsList;
    function Get_DeliveryTransitTime: IXMLDeliveryTransitTime;
    function Get_DeliveryDestination: IXMLDeliveryDestination;
    function Get_DeliveryDateWindow: IXMLDeliveryDateWindowList;
    function Get_DeliveryLegReference: IXMLDeliveryLegReferenceList;
    function Get_TermsOfChartering: IXMLTermsOfCharteringList;
    procedure Set_DeliveryModeType(Value: WideString);
    procedure Set_DeliveryLegType(Value: WideString);
    procedure Set_DeliveryLegSequenceNumber(Value: LongWord);
    { Methods & Properties }
    property DeliveryModeType: WideString read Get_DeliveryModeType write Set_DeliveryModeType;
    property DeliveryLegType: WideString read Get_DeliveryLegType write Set_DeliveryLegType;
    property DeliveryLegSequenceNumber: LongWord read Get_DeliveryLegSequenceNumber write Set_DeliveryLegSequenceNumber;
    property DeliveryOrigin: IXMLDeliveryOrigin read Get_DeliveryOrigin;
    property CarrierParty: IXMLParty read Get_CarrierParty;
    property OtherParty: IXMLTypedPartyList read Get_OtherParty;
    property TransportModeCharacteristics: IXMLTransportModeCharacteristics read Get_TransportModeCharacteristics;
    property TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics read Get_TransportVehicleCharacteristics;
    property TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList read Get_TransportUnitCharacteristics;
    property TransportLoadingCharacteristics: IXMLTransportLoadingCharacteristics read Get_TransportLoadingCharacteristics;
    property TransportUnloadingCharacteristics: IXMLTransportUnloadingCharacteristics read Get_TransportUnloadingCharacteristics;
    property TransportOtherInstructions: IXMLTransportOtherInstructionsList read Get_TransportOtherInstructions;
    property DeliveryTransitTime: IXMLDeliveryTransitTime read Get_DeliveryTransitTime;
    property DeliveryDestination: IXMLDeliveryDestination read Get_DeliveryDestination;
    property DeliveryDateWindow: IXMLDeliveryDateWindowList read Get_DeliveryDateWindow;
    property DeliveryLegReference: IXMLDeliveryLegReferenceList read Get_DeliveryLegReference;
    property TermsOfChartering: IXMLTermsOfCharteringList read Get_TermsOfChartering;
  end;

{ IXMLDeliveryLegList }

  IXMLDeliveryLegList = interface(IXMLNodeCollection)
    ['{FBE8F875-8577-4F22-9E1C-8C0459A41EDD}']
    { Methods & Properties }
    function Add: IXMLDeliveryLeg;
    function Insert(const Index: Integer): IXMLDeliveryLeg;
    function Get_Item(Index: Integer): IXMLDeliveryLeg;
    property Items[Index: Integer]: IXMLDeliveryLeg read Get_Item; default;
  end;

{ IXMLDeliveryOrigin }

  IXMLDeliveryOrigin = interface(IXMLNode)
    ['{8E08F922-E3FF-4DC7-AEFF-FA561CB09C23}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    function Get_LocationParty: IXMLLocationParty;
    function Get_LocationCode: IXMLLocationCode;
    function Get_GPSCoordinates: IXMLGPSCoordinates;
    procedure Set_Time(Value: WideString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
    property LocationParty: IXMLLocationParty read Get_LocationParty;
    property LocationCode: IXMLLocationCode read Get_LocationCode;
    property GPSCoordinates: IXMLGPSCoordinates read Get_GPSCoordinates;
  end;

{ IXMLLocationParty }

  IXMLLocationParty = interface(IXMLTypedParty)
    ['{4CC64E48-21B7-414C-A2E1-614DE6AD6C75}']
    { Property Accessors }
    function Get_LocationType: WideString;
    procedure Set_LocationType(Value: WideString);
    { Methods & Properties }
    property LocationType: WideString read Get_LocationType write Set_LocationType;
  end;

{ IXMLTransportModeCharacteristics }

  IXMLTransportModeCharacteristics = interface(IXMLNode)
    ['{2E031BD4-1C74-460A-83CB-BC1D8CB06A68}']
    { Property Accessors }
    function Get_TransportModeType: WideString;
    function Get_TransportModeCode: IXMLTransportModeCode;
    function Get_TransportModeText: WideString;
    procedure Set_TransportModeType(Value: WideString);
    procedure Set_TransportModeText(Value: WideString);
    { Methods & Properties }
    property TransportModeType: WideString read Get_TransportModeType write Set_TransportModeType;
    property TransportModeCode: IXMLTransportModeCode read Get_TransportModeCode;
    property TransportModeText: WideString read Get_TransportModeText write Set_TransportModeText;
  end;

{ IXMLTransportModeCode }

  IXMLTransportModeCode = interface(IXMLNode)
    ['{F80025D3-06D7-4857-BBE3-A1B0E349E941}']
    { Property Accessors }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
  end;

{ IXMLTransportVehicleCharacteristics }

  IXMLTransportVehicleCharacteristics = interface(IXMLNode)
    ['{4CC34C89-F504-4E4E-A923-5A170E799FB9}']
    { Property Accessors }
    function Get_TransportVehicleType: WideString;
    function Get_TransportVehicleCode: IXMLTransportVehicleCode;
    function Get_TransportVehicleMeasurements: IXMLTransportVehicleMeasurements;
    function Get_TransportVehicleCount: LongWord;
    function Get_TransportVehicleIdentifier: IXMLTransportVehicleIdentifierList;
    function Get_TransportVehicleText: WideString;
    procedure Set_TransportVehicleType(Value: WideString);
    procedure Set_TransportVehicleCount(Value: LongWord);
    procedure Set_TransportVehicleText(Value: WideString);
    { Methods & Properties }
    property TransportVehicleType: WideString read Get_TransportVehicleType write Set_TransportVehicleType;
    property TransportVehicleCode: IXMLTransportVehicleCode read Get_TransportVehicleCode;
    property TransportVehicleMeasurements: IXMLTransportVehicleMeasurements read Get_TransportVehicleMeasurements;
    property TransportVehicleCount: LongWord read Get_TransportVehicleCount write Set_TransportVehicleCount;
    property TransportVehicleIdentifier: IXMLTransportVehicleIdentifierList read Get_TransportVehicleIdentifier;
    property TransportVehicleText: WideString read Get_TransportVehicleText write Set_TransportVehicleText;
  end;

{ IXMLTransportVehicleCode }

  IXMLTransportVehicleCode = interface(IXMLNode)
    ['{D95ADB4C-E689-4692-ACCC-563E5A6BEE31}']
    { Property Accessors }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
  end;

{ IXMLTransportVehicleMeasurements }

  IXMLTransportVehicleMeasurements = interface(IXMLNode)
    ['{64E549AA-3398-44DE-8AE8-42C921026874}']
    { Property Accessors }
    function Get_TransportVehicleLength: IXMLMeasurement;
    function Get_TransportVehicleWidth: IXMLMeasurement;
    function Get_TransportVehicleHeight: IXMLMeasurement;
    function Get_TransportVehicleWeight: IXMLMeasurement;
    { Methods & Properties }
    property TransportVehicleLength: IXMLMeasurement read Get_TransportVehicleLength;
    property TransportVehicleWidth: IXMLMeasurement read Get_TransportVehicleWidth;
    property TransportVehicleHeight: IXMLMeasurement read Get_TransportVehicleHeight;
    property TransportVehicleWeight: IXMLMeasurement read Get_TransportVehicleWeight;
  end;

{ IXMLTransportVehicleIdentifier }

  IXMLTransportVehicleIdentifier = interface(IXMLNode)
    ['{E8D81C22-6BD5-4E39-B800-F86EA23AD1BC}']
    { Property Accessors }
    function Get_TransportVehicleIdentifierType: WideString;
    procedure Set_TransportVehicleIdentifierType(Value: WideString);
    { Methods & Properties }
    property TransportVehicleIdentifierType: WideString read Get_TransportVehicleIdentifierType write Set_TransportVehicleIdentifierType;
  end;

{ IXMLTransportVehicleIdentifierList }

  IXMLTransportVehicleIdentifierList = interface(IXMLNodeCollection)
    ['{F06378B4-D632-4A2D-8F73-985E36399776}']
    { Methods & Properties }
    function Add: IXMLTransportVehicleIdentifier;
    function Insert(const Index: Integer): IXMLTransportVehicleIdentifier;
    function Get_Item(Index: Integer): IXMLTransportVehicleIdentifier;
    property Items[Index: Integer]: IXMLTransportVehicleIdentifier read Get_Item; default;
  end;

{ IXMLTransportUnitCharacteristics }

  IXMLTransportUnitCharacteristics = interface(IXMLNode)
    ['{DF52AB76-605E-4D2B-BF75-125D45B14DC5}']
    { Property Accessors }
    function Get_TransportUnitType: WideString;
    function Get_TransportUnitVariable: WideString;
    function Get_TransportUnitLevel: LongWord;
    function Get_TransportUnitCode: IXMLTransportUnitCode;
    function Get_TransportUnitMeasurements: IXMLTransportUnitMeasurementsList;
    function Get_TransportUnitCount: LongWord;
    function Get_TransportUnitIdentifier: IXMLTransportUnitIdentifierList;
    function Get_TransportUnitText: WideString;
    function Get_TransportUnitDetail: IXMLTransportUnitDetail;
    procedure Set_TransportUnitType(Value: WideString);
    procedure Set_TransportUnitVariable(Value: WideString);
    procedure Set_TransportUnitLevel(Value: LongWord);
    procedure Set_TransportUnitCount(Value: LongWord);
    procedure Set_TransportUnitText(Value: WideString);
    { Methods & Properties }
    property TransportUnitType: WideString read Get_TransportUnitType write Set_TransportUnitType;
    property TransportUnitVariable: WideString read Get_TransportUnitVariable write Set_TransportUnitVariable;
    property TransportUnitLevel: LongWord read Get_TransportUnitLevel write Set_TransportUnitLevel;
    property TransportUnitCode: IXMLTransportUnitCode read Get_TransportUnitCode;
    property TransportUnitMeasurements: IXMLTransportUnitMeasurementsList read Get_TransportUnitMeasurements;
    property TransportUnitCount: LongWord read Get_TransportUnitCount write Set_TransportUnitCount;
    property TransportUnitIdentifier: IXMLTransportUnitIdentifierList read Get_TransportUnitIdentifier;
    property TransportUnitText: WideString read Get_TransportUnitText write Set_TransportUnitText;
    property TransportUnitDetail: IXMLTransportUnitDetail read Get_TransportUnitDetail;
  end;

{ IXMLTransportUnitCharacteristicsList }

  IXMLTransportUnitCharacteristicsList = interface(IXMLNodeCollection)
    ['{07F637D3-F344-42AD-8AB0-7051748851C2}']
    { Methods & Properties }
    function Add: IXMLTransportUnitCharacteristics;
    function Insert(const Index: Integer): IXMLTransportUnitCharacteristics;
    function Get_Item(Index: Integer): IXMLTransportUnitCharacteristics;
    property Items[Index: Integer]: IXMLTransportUnitCharacteristics read Get_Item; default;
  end;

{ IXMLTransportUnitCode }

  IXMLTransportUnitCode = interface(IXMLNode)
    ['{0090C607-6464-4BC5-9B63-464DCA2B3EFA}']
    { Property Accessors }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
  end;

{ IXMLTransportUnitMeasurements }

  IXMLTransportUnitMeasurements = interface(IXMLNode)
    ['{BBC1A54D-2655-4D92-9316-FB415A5DDCAC}']
    { Property Accessors }
    function Get_AppliesTo: WideString;
    function Get_TransportUnitLength: IXMLMeasurement;
    function Get_TransportUnitWidth: IXMLMeasurement;
    function Get_TransportUnitHeight: IXMLMeasurement;
    function Get_TransportUnitWeight: IXMLMeasurement;
    procedure Set_AppliesTo(Value: WideString);
    { Methods & Properties }
    property AppliesTo: WideString read Get_AppliesTo write Set_AppliesTo;
    property TransportUnitLength: IXMLMeasurement read Get_TransportUnitLength;
    property TransportUnitWidth: IXMLMeasurement read Get_TransportUnitWidth;
    property TransportUnitHeight: IXMLMeasurement read Get_TransportUnitHeight;
    property TransportUnitWeight: IXMLMeasurement read Get_TransportUnitWeight;
  end;

{ IXMLTransportUnitMeasurementsList }

  IXMLTransportUnitMeasurementsList = interface(IXMLNodeCollection)
    ['{502E60D4-97B0-4346-9888-3E016CEBAF86}']
    { Methods & Properties }
    function Add: IXMLTransportUnitMeasurements;
    function Insert(const Index: Integer): IXMLTransportUnitMeasurements;
    function Get_Item(Index: Integer): IXMLTransportUnitMeasurements;
    property Items[Index: Integer]: IXMLTransportUnitMeasurements read Get_Item; default;
  end;

{ IXMLTransportUnitIdentifier }

  IXMLTransportUnitIdentifier = interface(IXMLNode)
    ['{7761805D-A941-416F-8DF1-70AC939075CA}']
    { Property Accessors }
    function Get_TransportUnitIdentifierType: WideString;
    procedure Set_TransportUnitIdentifierType(Value: WideString);
    { Methods & Properties }
    property TransportUnitIdentifierType: WideString read Get_TransportUnitIdentifierType write Set_TransportUnitIdentifierType;
  end;

{ IXMLTransportUnitIdentifierList }

  IXMLTransportUnitIdentifierList = interface(IXMLNodeCollection)
    ['{FB0D217B-2C37-4886-986C-AF07CEC1AD56}']
    { Methods & Properties }
    function Add: IXMLTransportUnitIdentifier;
    function Insert(const Index: Integer): IXMLTransportUnitIdentifier;
    function Get_Item(Index: Integer): IXMLTransportUnitIdentifier;
    property Items[Index: Integer]: IXMLTransportUnitIdentifier read Get_Item; default;
  end;

{ IXMLTransportUnitDetail }

  IXMLTransportUnitDetail = interface(IXMLNode)
    ['{BBDF5AD9-57E4-4854-A509-A00E2EE35E57}']
    { Property Accessors }
    function Get_TransportUnitDetailType: WideString;
    function Get_LoadOpeningSide: WideString;
    function Get_TransportUnitDetailCode: IXMLTransportUnitDetailCode;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_TransportUnitDetailType(Value: WideString);
    procedure Set_LoadOpeningSide(Value: WideString);
    { Methods & Properties }
    property TransportUnitDetailType: WideString read Get_TransportUnitDetailType write Set_TransportUnitDetailType;
    property LoadOpeningSide: WideString read Get_LoadOpeningSide write Set_LoadOpeningSide;
    property TransportUnitDetailCode: IXMLTransportUnitDetailCode read Get_TransportUnitDetailCode;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLTransportUnitDetailCode }

  IXMLTransportUnitDetailCode = interface(IXMLNode)
    ['{6511CF48-3B12-4562-8C61-64077738AF7B}']
    { Property Accessors }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
  end;

{ IXMLTransportLoadingCharacteristics }

  IXMLTransportLoadingCharacteristics = interface(IXMLNode)
    ['{908A7051-0B8B-45F3-BF8B-B7BCC8DF66BD}']
    { Property Accessors }
    function Get_MixProductIndicator: WideString;
    function Get_TransportLoadingType: WideString;
    function Get_TransportDeckOption: WideString;
    function Get_LoadingTolerance: WideString;
    function Get_DirectLoading: WideString;
    function Get_GoodsLoadingPrinciple: WideString;
    function Get_LabelOrientation: WideString;
    function Get_TransportLoadingCode: IXMLTransportLoadingCode;
    function Get_TransportLoadingCodeDescription: IXMLTransportLoadingCodeDescription;
    function Get_TransportLoadingText: IXMLS255List;
    procedure Set_MixProductIndicator(Value: WideString);
    procedure Set_TransportLoadingType(Value: WideString);
    procedure Set_TransportDeckOption(Value: WideString);
    procedure Set_LoadingTolerance(Value: WideString);
    procedure Set_DirectLoading(Value: WideString);
    procedure Set_GoodsLoadingPrinciple(Value: WideString);
    procedure Set_LabelOrientation(Value: WideString);
    { Methods & Properties }
    property MixProductIndicator: WideString read Get_MixProductIndicator write Set_MixProductIndicator;
    property TransportLoadingType: WideString read Get_TransportLoadingType write Set_TransportLoadingType;
    property TransportDeckOption: WideString read Get_TransportDeckOption write Set_TransportDeckOption;
    property LoadingTolerance: WideString read Get_LoadingTolerance write Set_LoadingTolerance;
    property DirectLoading: WideString read Get_DirectLoading write Set_DirectLoading;
    property GoodsLoadingPrinciple: WideString read Get_GoodsLoadingPrinciple write Set_GoodsLoadingPrinciple;
    property LabelOrientation: WideString read Get_LabelOrientation write Set_LabelOrientation;
    property TransportLoadingCode: IXMLTransportLoadingCode read Get_TransportLoadingCode;
    property TransportLoadingCodeDescription: IXMLTransportLoadingCodeDescription read Get_TransportLoadingCodeDescription;
    property TransportLoadingText: IXMLS255List read Get_TransportLoadingText;
  end;

{ IXMLTransportLoadingCharacteristicsList }

  IXMLTransportLoadingCharacteristicsList = interface(IXMLNodeCollection)
    ['{7AE7E420-D0B4-4771-9E24-56CE20732268}']
    { Methods & Properties }
    function Add: IXMLTransportLoadingCharacteristics;
    function Insert(const Index: Integer): IXMLTransportLoadingCharacteristics;
    function Get_Item(Index: Integer): IXMLTransportLoadingCharacteristics;
    property Items[Index: Integer]: IXMLTransportLoadingCharacteristics read Get_Item; default;
  end;

{ IXMLTransportLoadingCode }

  IXMLTransportLoadingCode = interface(IXMLNode)
    ['{C5C4FC99-10F2-4E50-B366-20D0DFA3D41F}']
    { Property Accessors }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
  end;

{ IXMLTransportLoadingCodeDescription }

  IXMLTransportLoadingCodeDescription = interface(IXMLNode)
    ['{9B824BDA-DB5F-4D59-8D87-5D6DC974806F}']
    { Property Accessors }
    function Get_AdditionalText: IXMLS255List;
    function Get_EAttachment: IXMLEAttachment;
    { Methods & Properties }
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property EAttachment: IXMLEAttachment read Get_EAttachment;
  end;

{ IXMLEAttachment }

  IXMLEAttachment = interface(IXMLNode)
    ['{460039E1-8F58-43BD-9FBD-FDE3312C05F2}']
    { Property Accessors }
    function Get_AttachmentFileName: IXMLS60List;
    function Get_NumberOfAttachments: LongWord;
    function Get_URL: IXMLAnyURIList;
    procedure Set_NumberOfAttachments(Value: LongWord);
    { Methods & Properties }
    property AttachmentFileName: IXMLS60List read Get_AttachmentFileName;
    property NumberOfAttachments: LongWord read Get_NumberOfAttachments write Set_NumberOfAttachments;
    property URL: IXMLAnyURIList read Get_URL;
  end;

{ IXMLTransportUnloadingCharacteristics }

  IXMLTransportUnloadingCharacteristics = interface(IXMLNode)
    ['{B1EF39B9-66F0-43AC-876F-F394188A6D3A}']
    { Property Accessors }
    function Get_TransportUnloadingType: WideString;
    function Get_DirectUnloading: WideString;
    function Get_TransportUnloadingCode: IXMLTransportUnloadingCode;
    function Get_TransportUnloadingCodeDescription: IXMLTransportUnloadingCodeDescription;
    function Get_TransportUnloadingText: IXMLS255List;
    procedure Set_TransportUnloadingType(Value: WideString);
    procedure Set_DirectUnloading(Value: WideString);
    { Methods & Properties }
    property TransportUnloadingType: WideString read Get_TransportUnloadingType write Set_TransportUnloadingType;
    property DirectUnloading: WideString read Get_DirectUnloading write Set_DirectUnloading;
    property TransportUnloadingCode: IXMLTransportUnloadingCode read Get_TransportUnloadingCode;
    property TransportUnloadingCodeDescription: IXMLTransportUnloadingCodeDescription read Get_TransportUnloadingCodeDescription;
    property TransportUnloadingText: IXMLS255List read Get_TransportUnloadingText;
  end;

{ IXMLTransportUnloadingCode }

  IXMLTransportUnloadingCode = interface(IXMLNode)
    ['{CB128880-C0A8-43F2-8417-B739453943AA}']
    { Property Accessors }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
  end;

{ IXMLTransportUnloadingCodeDescription }

  IXMLTransportUnloadingCodeDescription = interface(IXMLNode)
    ['{148A4726-5E86-40EF-A901-BDD320BDAD38}']
    { Property Accessors }
    function Get_AdditionalText: IXMLS255List;
    function Get_EAttachment: IXMLEAttachment;
    { Methods & Properties }
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property EAttachment: IXMLEAttachment read Get_EAttachment;
  end;

{ IXMLTransportOtherInstructions }

  IXMLTransportOtherInstructions = interface(IXMLNode)
    ['{A17862E9-A312-4446-A31D-96634742529C}']
    { Property Accessors }
    function Get_TransportInstructionType: WideString;
    function Get_TransportInstructionCode: IXMLTransportInstructionCode;
    function Get_TransportInstructionText: IXMLS255List;
    procedure Set_TransportInstructionType(Value: WideString);
    { Methods & Properties }
    property TransportInstructionType: WideString read Get_TransportInstructionType write Set_TransportInstructionType;
    property TransportInstructionCode: IXMLTransportInstructionCode read Get_TransportInstructionCode;
    property TransportInstructionText: IXMLS255List read Get_TransportInstructionText;
  end;

{ IXMLTransportOtherInstructionsList }

  IXMLTransportOtherInstructionsList = interface(IXMLNodeCollection)
    ['{6967173B-8DBA-47CB-9CFE-87F2A662127C}']
    { Methods & Properties }
    function Add: IXMLTransportOtherInstructions;
    function Insert(const Index: Integer): IXMLTransportOtherInstructions;
    function Get_Item(Index: Integer): IXMLTransportOtherInstructions;
    property Items[Index: Integer]: IXMLTransportOtherInstructions read Get_Item; default;
  end;

{ IXMLTransportInstructionCode }

  IXMLTransportInstructionCode = interface(IXMLNode)
    ['{1E0E4C39-25B4-487C-B179-810C7D18E001}']
    { Property Accessors }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
  end;

{ IXMLDeliveryTransitTime }

  IXMLDeliveryTransitTime = interface(IXMLNode)
    ['{5D89B9BD-D2BB-4E35-BA1B-2252DDF18343}']
    { Property Accessors }
    function Get_Days: LongWord;
    function Get_Hours: LongWord;
    function Get_Minutes: LongWord;
    procedure Set_Days(Value: LongWord);
    procedure Set_Hours(Value: LongWord);
    procedure Set_Minutes(Value: LongWord);
    { Methods & Properties }
    property Days: LongWord read Get_Days write Set_Days;
    property Hours: LongWord read Get_Hours write Set_Hours;
    property Minutes: LongWord read Get_Minutes write Set_Minutes;
  end;

{ IXMLDeliveryDestination }

  IXMLDeliveryDestination = interface(IXMLNode)
    ['{7CBE9E2D-E511-4119-9216-1E2B2AC675BC}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    function Get_LocationParty: IXMLLocationParty;
    function Get_LocationCode: IXMLLocationCode;
    function Get_GPSCoordinates: IXMLGPSCoordinates;
    procedure Set_Time(Value: WideString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
    property LocationParty: IXMLLocationParty read Get_LocationParty;
    property LocationCode: IXMLLocationCode read Get_LocationCode;
    property GPSCoordinates: IXMLGPSCoordinates read Get_GPSCoordinates;
  end;

{ IXMLDeliveryLegReference }

  IXMLDeliveryLegReference = interface(IXMLNode)
    ['{3CCDB6C3-4538-4375-94E6-80D1BD4AB06D}']
    { Property Accessors }
    function Get_DeliveryLegReferenceType: WideString;
    function Get_AssignedBy: WideString;
    procedure Set_DeliveryLegReferenceType(Value: WideString);
    procedure Set_AssignedBy(Value: WideString);
    { Methods & Properties }
    property DeliveryLegReferenceType: WideString read Get_DeliveryLegReferenceType write Set_DeliveryLegReferenceType;
    property AssignedBy: WideString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLDeliveryLegReferenceList }

  IXMLDeliveryLegReferenceList = interface(IXMLNodeCollection)
    ['{DA937BB8-9392-423C-8937-B115839B0AA7}']
    { Methods & Properties }
    function Add: IXMLDeliveryLegReference;
    function Insert(const Index: Integer): IXMLDeliveryLegReference;
    function Get_Item(Index: Integer): IXMLDeliveryLegReference;
    property Items[Index: Integer]: IXMLDeliveryLegReference read Get_Item; default;
  end;

{ IXMLTermsOfChartering }

  IXMLTermsOfChartering = interface(IXMLNode)
    ['{7F659C33-0BE6-47C9-AAA8-D0A48790D6DE}']
    { Property Accessors }
    function Get_TermsOfCharteringType: WideString;
    procedure Set_TermsOfCharteringType(Value: WideString);
    { Methods & Properties }
    property TermsOfCharteringType: WideString read Get_TermsOfCharteringType write Set_TermsOfCharteringType;
  end;

{ IXMLTermsOfCharteringList }

  IXMLTermsOfCharteringList = interface(IXMLNodeCollection)
    ['{05F1AFAC-45B9-4BB7-B361-A0BDB8C873EE}']
    { Methods & Properties }
    function Add: IXMLTermsOfChartering;
    function Insert(const Index: Integer): IXMLTermsOfChartering;
    function Get_Item(Index: Integer): IXMLTermsOfChartering;
    property Items[Index: Integer]: IXMLTermsOfChartering read Get_Item; default;
  end;

{ IXMLDeliveryScheduleReference }

  IXMLDeliveryScheduleReference = interface(IXMLNode)
    ['{7E5AE19D-27E8-4937-A3F7-11542B6725FA}']
    { Property Accessors }
    function Get_DeliveryScheduleReferenceType: WideString;
    function Get_AssignedBy: WideString;
    procedure Set_DeliveryScheduleReferenceType(Value: WideString);
    procedure Set_AssignedBy(Value: WideString);
    { Methods & Properties }
    property DeliveryScheduleReferenceType: WideString read Get_DeliveryScheduleReferenceType write Set_DeliveryScheduleReferenceType;
    property AssignedBy: WideString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLDeliveryScheduleReferenceList }

  IXMLDeliveryScheduleReferenceList = interface(IXMLNodeCollection)
    ['{C1D94251-99FC-4DD9-9946-65254C2AB939}']
    { Methods & Properties }
    function Add: IXMLDeliveryScheduleReference;
    function Insert(const Index: Integer): IXMLDeliveryScheduleReference;
    function Get_Item(Index: Integer): IXMLDeliveryScheduleReference;
    property Items[Index: Integer]: IXMLDeliveryScheduleReference read Get_Item; default;
  end;

{ IXMLCountryOfOrigin }

  IXMLCountryOfOrigin = interface(IXMLNode)
    ['{905E0408-70FD-4222-BC98-B7DD360524B0}']
    { Property Accessors }
    function Get_Country: IXMLCountry;
    { Methods & Properties }
    property Country: IXMLCountry read Get_Country;
  end;


{ IXMLCountryOfDestination }

  IXMLCountryOfDestination = interface(IXMLNode)
    ['{065DF7C1-AE1E-4190-A32E-74BF3D511030}']
    { Property Accessors }
    function Get_Country: IXMLCountry;
    { Methods & Properties }
    property Country: IXMLCountry read Get_Country;
  end;

{ IXMLCountryOfConsumption }

  IXMLCountryOfConsumption = interface(IXMLNode)
    ['{8FB3B9E4-CC93-4DD2-9A8F-734DF72E08E0}']
    { Property Accessors }
    function Get_Country: IXMLCountry;
    { Methods & Properties }
    property Country: IXMLCountry read Get_Country;
  end;

{ IXMLInsurance }

  IXMLInsurance = interface(IXMLNode)
    ['{B705385A-3042-4499-ADAD-E3349E05D313}']
    { Property Accessors }
    function Get_Insurer: WideString;
    function Get_InsuranceContractNo: WideString;
    function Get_InsuredValue: IXMLInsuredValue;
    function Get_InsuranceInfo: WideString;
    procedure Set_Insurer(Value: WideString);
    procedure Set_InsuranceContractNo(Value: WideString);
    procedure Set_InsuranceInfo(Value: WideString);
    { Methods & Properties }
    property Insurer: WideString read Get_Insurer write Set_Insurer;
    property InsuranceContractNo: WideString read Get_InsuranceContractNo write Set_InsuranceContractNo;
    property InsuredValue: IXMLInsuredValue read Get_InsuredValue;
    property InsuranceInfo: WideString read Get_InsuranceInfo write Set_InsuranceInfo;
  end;

{ IXMLInsuredValue }

  IXMLInsuredValue = interface(IXMLNode)
    ['{D3B925F7-B63D-45AC-A0C4-E317DE0E19C5}']
    { Property Accessors }
    function Get_CurrencyValue: IXMLCurrencyValue;
    { Methods & Properties }
    property CurrencyValue: IXMLCurrencyValue read Get_CurrencyValue;
  end;

{ IXMLDocumentInformation }

  IXMLDocumentInformation = interface(IXMLNode)
    ['{BF8B6877-EF2F-4BFA-8AE5-359339D33C69}']
    { Property Accessors }
    function Get_DocumentType: WideString;
    function Get_NumberOfDocuments: IXMLNumberOfDocumentsList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_DocumentType(Value: WideString);
    { Methods & Properties }
    property DocumentType: WideString read Get_DocumentType write Set_DocumentType;
    property NumberOfDocuments: IXMLNumberOfDocumentsList read Get_NumberOfDocuments;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLDocumentInformationList }

  IXMLDocumentInformationList = interface(IXMLNodeCollection)
    ['{3BAF7142-3F75-46E7-BB0B-46F32C738DEB}']
    { Methods & Properties }
    function Add: IXMLDocumentInformation;
    function Insert(const Index: Integer): IXMLDocumentInformation;
    function Get_Item(Index: Integer): IXMLDocumentInformation;
    property Items[Index: Integer]: IXMLDocumentInformation read Get_Item; default;
  end;

{ IXMLNumberOfDocuments }

  IXMLNumberOfDocuments = interface(IXMLNode)
    ['{8F62CE19-2FE4-4966-9B64-789E745273F4}']
    { Property Accessors }
    function Get_Original: WideString;
    procedure Set_Original(Value: WideString);
    { Methods & Properties }
    property Original: WideString read Get_Original write Set_Original;
  end;

{ IXMLNumberOfDocumentsList }

  IXMLNumberOfDocumentsList = interface(IXMLNodeCollection)
    ['{813FEB1C-65FC-44D6-8E38-17977AA5F292}']
    { Methods & Properties }
    function Add: IXMLNumberOfDocuments;
    function Insert(const Index: Integer): IXMLNumberOfDocuments;
    function Get_Item(Index: Integer): IXMLNumberOfDocuments;
    property Items[Index: Integer]: IXMLNumberOfDocuments read Get_Item; default;
  end;

{ IXMLDeliveryMessageShipment }

  IXMLDeliveryMessageShipment = interface(IXMLNode)
    ['{2FF82E6B-FC76-4954-BB11-1A25DAA26ADA}']
    { Property Accessors }
   function Get_ShipmentID: IXMLShipmentID;
    function Get_DeliveryMessageProductGroup: IXMLDeliveryMessageProductGroupList;
    function Get_ShipmentSummary: IXMLShipmentSummary;
    { Methods & Properties }
    //Lars open this up mar 2 2013
   property ShipmentID: IXMLShipmentID read Get_ShipmentID;
    property DeliveryMessageProductGroup: IXMLDeliveryMessageProductGroupList read Get_DeliveryMessageProductGroup;
    property ShipmentSummary: IXMLShipmentSummary read Get_ShipmentSummary;
  end;

{ IXMLDeliveryMessageShipmentList }

  IXMLDeliveryMessageShipmentList = interface(IXMLNodeCollection)
    ['{D2EC5E4E-5EE0-4451-99C8-82D850707ABE}']
    { Methods & Properties }
    function Add: IXMLDeliveryMessageShipment;
    function Insert(const Index: Integer): IXMLDeliveryMessageShipment;
    function Get_Item(Index: Integer): IXMLDeliveryMessageShipment;
    property Items[Index: Integer]: IXMLDeliveryMessageShipment read Get_Item; default;
  end;

{ IXMLShipmentID }

  IXMLShipmentID = interface(IXMLNode)
    ['{D9CBD78C-E463-4E44-A04A-9539D16EC026}']
    { Property Accessors }
    function Get_ShipmentIDType: WideString;
    procedure Set_ShipmentIDType(Value: WideString);
    { Methods & Properties }
    property ShipmentIDType: WideString read Get_ShipmentIDType write Set_ShipmentIDType;
  end;



{ IXMLDeliveryMessageProductGroup }

  IXMLDeliveryMessageProductGroup = interface(IXMLNode)
    ['{DEFB4D61-34F5-40C9-812B-3A60778226B9}']
    { Property Accessors }
    function Get_ProductGroupID: IXMLProductGroupID;
    function Get_DeliveryShipmentLineItem: IXMLDeliveryShipmentLineItemList;
    function Get_ProductGroupSummary: IXMLProductGroupSummary;
    { Methods & Properties }
   property ProductGroupID: IXMLProductGroupID read Get_ProductGroupID;
    property DeliveryShipmentLineItem: IXMLDeliveryShipmentLineItemList read Get_DeliveryShipmentLineItem;
    property ProductGroupSummary: IXMLProductGroupSummary read Get_ProductGroupSummary;
  end;

{ IXMLDeliveryMessageProductGroupList }

  IXMLDeliveryMessageProductGroupList = interface(IXMLNodeCollection)
    ['{52E9DCF9-9C13-48C2-B045-D5B68CE3DDB9}']
    { Methods & Properties }
    function Add: IXMLDeliveryMessageProductGroup;
    function Insert(const Index: Integer): IXMLDeliveryMessageProductGroup;
    function Get_Item(Index: Integer): IXMLDeliveryMessageProductGroup;
    property Items[Index: Integer]: IXMLDeliveryMessageProductGroup read Get_Item; default;
  end;

{ IXMLProductGroupID }

  IXMLProductGroupID = interface(IXMLNode)
    ['{F4005F60-AAEE-4F92-B0A6-9370FC0AA550}']
    { Property Accessors }
    function Get_ProductGroupIDType: WideString;
    procedure Set_ProductGroupIDType(Value: WideString);
    { Methods & Properties }
    property ProductGroupIDType: WideString read Get_ProductGroupIDType write Set_ProductGroupIDType;
  end;


{ IXMLDeliveryShipmentLineItem }

  IXMLDeliveryShipmentLineItem = interface(IXMLNode)
    ['{A2E58E7E-70E8-4501-9131-7EEE84212139}']
    { Property Accessors }
    function Get_DeliveryShipmentLineItemNumber: LongWord;
    function Get_PurchaseOrderInformation: IXMLPurchaseOrderInformation;
    function Get_PurchaseOrderLineItemNumber: LongWord;
    function Get_DeliveryMessageReference: IXMLDeliveryMessageReferenceList;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    function Get_CountryOfOrigin: IXMLCountryOfOrigin;
    function Get_CountryOfDestination: IXMLCountryOfDestination;
    function Get_CountryOfConsumption: IXMLCountryOfConsumption;
    function Get_TotalNumberOfUnits: IXMLMeasurement;
    function Get_DeliveryDateWindow: IXMLDeliveryDateWindowList;
    function Get_MillProductionInformation: IXMLMillProductionInformation;
    function Get_QuantityOrderedInformation: IXMLQuantityOrderedInformation;
    function Get_TransportLoadingCharacteristics: IXMLTransportLoadingCharacteristicsList;
    function Get_TransportUnloadingCharacteristics: IXMLTransportUnloadingCharacteristics;
    function Get_TransportOtherInstructions: IXMLTransportOtherInstructionsList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    function Get_BillToParty: IXMLParty;
    function Get_Product: IXMLProductClass;
    function Get_PackageInformation: IXMLPackageInformationClassList;
    function Get_TransportPackageInformation: IXMLTransportPackageInformationList;
    function Get_ProductSummary: IXMLProductSummary;
    function Get_LengthSpecification: IXMLLengthSpecificationList;
    function Get_QuantityDeviation: IXMLMeasurementWithText;
    procedure Set_DeliveryShipmentLineItemNumber(Value: LongWord);
    procedure Set_PurchaseOrderLineItemNumber(Value: LongWord);
    { Methods & Properties }
    property DeliveryShipmentLineItemNumber: LongWord read Get_DeliveryShipmentLineItemNumber write Set_DeliveryShipmentLineItemNumber;
    property PurchaseOrderInformation: IXMLPurchaseOrderInformation read Get_PurchaseOrderInformation;
    property PurchaseOrderLineItemNumber: LongWord read Get_PurchaseOrderLineItemNumber write Set_PurchaseOrderLineItemNumber;
    property DeliveryMessageReference: IXMLDeliveryMessageReferenceList read Get_DeliveryMessageReference;
    property DocumentReferenceInformation: IXMLDocumentReferenceInformationList read Get_DocumentReferenceInformation;
    property CountryOfOrigin: IXMLCountryOfOrigin read Get_CountryOfOrigin;
    property CountryOfDestination: IXMLCountryOfDestination read Get_CountryOfDestination;
    property CountryOfConsumption: IXMLCountryOfConsumption read Get_CountryOfConsumption;
    property TotalNumberOfUnits: IXMLMeasurement read Get_TotalNumberOfUnits;
    property DeliveryDateWindow: IXMLDeliveryDateWindowList read Get_DeliveryDateWindow;
    property MillProductionInformation: IXMLMillProductionInformation read Get_MillProductionInformation;
    property QuantityOrderedInformation: IXMLQuantityOrderedInformation read Get_QuantityOrderedInformation;
    property TransportLoadingCharacteristics: IXMLTransportLoadingCharacteristicsList read Get_TransportLoadingCharacteristics;
    property TransportUnloadingCharacteristics: IXMLTransportUnloadingCharacteristics read Get_TransportUnloadingCharacteristics;
    property TransportOtherInstructions: IXMLTransportOtherInstructionsList read Get_TransportOtherInstructions;
    property SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList read Get_SafetyAndEnvironmentalInformation;
    property BillToParty: IXMLParty read Get_BillToParty;
    property Product: IXMLProductClass read Get_Product;
    property PackageInformation: IXMLPackageInformationClassList read Get_PackageInformation;
    property TransportPackageInformation: IXMLTransportPackageInformationList read Get_TransportPackageInformation;
    property ProductSummary: IXMLProductSummary read Get_ProductSummary;
    property LengthSpecification: IXMLLengthSpecificationList read Get_LengthSpecification;
    property QuantityDeviation: IXMLMeasurementWithText read Get_QuantityDeviation;
  end;

{ IXMLDeliveryShipmentLineItemList }

  IXMLDeliveryShipmentLineItemList = interface(IXMLNodeCollection)
    ['{A11AD708-B44E-4232-BC6E-6F1F510664AC}']
    { Methods & Properties }
    function Add: IXMLDeliveryShipmentLineItem;
    function Insert(const Index: Integer): IXMLDeliveryShipmentLineItem;
    function Get_Item(Index: Integer): IXMLDeliveryShipmentLineItem;
    property Items[Index: Integer]: IXMLDeliveryShipmentLineItem read Get_Item; default;
  end;

{ IXMLPurchaseOrderInformation }

  IXMLPurchaseOrderInformation = interface(IXMLNode)
    ['{FA83EFA0-020E-47A7-8C58-2F5CDF1776A0}']
    { Property Accessors }
    function Get_PurchaseOrderNumber: WideString;
    function Get_PurchaseOrderReleaseNumber: WideString;
    function Get_PurchaseOrderIssuedDate: IXMLDateTimeBasis;
    function Get_PurchaseOrderReference: IXMLPurchaseOrderReferenceList;
    procedure Set_PurchaseOrderNumber(Value: WideString);
    procedure Set_PurchaseOrderReleaseNumber(Value: WideString);
    { Methods & Properties }
    property PurchaseOrderNumber: WideString read Get_PurchaseOrderNumber write Set_PurchaseOrderNumber;
    property PurchaseOrderReleaseNumber: WideString read Get_PurchaseOrderReleaseNumber write Set_PurchaseOrderReleaseNumber;
    property PurchaseOrderIssuedDate: IXMLDateTimeBasis read Get_PurchaseOrderIssuedDate;
    property PurchaseOrderReference: IXMLPurchaseOrderReferenceList read Get_PurchaseOrderReference;
  end;

{ IXMLDateTimeBasis }

  IXMLDateTimeBasis = interface(IXMLNode)
    ['{B3A4C688-9AF5-4C59-9D9D-DF9D82775341}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
  end;

{ IXMLPurchaseOrderReference }

  IXMLPurchaseOrderReference = interface(IXMLNode)
    ['{4DFD33DD-7D60-4E21-A914-89BD887CC0B1}']
    { Property Accessors }
    function Get_PurchaseOrderReferenceType: WideString;
    function Get_AssignedBy: WideString;
    procedure Set_PurchaseOrderReferenceType(Value: WideString);
    procedure Set_AssignedBy(Value: WideString);
    { Methods & Properties }
    property PurchaseOrderReferenceType: WideString read Get_PurchaseOrderReferenceType write Set_PurchaseOrderReferenceType;
    property AssignedBy: WideString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLPurchaseOrderReferenceList }

  IXMLPurchaseOrderReferenceList = interface(IXMLNodeCollection)
    ['{4A407AB8-0C8E-445A-9D45-066414B95234}']
    { Methods & Properties }
    function Add: IXMLPurchaseOrderReference;
    function Insert(const Index: Integer): IXMLPurchaseOrderReference;
    function Get_Item(Index: Integer): IXMLPurchaseOrderReference;
    property Items[Index: Integer]: IXMLPurchaseOrderReference read Get_Item; default;
  end;

{ IXMLMillProductionInformation }

  IXMLMillProductionInformation = interface(IXMLNode)
    ['{ABEAB55C-F104-463F-8C58-48E5398C2725}']
    { Property Accessors }
    function Get_MillCharacteristics: IXMLMillCharacteristics;
    function Get_MillOrderNumber: WideString;
    function Get_Quantity: IXMLQuantity;
    procedure Set_MillOrderNumber(Value: WideString);
    { Methods & Properties }
    property MillCharacteristics: IXMLMillCharacteristics read Get_MillCharacteristics;
    property MillOrderNumber: WideString read Get_MillOrderNumber write Set_MillOrderNumber;
    property Quantity: IXMLQuantity read Get_Quantity;
  end;

{ IXMLMillCharacteristics }

  IXMLMillCharacteristics = interface(IXMLNode)
    ['{488728F0-AAA7-4F6E-BA36-071220649786}']
    { Property Accessors }
    function Get_MillParty: IXMLParty;
    function Get_MachineID: WideString;
    procedure Set_MachineID(Value: WideString);
    { Methods & Properties }
    property MillParty: IXMLParty read Get_MillParty;
    property MachineID: WideString read Get_MachineID write Set_MachineID;
  end;

{ IXMLQuantityOrderedInformation }

  IXMLQuantityOrderedInformation = interface(IXMLNode)
    ['{EBE78578-A49F-4A4C-A900-10B2BA2EAC90}']
    { Property Accessors }
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_AdditionalText: IXMLS255List;
    function Get_Length: IXMLMeasurementList;
    { Methods & Properties }
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property Length: IXMLMeasurementList read Get_Length;
  end;

{ IXMLSafetyAndEnvironmentalInformationClass }

  IXMLSafetyAndEnvironmentalInformationClass = interface(IXMLNode)
    ['{7BA17D07-99EE-4F3F-99AE-BFE13F4CF880}']
    { Property Accessors }
    function Get_SafetyAndEnvironmentalType: WideString;
    function Get_Agency: WideString;
    function Get_LicenceNumber: WideString;
    function Get_ChainOfCustody: IXMLChainOfCustody;
    function Get_SafetyAndEnvironmentalCertification: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_SafetyAndEnvironmentalType(Value: WideString);
    procedure Set_Agency(Value: WideString);
    procedure Set_LicenceNumber(Value: WideString);
    { Methods & Properties }
    property SafetyAndEnvironmentalType: WideString read Get_SafetyAndEnvironmentalType write Set_SafetyAndEnvironmentalType;
    property Agency: WideString read Get_Agency write Set_Agency;
    property LicenceNumber: WideString read Get_LicenceNumber write Set_LicenceNumber;
    property ChainOfCustody: IXMLChainOfCustody read Get_ChainOfCustody;
    property SafetyAndEnvironmentalCertification: IXMLMeasurement read Get_SafetyAndEnvironmentalCertification;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLSafetyAndEnvironmentalInformationClassList }

  IXMLSafetyAndEnvironmentalInformationClassList = interface(IXMLNodeCollection)
    ['{9487FAEB-2234-4B5E-8D47-93B9F82C4B61}']
    { Methods & Properties }
    function Add: IXMLSafetyAndEnvironmentalInformationClass;
    function Insert(const Index: Integer): IXMLSafetyAndEnvironmentalInformationClass;
    function Get_Item(Index: Integer): IXMLSafetyAndEnvironmentalInformationClass;
    property Items[Index: Integer]: IXMLSafetyAndEnvironmentalInformationClass read Get_Item; default;
  end;

{ IXMLChainOfCustody }

  IXMLChainOfCustody = interface(IXMLNode)
    ['{7F12A1D4-3FB5-4990-8149-17C0A29FDC09}']
    { Property Accessors }
    function Get_CertificationBody: WideString;
    procedure Set_CertificationBody(Value: WideString);
    { Methods & Properties }
    property CertificationBody: WideString read Get_CertificationBody write Set_CertificationBody;
  end;

{ IXMLProductClass }

  IXMLProductClass = interface(IXMLNode)
    ['{216FAB31-B569-4A16-B7E1-69F1B2AE1A51}']
    { Property Accessors }
    function Get_ProductIdentifier: IXMLProductIdentifierList;
    function Get_ProductDescription: IXMLProductDescriptionList;
    function Get_Classification: IXMLClassificationList;
    function Get_BookManufacturing: IXMLBookManufacturing;
    function Get_LabelStock: IXMLLabelStock;
    function Get_Paper: IXMLPaper;
    function Get_Pulp: IXMLPulpClass;
    function Get_RecoveredPaper: IXMLRecoveredPaper;
    function Get_VirginFibre: IXMLVirginFibre;
    function Get_WoodProducts: IXMLWoodProducts;
    { Methods & Properties }
    property ProductIdentifier: IXMLProductIdentifierList read Get_ProductIdentifier;
    property ProductDescription: IXMLProductDescriptionList read Get_ProductDescription;
    property Classification: IXMLClassificationList read Get_Classification;
    property BookManufacturing: IXMLBookManufacturing read Get_BookManufacturing;
    property LabelStock: IXMLLabelStock read Get_LabelStock;
    property Paper: IXMLPaper read Get_Paper;
    property Pulp: IXMLPulpClass read Get_Pulp;
    property RecoveredPaper: IXMLRecoveredPaper read Get_RecoveredPaper;
    property VirginFibre: IXMLVirginFibre read Get_VirginFibre;
    property WoodProducts: IXMLWoodProducts read Get_WoodProducts;
  end;

{ IXMLProductIdentifier }

  IXMLProductIdentifier = interface(IXMLNode)
    ['{4500C62F-4C61-4B30-BFE2-A3E47BC07554}']
    { Property Accessors }
    function Get_Agency: WideString;
    function Get_ProductIdentifierType: WideString;
    procedure Set_Agency(Value: WideString);
    procedure Set_ProductIdentifierType(Value: WideString);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
    property ProductIdentifierType: WideString read Get_ProductIdentifierType write Set_ProductIdentifierType;
  end;

{ IXMLProductIdentifierList }

  IXMLProductIdentifierList = interface(IXMLNodeCollection)
    ['{585DAB01-2437-405E-97FB-D987CEFF2658}']
    { Methods & Properties }
    function Add: IXMLProductIdentifier;
    function Insert(const Index: Integer): IXMLProductIdentifier;
    function Get_Item(Index: Integer): IXMLProductIdentifier;
    property Items[Index: Integer]: IXMLProductIdentifier read Get_Item; default;
  end;

{ IXMLProductDescription }

  IXMLProductDescription = interface(IXMLNode)
    ['{891D31D7-6CCA-4640-A0FA-B32694709A20}']
    { Property Accessors }
    function Get_Language: WideString;
    procedure Set_Language(Value: WideString);
    { Methods & Properties }
    property Language: WideString read Get_Language write Set_Language;
  end;

{ IXMLProductDescriptionList }

  IXMLProductDescriptionList = interface(IXMLNodeCollection)
    ['{19029A02-12C1-45F8-949A-E50E5CBA1EE3}']
    { Methods & Properties }
    function Add: IXMLProductDescription;
    function Insert(const Index: Integer): IXMLProductDescription;
    function Get_Item(Index: Integer): IXMLProductDescription;
    property Items[Index: Integer]: IXMLProductDescription read Get_Item; default;
  end;

{ IXMLClassification }

  IXMLClassification = interface(IXMLNode)
    ['{0CF7719B-1818-4C38-8225-60506A685B1A}']
    { Property Accessors }
    function Get_ClassificationCode: IXMLClassificationCode;
    function Get_ClassificationDescription: IXMLS72List;
    { Methods & Properties }
    property ClassificationCode: IXMLClassificationCode read Get_ClassificationCode;
    property ClassificationDescription: IXMLS72List read Get_ClassificationDescription;
  end;

{ IXMLClassificationList }

  IXMLClassificationList = interface(IXMLNodeCollection)
    ['{5220AFB6-A500-47C7-9224-6802622B41F4}']
    { Methods & Properties }
    function Add: IXMLClassification;
    function Insert(const Index: Integer): IXMLClassification;
    function Get_Item(Index: Integer): IXMLClassification;
    property Items[Index: Integer]: IXMLClassification read Get_Item; default;
  end;

{ IXMLClassificationCode }

  IXMLClassificationCode = interface(IXMLNode)
    ['{89E5504A-952E-4662-8098-85CCC8456705}']
    { Property Accessors }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
  end;

{ IXMLBookManufacturing }

  IXMLBookManufacturing = interface(IXMLNode)
    ['{1B89BD85-B7AA-4B41-B74E-E695E0736369}']
    { Property Accessors }
    function Get_ProofInformationalQuantity: IXMLProofInformationalQuantityList;
    function Get_PrepInformation: IXMLPrepInformationList;
    function Get_SuppliedComponentInformation: IXMLSuppliedComponentInformationList;
    function Get_PackagingCharacteristics: IXMLPackagingCharacteristics;
    { Methods & Properties }
    property ProofInformationalQuantity: IXMLProofInformationalQuantityList read Get_ProofInformationalQuantity;
    property PrepInformation: IXMLPrepInformationList read Get_PrepInformation;
    property SuppliedComponentInformation: IXMLSuppliedComponentInformationList read Get_SuppliedComponentInformation;
    property PackagingCharacteristics: IXMLPackagingCharacteristics read Get_PackagingCharacteristics;
  end;

{ IXMLProofInformationalQuantity }

  IXMLProofInformationalQuantity = interface(IXMLNode)
    ['{F2C2D66C-ADA3-4F01-BD5B-29B208308E6C}']
    { Property Accessors }
    function Get_ProofType: WideString;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_OtherParty: IXMLTypedParty;
    function Get_ProofApprovalDate: IXMLProofApprovalDate;
    function Get_ProofDueDate: IXMLProofDueDate;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ProofType(Value: WideString);
    { Methods & Properties }
    property ProofType: WideString read Get_ProofType write Set_ProofType;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property OtherParty: IXMLTypedParty read Get_OtherParty;
    property ProofApprovalDate: IXMLProofApprovalDate read Get_ProofApprovalDate;
    property ProofDueDate: IXMLProofDueDate read Get_ProofDueDate;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLProofInformationalQuantityList }

  IXMLProofInformationalQuantityList = interface(IXMLNodeCollection)
    ['{B2D61DCB-0783-4833-85D3-30A31C2E0E74}']
    { Methods & Properties }
    function Add: IXMLProofInformationalQuantity;
    function Insert(const Index: Integer): IXMLProofInformationalQuantity;
    function Get_Item(Index: Integer): IXMLProofInformationalQuantity;
    property Items[Index: Integer]: IXMLProofInformationalQuantity read Get_Item; default;
  end;

{ IXMLProofApprovalDate }

  IXMLProofApprovalDate = interface(IXMLNode)
    ['{72CE0D8E-C8A0-4070-A3E3-AB37E5301E37}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
  end;

{ IXMLProofDueDate }

  IXMLProofDueDate = interface(IXMLNode)
    ['{9D54561F-22E7-465B-91EE-532BC59262AC}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
  end;

{ IXMLPrepInformation }

  IXMLPrepInformation = interface(IXMLNode)
    ['{1A7EA861-E132-4EF5-8301-58E48C661741}']
    { Property Accessors }
    function Get_PrepType: WideString;
    function Get_SupplierParty: IXMLParty;
    function Get_PrepShipDate: IXMLDateTimeBasis;
    function Get_PrepDueDate: IXMLDateTimeBasis;
    function Get_PrepNeededDate: IXMLDateTimeBasis;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_PrepType(Value: WideString);
    { Methods & Properties }
    property PrepType: WideString read Get_PrepType write Set_PrepType;
    property SupplierParty: IXMLParty read Get_SupplierParty;
    property PrepShipDate: IXMLDateTimeBasis read Get_PrepShipDate;
    property PrepDueDate: IXMLDateTimeBasis read Get_PrepDueDate;
    property PrepNeededDate: IXMLDateTimeBasis read Get_PrepNeededDate;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLPrepInformationList }

  IXMLPrepInformationList = interface(IXMLNodeCollection)
    ['{8D2A7505-20F1-4478-AFDF-D52123272BF0}']
    { Methods & Properties }
    function Add: IXMLPrepInformation;
    function Insert(const Index: Integer): IXMLPrepInformation;
    function Get_Item(Index: Integer): IXMLPrepInformation;
    property Items[Index: Integer]: IXMLPrepInformation read Get_Item; default;
  end;

{ IXMLSuppliedComponentInformation }

  IXMLSuppliedComponentInformation = interface(IXMLNode)
    ['{B9F2894C-7816-41D9-9137-DA3D1B27C54D}']
    { Property Accessors }
    function Get_SuppliedComponentType: WideString;
    function Get_SupplierParty: IXMLParty;
    function Get_ProductIdentifier: IXMLProductIdentifierList;
    function Get_ProductDescription: IXMLProductDescriptionList;
    function Get_Classification: IXMLClassificationList;
    function Get_SuppliedComponentReference: IXMLS255List;
    function Get_Quantity: IXMLQuantity;
    function Get_ComponentShipDate: IXMLComponentShipDate;
    function Get_ComponentDueDate: IXMLComponentDueDate;
    function Get_ComponentNeededDate: IXMLComponentNeededDate;
    function Get_OrderStatusInformation: IXMLOrderStatusInformation;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_SuppliedComponentType(Value: WideString);
    { Methods & Properties }
    property SuppliedComponentType: WideString read Get_SuppliedComponentType write Set_SuppliedComponentType;
    property SupplierParty: IXMLParty read Get_SupplierParty;
    property ProductIdentifier: IXMLProductIdentifierList read Get_ProductIdentifier;
    property ProductDescription: IXMLProductDescriptionList read Get_ProductDescription;
    property Classification: IXMLClassificationList read Get_Classification;
    property SuppliedComponentReference: IXMLS255List read Get_SuppliedComponentReference;
    property Quantity: IXMLQuantity read Get_Quantity;
    property ComponentShipDate: IXMLComponentShipDate read Get_ComponentShipDate;
    property ComponentDueDate: IXMLComponentDueDate read Get_ComponentDueDate;
    property ComponentNeededDate: IXMLComponentNeededDate read Get_ComponentNeededDate;
    property OrderStatusInformation: IXMLOrderStatusInformation read Get_OrderStatusInformation;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLSuppliedComponentInformationList }

  IXMLSuppliedComponentInformationList = interface(IXMLNodeCollection)
    ['{63BB2732-4D1D-45E1-B78B-9FD3405B1FC5}']
    { Methods & Properties }
    function Add: IXMLSuppliedComponentInformation;
    function Insert(const Index: Integer): IXMLSuppliedComponentInformation;
    function Get_Item(Index: Integer): IXMLSuppliedComponentInformation;
    property Items[Index: Integer]: IXMLSuppliedComponentInformation read Get_Item; default;
  end;

{ IXMLComponentShipDate }

  IXMLComponentShipDate = interface(IXMLNode)
    ['{7DA77790-9D3E-4025-BC74-30924D40932F}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
  end;

{ IXMLComponentDueDate }

  IXMLComponentDueDate = interface(IXMLNode)
    ['{50E93B94-6FA3-471E-B35A-BDA7A48AFDD8}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
  end;

{ IXMLComponentNeededDate }

  IXMLComponentNeededDate = interface(IXMLNode)
    ['{3D55EFFB-26CC-49A9-8A5F-C944AF5C1945}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
  end;

{ IXMLOrderStatusInformation }

  IXMLOrderStatusInformation = interface(IXMLNode)
    ['{488BDBE6-21EC-47F2-A1CE-A28EE4170ACE}']
    { Property Accessors }
    function Get_OrderPrimaryStatus: IXMLOrderPrimaryStatus;
    function Get_OrderSecondaryStatus: WideString;
    procedure Set_OrderSecondaryStatus(Value: WideString);
    { Methods & Properties }
    property OrderPrimaryStatus: IXMLOrderPrimaryStatus read Get_OrderPrimaryStatus;
    property OrderSecondaryStatus: WideString read Get_OrderSecondaryStatus write Set_OrderSecondaryStatus;
  end;

{ IXMLOrderPrimaryStatus }

  IXMLOrderPrimaryStatus = interface(IXMLNode)
    ['{0F49654B-6A44-4B39-804C-4D542447BE72}']
    { Property Accessors }
    function Get_OrderStatusCode: WideString;
    procedure Set_OrderStatusCode(Value: WideString);
    { Methods & Properties }
    property OrderStatusCode: WideString read Get_OrderStatusCode write Set_OrderStatusCode;
  end;

{ IXMLPackagingCharacteristics }

  IXMLPackagingCharacteristics = interface(IXMLNode)
    ['{E18D42F0-521E-438E-A603-F656FBBBB72F}']
    { Property Accessors }
    function Get_BoxCharacteristics: IXMLBoxCharacteristics;
    function Get_PalletPackagingCharacteristics: IXMLPalletPackagingCharacteristics;
    function Get_BookUnitPacking: IXMLBookUnitPacking;
    { Methods & Properties }
    property BoxCharacteristics: IXMLBoxCharacteristics read Get_BoxCharacteristics;
    property PalletPackagingCharacteristics: IXMLPalletPackagingCharacteristics read Get_PalletPackagingCharacteristics;
    property BookUnitPacking: IXMLBookUnitPacking read Get_BookUnitPacking;
  end;

{ IXMLBoxCharacteristics }

  IXMLBoxCharacteristics = interface(IXMLNode)
    ['{D1209936-5AFC-461F-A07E-C656907D1EF0}']
    { Property Accessors }
    function Get_BoxType: WideString;
    function Get_Height: IXMLMeasurement;
    function Get_Length: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_Weight: IXMLMeasurement;
    function Get_Burst: IXMLBurst;
    function Get_BurstIndex: IXMLBurstIndex;
    function Get_UnitsPerCarton: IXMLMeasurement;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_WrapCharacteristics: IXMLWrapCharacteristics;
    function Get_BandCharacteristics: IXMLBandCharacteristics;
    procedure Set_BoxType(Value: WideString);
    { Methods & Properties }
    property BoxType: WideString read Get_BoxType write Set_BoxType;
    property Height: IXMLMeasurement read Get_Height;
    property Length: IXMLMeasurement read Get_Length;
    property Width: IXMLMeasurement read Get_Width;
    property Weight: IXMLMeasurement read Get_Weight;
    property Burst: IXMLBurst read Get_Burst;
    property BurstIndex: IXMLBurstIndex read Get_BurstIndex;
    property UnitsPerCarton: IXMLMeasurement read Get_UnitsPerCarton;
    property LabelCharacteristics: IXMLLabelCharacteristicsList read Get_LabelCharacteristics;
    property StencilCharacteristics: IXMLStencilCharacteristicsList read Get_StencilCharacteristics;
    property WrapCharacteristics: IXMLWrapCharacteristics read Get_WrapCharacteristics;
    property BandCharacteristics: IXMLBandCharacteristics read Get_BandCharacteristics;
  end;

{ IXMLDetailMeasurement }

  IXMLDetailMeasurement = interface(IXMLNode)
    ['{3DC99887-D276-4A4B-B105-13B8BFA598E0}']
    { Property Accessors }
    function Get_DetailValue: IXMLDetailValue;
    function Get_DetailRangeMin: IXMLDetailRangeMin;
    function Get_DetailRangeMax: IXMLDetailRangeMax;
    function Get_StandardDeviation: IXMLStandardDeviation;
    function Get_SampleSize: LongWord;
    function Get_TwoSigmaLower: IXMLTwoSigmaLower;
    function Get_TwoSigmaUpper: IXMLTwoSigmaUpper;
    procedure Set_SampleSize(Value: LongWord);
    { Methods & Properties }
    property DetailValue: IXMLDetailValue read Get_DetailValue;
    property DetailRangeMin: IXMLDetailRangeMin read Get_DetailRangeMin;
    property DetailRangeMax: IXMLDetailRangeMax read Get_DetailRangeMax;
    property StandardDeviation: IXMLStandardDeviation read Get_StandardDeviation;
    property SampleSize: LongWord read Get_SampleSize write Set_SampleSize;
    property TwoSigmaLower: IXMLTwoSigmaLower read Get_TwoSigmaLower;
    property TwoSigmaUpper: IXMLTwoSigmaUpper read Get_TwoSigmaUpper;
  end;

{ IXMLBurstIndex }

  IXMLBurstIndex = interface(IXMLDetailMeasurement)
    ['{D2CF0894-1C61-441C-B02E-DDBE4698FB47}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLBurstIndexList }

  IXMLBurstIndexList = interface(IXMLNodeCollection)
    ['{04F3EAA9-CF79-4A34-9224-BE5126604308}']
    { Methods & Properties }
    function Add: IXMLBurstIndex;
    function Insert(const Index: Integer): IXMLBurstIndex;
    function Get_Item(Index: Integer): IXMLBurstIndex;
    property Items[Index: Integer]: IXMLBurstIndex read Get_Item; default;
  end;

{ IXMLLabelCharacteristics }

  IXMLLabelCharacteristics = interface(IXMLNode)
    ['{52F8249F-5D2C-4E23-9AAB-7001B625E9D3}']
    { Property Accessors }
    function Get_CustomerMarks: IXMLS255List;
    function Get_LabelStyle: WideString;
    function Get_LabelBrandName: WideString;
    function Get_LabelPosition: WideString;
    function Get_NumberOfLabels: LongWord;
    function Get_Length: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_ColourCode: IXMLColourCode;
    function Get_ColourDescription: WideString;
    procedure Set_LabelStyle(Value: WideString);
    procedure Set_LabelBrandName(Value: WideString);
    procedure Set_LabelPosition(Value: WideString);
    procedure Set_NumberOfLabels(Value: LongWord);
    procedure Set_ColourDescription(Value: WideString);
    { Methods & Properties }
    property CustomerMarks: IXMLS255List read Get_CustomerMarks;
    property LabelStyle: WideString read Get_LabelStyle write Set_LabelStyle;
    property LabelBrandName: WideString read Get_LabelBrandName write Set_LabelBrandName;
    property LabelPosition: WideString read Get_LabelPosition write Set_LabelPosition;
    property NumberOfLabels: LongWord read Get_NumberOfLabels write Set_NumberOfLabels;
    property Length: IXMLMeasurement read Get_Length;
    property Width: IXMLMeasurement read Get_Width;
    property ColourCode: IXMLColourCode read Get_ColourCode;
    property ColourDescription: WideString read Get_ColourDescription write Set_ColourDescription;
  end;

{ IXMLLabelCharacteristicsList }

  IXMLLabelCharacteristicsList = interface(IXMLNodeCollection)
    ['{0D9C5141-33B7-4135-8DA8-91BAAE95A151}']
    { Methods & Properties }
    function Add: IXMLLabelCharacteristics;
    function Insert(const Index: Integer): IXMLLabelCharacteristics;
    function Get_Item(Index: Integer): IXMLLabelCharacteristics;
    property Items[Index: Integer]: IXMLLabelCharacteristics read Get_Item; default;
  end;

{ IXMLColourCode }

  IXMLColourCode = interface(IXMLNode)
    ['{50DD1210-FA36-4A8E-BA83-3AD660D41ED5}']
    { Property Accessors }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
  end;

{ IXMLStencilCharacteristics }

  IXMLStencilCharacteristics = interface(IXMLNodeCollection)
    ['{34D2F90C-20DB-4EDF-9CE5-7437ED170772}']
    { Property Accessors }
    function Get_StencilType: WideString;
    function Get_StencilInkType: WideString;
    function Get_StencilLocation: WideString;
    function Get_StencilContent: WideString;
    function Get_StencilFormat: WideString;
    function Get_StencilText(Index: Integer): WideString;
    procedure Set_StencilType(Value: WideString);
    procedure Set_StencilInkType(Value: WideString);
    procedure Set_StencilLocation(Value: WideString);
    procedure Set_StencilContent(Value: WideString);
    procedure Set_StencilFormat(Value: WideString);
    { Methods & Properties }
    function Add(const StencilText: WideString): IXMLNode;
    function Insert(const Index: Integer; const StencilText: WideString): IXMLNode;
    property StencilType: WideString read Get_StencilType write Set_StencilType;
    property StencilInkType: WideString read Get_StencilInkType write Set_StencilInkType;
    property StencilLocation: WideString read Get_StencilLocation write Set_StencilLocation;
    property StencilContent: WideString read Get_StencilContent write Set_StencilContent;
    property StencilFormat: WideString read Get_StencilFormat write Set_StencilFormat;
    property StencilText[Index: Integer]: WideString read Get_StencilText; default;
  end;

{ IXMLStencilCharacteristicsList }

  IXMLStencilCharacteristicsList = interface(IXMLNodeCollection)
    ['{B57A559A-73A7-4F88-A645-D03B4668A908}']
    { Methods & Properties }
    function Add: IXMLStencilCharacteristics;
    function Insert(const Index: Integer): IXMLStencilCharacteristics;
    function Get_Item(Index: Integer): IXMLStencilCharacteristics;
    property Items[Index: Integer]: IXMLStencilCharacteristics read Get_Item; default;
  end;

{ IXMLWrapCharacteristics }

  IXMLWrapCharacteristics = interface(IXMLNode)
    ['{6CE8D435-973E-4175-A17D-E6EE2868D71A}']
    { Property Accessors }
    function Get_PackagesPerWrap: LongWord;
    function Get_Wrap: IXMLWrapList;
    procedure Set_PackagesPerWrap(Value: LongWord);
    { Methods & Properties }
    property PackagesPerWrap: LongWord read Get_PackagesPerWrap write Set_PackagesPerWrap;
    property Wrap: IXMLWrapList read Get_Wrap;
  end;

{ IXMLWrap }

  IXMLWrap = interface(IXMLNode)
    ['{FEAAF08F-C432-4755-A6C8-1005FCA0C143}']
    { Property Accessors }
    function Get_WrapType: WideString;
    function Get_WrapProperties: WideString;
    function Get_WrapLocation: WideString;
    function Get_NumberOfWraps: WideString;
    function Get_Brand: WideString;
    procedure Set_WrapType(Value: WideString);
    procedure Set_WrapProperties(Value: WideString);
    procedure Set_WrapLocation(Value: WideString);
    procedure Set_NumberOfWraps(Value: WideString);
    procedure Set_Brand(Value: WideString);
    { Methods & Properties }
    property WrapType: WideString read Get_WrapType write Set_WrapType;
    property WrapProperties: WideString read Get_WrapProperties write Set_WrapProperties;
    property WrapLocation: WideString read Get_WrapLocation write Set_WrapLocation;
    property NumberOfWraps: WideString read Get_NumberOfWraps write Set_NumberOfWraps;
    property Brand: WideString read Get_Brand write Set_Brand;
  end;

{ IXMLWrapList }

  IXMLWrapList = interface(IXMLNodeCollection)
    ['{017028A6-AE88-4E74-AC17-2B2A4AB7F5BD}']
    { Methods & Properties }
    function Add: IXMLWrap;
    function Insert(const Index: Integer): IXMLWrap;
    function Get_Item(Index: Integer): IXMLWrap;
    property Items[Index: Integer]: IXMLWrap read Get_Item; default;
  end;

{ IXMLBandCharacteristics }

  IXMLBandCharacteristics = interface(IXMLNode)
    ['{AE28EE64-18FA-4AB2-A9C3-4E9750C53875}']
    { Property Accessors }
    function Get_BandType: WideString;
    function Get_BandsRequired: WideString;
    function Get_BandDirection: WideString;
    function Get_NumberOfBands: LongWord;
    function Get_BandColour: IXMLS20List;
    procedure Set_BandType(Value: WideString);
    procedure Set_BandsRequired(Value: WideString);
    procedure Set_BandDirection(Value: WideString);
    procedure Set_NumberOfBands(Value: LongWord);
    { Methods & Properties }
    property BandType: WideString read Get_BandType write Set_BandType;
    property BandsRequired: WideString read Get_BandsRequired write Set_BandsRequired;
    property BandDirection: WideString read Get_BandDirection write Set_BandDirection;
    property NumberOfBands: LongWord read Get_NumberOfBands write Set_NumberOfBands;
    property BandColour: IXMLS20List read Get_BandColour;
  end;

{ IXMLBandCharacteristicsList }

  IXMLBandCharacteristicsList = interface(IXMLNodeCollection)
    ['{1B9CE014-9ED4-46D2-A4DE-41EE2E71B765}']
    { Methods & Properties }
    function Add: IXMLBandCharacteristics;
    function Insert(const Index: Integer): IXMLBandCharacteristics;
    function Get_Item(Index: Integer): IXMLBandCharacteristics;
    property Items[Index: Integer]: IXMLBandCharacteristics read Get_Item; default;
  end;

{ IXMLPalletPackagingCharacteristics }

  IXMLPalletPackagingCharacteristics = interface(IXMLNode)
    ['{360C5ADA-1D91-4A36-A6FE-312D4170A83C}']
    { Property Accessors }
    function Get_PackagingCode: IXMLPackagingCode;
    function Get_PackagingDescription: IXMLPackagingDescription;
    function Get_WrapCharacteristics: IXMLWrapCharacteristics;
    function Get_PalletCharacteristics: IXMLPalletCharacteristics;
    function Get_BandCharacteristics: IXMLBandCharacteristics;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_MaximumHeight: IXMLMeasurement;
    function Get_MaximumGrossWeight: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
    { Methods & Properties }
    property PackagingCode: IXMLPackagingCode read Get_PackagingCode;
    property PackagingDescription: IXMLPackagingDescription read Get_PackagingDescription;
    property WrapCharacteristics: IXMLWrapCharacteristics read Get_WrapCharacteristics;
    property PalletCharacteristics: IXMLPalletCharacteristics read Get_PalletCharacteristics;
    property BandCharacteristics: IXMLBandCharacteristics read Get_BandCharacteristics;
    property LabelCharacteristics: IXMLLabelCharacteristicsList read Get_LabelCharacteristics;
    property StencilCharacteristics: IXMLStencilCharacteristicsList read Get_StencilCharacteristics;
    property MaximumHeight: IXMLMeasurement read Get_MaximumHeight;
    property MaximumGrossWeight: IXMLMeasurement read Get_MaximumGrossWeight;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLPackagingCode }

  IXMLPackagingCode = interface(IXMLNode)
    ['{C7D56E38-D608-428B-9E86-217827FA210D}']
    { Property Accessors }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
  end;

{ IXMLPackagingCodeList }

  IXMLPackagingCodeList = interface(IXMLNodeCollection)
    ['{954E36D9-1A7F-4C47-8CB9-E74E7E4A9D34}']
    { Methods & Properties }
    function Add: IXMLPackagingCode;
    function Insert(const Index: Integer): IXMLPackagingCode;
    function Get_Item(Index: Integer): IXMLPackagingCode;
    property Items[Index: Integer]: IXMLPackagingCode read Get_Item; default;
  end;

{ IXMLPackagingDescription }

  IXMLPackagingDescription = interface(IXMLNode)
    ['{8D53D77B-0B97-4DEF-8E6B-57D74A842C27}']
    { Property Accessors }
    function Get_Language: WideString;
    procedure Set_Language(Value: WideString);
    { Methods & Properties }
    property Language: WideString read Get_Language write Set_Language;
  end;

{ IXMLPackagingDescriptionList }

  IXMLPackagingDescriptionList = interface(IXMLNodeCollection)
    ['{E21C4077-F912-4FD6-B04A-CBC592F12F07}']
    { Methods & Properties }
    function Add: IXMLPackagingDescription;
    function Insert(const Index: Integer): IXMLPackagingDescription;
    function Get_Item(Index: Integer): IXMLPackagingDescription;
    property Items[Index: Integer]: IXMLPackagingDescription read Get_Item; default;
  end;

{ IXMLPalletCharacteristics }

  IXMLPalletCharacteristics = interface(IXMLNode)
    ['{CCCF6F51-3C08-496F-8C1B-237B574DCBDB}']
    { Property Accessors }
    function Get_MixedProductPalletIndicator: WideString;
    function Get_PalletType: WideString;
    function Get_PalletLedgeType: WideString;
    function Get_PalletCoverType: WideString;
    function Get_PalletAdditionsType: WideString;
    function Get_PalletTopType: WideString;
    function Get_PalletLength: IXMLMeasurement;
    function Get_PalletWidth: IXMLMeasurement;
    function Get_ItemsPerPallet: LongWord;
    function Get_StacksPerPallet: LongWord;
    function Get_TiersPerPallet: LongWord;
    function Get_MaximumHeight: IXMLMeasurement;
    function Get_StackingMethod: WideString;
    function Get_LabelCharacteristics: IXMLLabelCharacteristics;
    procedure Set_MixedProductPalletIndicator(Value: WideString);
    procedure Set_PalletType(Value: WideString);
    procedure Set_PalletLedgeType(Value: WideString);
    procedure Set_PalletCoverType(Value: WideString);
    procedure Set_PalletAdditionsType(Value: WideString);
    procedure Set_PalletTopType(Value: WideString);
    procedure Set_ItemsPerPallet(Value: LongWord);
    procedure Set_StacksPerPallet(Value: LongWord);
    procedure Set_TiersPerPallet(Value: LongWord);
    procedure Set_StackingMethod(Value: WideString);
    { Methods & Properties }
    property MixedProductPalletIndicator: WideString read Get_MixedProductPalletIndicator write Set_MixedProductPalletIndicator;
    property PalletType: WideString read Get_PalletType write Set_PalletType;
    property PalletLedgeType: WideString read Get_PalletLedgeType write Set_PalletLedgeType;
    property PalletCoverType: WideString read Get_PalletCoverType write Set_PalletCoverType;
    property PalletAdditionsType: WideString read Get_PalletAdditionsType write Set_PalletAdditionsType;
    property PalletTopType: WideString read Get_PalletTopType write Set_PalletTopType;
    property PalletLength: IXMLMeasurement read Get_PalletLength;
    property PalletWidth: IXMLMeasurement read Get_PalletWidth;
    property ItemsPerPallet: LongWord read Get_ItemsPerPallet write Set_ItemsPerPallet;
    property StacksPerPallet: LongWord read Get_StacksPerPallet write Set_StacksPerPallet;
    property TiersPerPallet: LongWord read Get_TiersPerPallet write Set_TiersPerPallet;
    property MaximumHeight: IXMLMeasurement read Get_MaximumHeight;
    property StackingMethod: WideString read Get_StackingMethod write Set_StackingMethod;
    property LabelCharacteristics: IXMLLabelCharacteristics read Get_LabelCharacteristics;
  end;

{ IXMLPalletCharacteristicsList }

  IXMLPalletCharacteristicsList = interface(IXMLNodeCollection)
    ['{CDFDFEA5-567E-4EBB-BB06-E1178A8FAE7A}']
    { Methods & Properties }
    function Add: IXMLPalletCharacteristics;
    function Insert(const Index: Integer): IXMLPalletCharacteristics;
    function Get_Item(Index: Integer): IXMLPalletCharacteristics;
    property Items[Index: Integer]: IXMLPalletCharacteristics read Get_Item; default;
  end;

{ IXMLBookUnitPacking }

  IXMLBookUnitPacking = interface(IXMLNode)
    ['{75A25306-F276-4929-9D79-0F96CA0E3EA7}']
    { Property Accessors }
    function Get_BookUnitType: WideString;
    function Get_UnitCharacteristics: IXMLUnitCharacteristics;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristics;
    function Get_WrapCharacteristics: IXMLWrapCharacteristics;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_BookUnitType(Value: WideString);
    { Methods & Properties }
    property BookUnitType: WideString read Get_BookUnitType write Set_BookUnitType;
    property UnitCharacteristics: IXMLUnitCharacteristics read Get_UnitCharacteristics;
    property LabelCharacteristics: IXMLLabelCharacteristicsList read Get_LabelCharacteristics;
    property StencilCharacteristics: IXMLStencilCharacteristics read Get_StencilCharacteristics;
    property WrapCharacteristics: IXMLWrapCharacteristics read Get_WrapCharacteristics;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLUnitCharacteristics }

  IXMLUnitCharacteristics = interface(IXMLNode)
    ['{13576E92-A457-450B-9F97-DB21451F3E67}']
    { Property Accessors }
    function Get_Height: IXMLMeasurement;
    function Get_Thickness: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_Weight: IXMLMeasurement;
    { Methods & Properties }
    property Height: IXMLMeasurement read Get_Height;
    property Thickness: IXMLMeasurement read Get_Thickness;
    property Width: IXMLMeasurement read Get_Width;
    property Weight: IXMLMeasurement read Get_Weight;
  end;

{ IXMLLabelStock }

  IXMLLabelStock = interface(IXMLNode)
    ['{C9516F94-26BB-4652-842D-54379A3A86FE}']
    { Property Accessors }
    function Get_LabelStockCharacteristics: IXMLLabelStockCharacteristics;
    function Get_SingleWidthReel: IXMLSingleWidthReel;
    function Get_TrimmedReel: IXMLTrimmedReel;
    function Get_Sheet: IXMLSheet;
    { Methods & Properties }
    property LabelStockCharacteristics: IXMLLabelStockCharacteristics read Get_LabelStockCharacteristics;
    property SingleWidthReel: IXMLSingleWidthReel read Get_SingleWidthReel;
    property TrimmedReel: IXMLTrimmedReel read Get_TrimmedReel;
    property Sheet: IXMLSheet read Get_Sheet;
  end;

{ IXMLLabelStockCharacteristics }

  IXMLLabelStockCharacteristics = interface(IXMLNode)
    ['{F0C73047-B290-4716-89FE-208B117E8451}']
    { Property Accessors }
    function Get_LabelStockLayer: IXMLLabelStockLayerList;
    function Get_ExtraFeature: IXMLExtraFeatureList;
    function Get_AdditionalText: IXMLS255List;
    { Methods & Properties }
    property LabelStockLayer: IXMLLabelStockLayerList read Get_LabelStockLayer;
    property ExtraFeature: IXMLExtraFeatureList read Get_ExtraFeature;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLLabelStockLayer }

  IXMLLabelStockLayer = interface(IXMLNode)
    ['{F0AB5706-C746-4F08-B082-6CAC690C7843}']
    { Property Accessors }
    function Get_LabelStockLayerType: WideString;
    function Get_LabelStockLayerNumber: LongWord;
    function Get_LayerMaterial: IXMLLayerMaterial;
    procedure Set_LabelStockLayerType(Value: WideString);
    procedure Set_LabelStockLayerNumber(Value: LongWord);
    { Methods & Properties }
    property LabelStockLayerType: WideString read Get_LabelStockLayerType write Set_LabelStockLayerType;
    property LabelStockLayerNumber: LongWord read Get_LabelStockLayerNumber write Set_LabelStockLayerNumber;
    property LayerMaterial: IXMLLayerMaterial read Get_LayerMaterial;
  end;

{ IXMLLabelStockLayerList }

  IXMLLabelStockLayerList = interface(IXMLNodeCollection)
    ['{5671C532-D341-433C-93EE-2EEC37018C34}']
    { Methods & Properties }
    function Add: IXMLLabelStockLayer;
    function Insert(const Index: Integer): IXMLLabelStockLayer;
    function Get_Item(Index: Integer): IXMLLabelStockLayer;
    property Items[Index: Integer]: IXMLLabelStockLayer read Get_Item; default;
  end;

{ IXMLLayerMaterial }

  IXMLLayerMaterial = interface(IXMLNode)
    ['{E4DE576B-9353-4CCF-A0A0-416F6F4B5B26}']
    { Property Accessors }
    function Get_ProductIdentifier: IXMLProductIdentifier;
    function Get_LayerMaterialName: WideString;
    procedure Set_LayerMaterialName(Value: WideString);
    { Methods & Properties }
    property ProductIdentifier: IXMLProductIdentifier read Get_ProductIdentifier;
    property LayerMaterialName: WideString read Get_LayerMaterialName write Set_LayerMaterialName;
  end;

{ IXMLExtraFeature }

  IXMLExtraFeature = interface(IXMLNode)
    ['{C7A19679-9D6B-4E06-ACC2-54E88375CD98}']
    { Property Accessors }
    function Get_ProductIdentifier: IXMLProductIdentifier;
    function Get_ExtraFeatureDescription: WideString;
    procedure Set_ExtraFeatureDescription(Value: WideString);
    { Methods & Properties }
    property ProductIdentifier: IXMLProductIdentifier read Get_ProductIdentifier;
    property ExtraFeatureDescription: WideString read Get_ExtraFeatureDescription write Set_ExtraFeatureDescription;
  end;

{ IXMLExtraFeatureList }

  IXMLExtraFeatureList = interface(IXMLNodeCollection)
    ['{4A5E7C39-D2F5-4328-8531-1D63AC1915B9}']
    { Methods & Properties }
    function Add: IXMLExtraFeature;
    function Insert(const Index: Integer): IXMLExtraFeature;
    function Get_Item(Index: Integer): IXMLExtraFeature;
    property Items[Index: Integer]: IXMLExtraFeature read Get_Item; default;
  end;

{ IXMLSingleWidthReel }

  IXMLSingleWidthReel = interface(IXMLNode)
    ['{7BC0C782-BD8B-42E5-8EF3-E306F0F61EAB}']
    { Property Accessors }
    function Get_SingleWidthReelConversionCharacteristics: IXMLSingleWidthReelConversionCharacteristics;
    function Get_ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass;
    { Methods & Properties }
    property SingleWidthReelConversionCharacteristics: IXMLSingleWidthReelConversionCharacteristics read Get_SingleWidthReelConversionCharacteristics;
    property ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass read Get_ReelPackagingCharacteristics;
  end;

{ IXMLSingleWidthReelConversionCharacteristics }

  IXMLSingleWidthReelConversionCharacteristics = interface(IXMLNode)
    ['{B1E6910A-065F-43A6-9198-6010DA386D2E}']
    { Property Accessors }
    function Get_WindingDirection: WideString;
    function Get_TrimmedOrderType: WideString;
    function Get_ReelWidth: IXMLMeasurement;
    function Get_ReelDiameter: IXMLMeasurement;
    function Get_ReelLength: IXMLMeasurement;
    function Get_CoreCharacteristics: IXMLCoreCharacteristics;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_WindingDirection(Value: WideString);
    procedure Set_TrimmedOrderType(Value: WideString);
    { Methods & Properties }
    property WindingDirection: WideString read Get_WindingDirection write Set_WindingDirection;
    property TrimmedOrderType: WideString read Get_TrimmedOrderType write Set_TrimmedOrderType;
    property ReelWidth: IXMLMeasurement read Get_ReelWidth;
    property ReelDiameter: IXMLMeasurement read Get_ReelDiameter;
    property ReelLength: IXMLMeasurement read Get_ReelLength;
    property CoreCharacteristics: IXMLCoreCharacteristics read Get_CoreCharacteristics;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLCoreCharacteristics }

  IXMLCoreCharacteristics = interface(IXMLNode)
    ['{676556CE-8802-4D8C-A01F-2CB65A7D9BFE}']
    { Property Accessors }
    function Get_CoreEndType: WideString;
    function Get_CoreMaterialType: WideString;
    function Get_CoreDiameterInside: IXMLMeasurement;
    function Get_CoreDiameterOutside: IXMLMeasurement;
    function Get_CoreStrengthCode: IXMLCoreStrengthCode;
    procedure Set_CoreEndType(Value: WideString);
    procedure Set_CoreMaterialType(Value: WideString);
    { Methods & Properties }
    property CoreEndType: WideString read Get_CoreEndType write Set_CoreEndType;
    property CoreMaterialType: WideString read Get_CoreMaterialType write Set_CoreMaterialType;
    property CoreDiameterInside: IXMLMeasurement read Get_CoreDiameterInside;
    property CoreDiameterOutside: IXMLMeasurement read Get_CoreDiameterOutside;
    property CoreStrengthCode: IXMLCoreStrengthCode read Get_CoreStrengthCode;
  end;

{ IXMLCoreCharacteristicsList }

  IXMLCoreCharacteristicsList = interface(IXMLNodeCollection)
    ['{109DF87D-FCB6-4C6E-B29D-7821509246F4}']
    { Methods & Properties }
    function Add: IXMLCoreCharacteristics;
    function Insert(const Index: Integer): IXMLCoreCharacteristics;
    function Get_Item(Index: Integer): IXMLCoreCharacteristics;
    property Items[Index: Integer]: IXMLCoreCharacteristics read Get_Item; default;
  end;

{ IXMLCoreStrengthCode }

  IXMLCoreStrengthCode = interface(IXMLNode)
    ['{ADF4D5C0-4C53-4B2B-B406-10D988864ACE}']
    { Property Accessors }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
  end;

{ IXMLReelPackagingCharacteristicsClass }

  IXMLReelPackagingCharacteristicsClass = interface(IXMLNode)
    ['{151711BB-F61F-455E-BE95-E286D82F7C2A}']
    { Property Accessors }
    function Get_ActionType: WideString;
    function Get_PackagingCode: IXMLPackagingCode;
    function Get_PackagingDescription: IXMLPackagingDescription;
    function Get_ReelsPerPack: LongWord;
    function Get_Wrap: IXMLWrapList;
    function Get_EndCaps: IXMLS20List;
    function Get_CorePlugs: IXMLNni1List;
    function Get_BandCharacteristics: IXMLBandCharacteristicsList;
    function Get_PalletCharacteristics: IXMLPalletCharacteristicsList;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_MaximumHeight: IXMLMeasurement;
    function Get_MaximumGrossWeight: IXMLMeasurement;
    function Get_MaximumClampingForce: IXMLMaximumClampingForce;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ActionType(Value: WideString);
    procedure Set_ReelsPerPack(Value: LongWord);
    { Methods & Properties }
    property ActionType: WideString read Get_ActionType write Set_ActionType;
    property PackagingCode: IXMLPackagingCode read Get_PackagingCode;
    property PackagingDescription: IXMLPackagingDescription read Get_PackagingDescription;
    property ReelsPerPack: LongWord read Get_ReelsPerPack write Set_ReelsPerPack;
    property Wrap: IXMLWrapList read Get_Wrap;
    property EndCaps: IXMLS20List read Get_EndCaps;
    property CorePlugs: IXMLNni1List read Get_CorePlugs;
    property BandCharacteristics: IXMLBandCharacteristicsList read Get_BandCharacteristics;
    property PalletCharacteristics: IXMLPalletCharacteristicsList read Get_PalletCharacteristics;
    property LabelCharacteristics: IXMLLabelCharacteristicsList read Get_LabelCharacteristics;
    property StencilCharacteristics: IXMLStencilCharacteristicsList read Get_StencilCharacteristics;
    property MaximumHeight: IXMLMeasurement read Get_MaximumHeight;
    property MaximumGrossWeight: IXMLMeasurement read Get_MaximumGrossWeight;
    property MaximumClampingForce: IXMLMaximumClampingForce read Get_MaximumClampingForce;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLMaximumClampingForce }

  IXMLMaximumClampingForce = interface(IXMLNode)
    ['{31335D72-E9F3-4014-A0BF-0EB78989AFA9}']
    { Property Accessors }
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    { Methods & Properties }
    property Value: IXMLValue read Get_Value;
    property RangeMin: IXMLRangeMin read Get_RangeMin;
    property RangeMax: IXMLRangeMax read Get_RangeMax;
  end;

{ IXMLTrimmedReel }

  IXMLTrimmedReel = interface(IXMLNode)
    ['{C1099354-3BBE-4F86-A955-6E356270288F}']
    { Property Accessors }
    function Get_TrimmedReelConversionCharacteristics: IXMLTrimmedReelConversionCharacteristics;
    function Get_ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass;
    { Methods & Properties }
    property TrimmedReelConversionCharacteristics: IXMLTrimmedReelConversionCharacteristics read Get_TrimmedReelConversionCharacteristics;
    property ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass read Get_ReelPackagingCharacteristics;
  end;

{ IXMLTrimmedReelConversionCharacteristics }

  IXMLTrimmedReelConversionCharacteristics = interface(IXMLNode)
    ['{AE2661F3-E8FF-48EF-85E5-5309025082EA}']
    { Property Accessors }
    function Get_WindingDirection: WideString;
    function Get_TrimmedOrderType: WideString;
    function Get_MasterReelWidth: IXMLMeasurement;
    function Get_ReelDiameter: IXMLMeasurement;
    function Get_ReelLength: IXMLMeasurement;
    function Get_MaximumOffcut: IXMLMeasurement;
    function Get_CoreCharacteristics: IXMLCoreCharacteristics;
    function Get_SlitReel: IXMLSlitReelList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_WindingDirection(Value: WideString);
    procedure Set_TrimmedOrderType(Value: WideString);
    { Methods & Properties }
    property WindingDirection: WideString read Get_WindingDirection write Set_WindingDirection;
    property TrimmedOrderType: WideString read Get_TrimmedOrderType write Set_TrimmedOrderType;
    property MasterReelWidth: IXMLMeasurement read Get_MasterReelWidth;
    property ReelDiameter: IXMLMeasurement read Get_ReelDiameter;
    property ReelLength: IXMLMeasurement read Get_ReelLength;
    property MaximumOffcut: IXMLMeasurement read Get_MaximumOffcut;
    property CoreCharacteristics: IXMLCoreCharacteristics read Get_CoreCharacteristics;
    property SlitReel: IXMLSlitReelList read Get_SlitReel;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLSlitReel }

  IXMLSlitReel = interface(IXMLNode)
    ['{150E8A16-157B-4AD1-9CA0-6EBA9A45DC1E}']
    { Property Accessors }
    function Get_DeliveryIndicator: WideString;
    function Get_SlitReelLineNumber: LongWord;
    function Get_SlitReelWidth: IXMLMeasurement;
    function Get_SlitReelOrderQuantity: IXMLSlitReelOrderQuantity;
    function Get_SlitReelsInSet: LongWord;
    function Get_SlitReelReference: IXMLSlitReelReferenceList;
    procedure Set_DeliveryIndicator(Value: WideString);
    procedure Set_SlitReelLineNumber(Value: LongWord);
    procedure Set_SlitReelsInSet(Value: LongWord);
    { Methods & Properties }
    property DeliveryIndicator: WideString read Get_DeliveryIndicator write Set_DeliveryIndicator;
    property SlitReelLineNumber: LongWord read Get_SlitReelLineNumber write Set_SlitReelLineNumber;
    property SlitReelWidth: IXMLMeasurement read Get_SlitReelWidth;
    property SlitReelOrderQuantity: IXMLSlitReelOrderQuantity read Get_SlitReelOrderQuantity;
    property SlitReelsInSet: LongWord read Get_SlitReelsInSet write Set_SlitReelsInSet;
    property SlitReelReference: IXMLSlitReelReferenceList read Get_SlitReelReference;
  end;

{ IXMLSlitReelList }

  IXMLSlitReelList = interface(IXMLNodeCollection)
    ['{F2FEBD75-319B-4AA5-8450-524EBA79D3BF}']
    { Methods & Properties }
    function Add: IXMLSlitReel;
    function Insert(const Index: Integer): IXMLSlitReel;
    function Get_Item(Index: Integer): IXMLSlitReel;
    property Items[Index: Integer]: IXMLSlitReel read Get_Item; default;
  end;

{ IXMLSlitReelOrderQuantity }

  IXMLSlitReelOrderQuantity = interface(IXMLMeasurement)
    ['{E0010451-0416-40A4-B327-14A207035F42}']
    { Property Accessors }
    function Get_QuantityType: WideString;
    function Get_QuantityTypeContext: WideString;
    function Get_AdjustmentType: WideString;
    procedure Set_QuantityType(Value: WideString);
    procedure Set_QuantityTypeContext(Value: WideString);
    procedure Set_AdjustmentType(Value: WideString);
    { Methods & Properties }
    property QuantityType: WideString read Get_QuantityType write Set_QuantityType;
    property QuantityTypeContext: WideString read Get_QuantityTypeContext write Set_QuantityTypeContext;
    property AdjustmentType: WideString read Get_AdjustmentType write Set_AdjustmentType;
  end;

{ IXMLSlitReelReference }

  IXMLSlitReelReference = interface(IXMLNode)
    ['{1695087D-C3DC-4413-AD1A-5411332C072C}']
    { Property Accessors }
    function Get_SlitReelReferenceType: WideString;
    function Get_AssignedBy: WideString;
    procedure Set_SlitReelReferenceType(Value: WideString);
    procedure Set_AssignedBy(Value: WideString);
    { Methods & Properties }
    property SlitReelReferenceType: WideString read Get_SlitReelReferenceType write Set_SlitReelReferenceType;
    property AssignedBy: WideString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLSlitReelReferenceList }

  IXMLSlitReelReferenceList = interface(IXMLNodeCollection)
    ['{18D913EE-4694-4577-83E8-A7D8B8B0681E}']
    { Methods & Properties }
    function Add: IXMLSlitReelReference;
    function Insert(const Index: Integer): IXMLSlitReelReference;
    function Get_Item(Index: Integer): IXMLSlitReelReference;
    property Items[Index: Integer]: IXMLSlitReelReference read Get_Item; default;
  end;

{ IXMLSheet }

  IXMLSheet = interface(IXMLNode)
    ['{2A08C224-B045-4C4C-97BF-04E6002C10C6}']
    { Property Accessors }
    function Get_SheetConversionCharacteristics: IXMLSheetConversionCharacteristicsClass;
    function Get_SheetPackagingCharacteristics: IXMLSheetPackagingCharacteristicsClass;
    { Methods & Properties }
    property SheetConversionCharacteristics: IXMLSheetConversionCharacteristicsClass read Get_SheetConversionCharacteristics;
    property SheetPackagingCharacteristics: IXMLSheetPackagingCharacteristicsClass read Get_SheetPackagingCharacteristics;
  end;

{ IXMLSheetConversionCharacteristicsClass }

  IXMLSheetConversionCharacteristicsClass = interface(IXMLNode)
    ['{795C3177-C39B-4ACD-832A-6F3B0B712368}']
    { Property Accessors }
    function Get_ConversionCode: IXMLConversionCode;
    function Get_GrainDirection: WideString;
    function Get_WindingDirection: WideString;
    function Get_SheetSize: IXMLSheetSizeList;
    function Get_TargetProductWeight: IXMLMeasurement;
    function Get_PunchedHoleDetails: IXMLPunchedHoleDetailsList;
    function Get_CuttingDetails: IXMLCuttingDetailsList;
    function Get_Embossing: IXMLEmbossingList;
    function Get_Watermark: IXMLWatermarkList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_GrainDirection(Value: WideString);
    procedure Set_WindingDirection(Value: WideString);
    { Methods & Properties }
    property ConversionCode: IXMLConversionCode read Get_ConversionCode;
    property GrainDirection: WideString read Get_GrainDirection write Set_GrainDirection;
    property WindingDirection: WideString read Get_WindingDirection write Set_WindingDirection;
    property SheetSize: IXMLSheetSizeList read Get_SheetSize;
    property TargetProductWeight: IXMLMeasurement read Get_TargetProductWeight;
    property PunchedHoleDetails: IXMLPunchedHoleDetailsList read Get_PunchedHoleDetails;
    property CuttingDetails: IXMLCuttingDetailsList read Get_CuttingDetails;
    property Embossing: IXMLEmbossingList read Get_Embossing;
    property Watermark: IXMLWatermarkList read Get_Watermark;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLConversionCode }

  IXMLConversionCode = interface(IXMLNode)
    ['{8DAD87BE-92B6-46C0-BB3D-C340143B5232}']
    { Property Accessors }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
  end;

{ IXMLSheetSize }

  IXMLSheetSize = interface(IXMLNode)
    ['{F4B8A3C2-3895-40B4-BE31-5AFBD6441941}']
    { Property Accessors }
    function Get_Length: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_PaperSizeType: WideString;
    procedure Set_PaperSizeType(Value: WideString);
    { Methods & Properties }
    property Length: IXMLMeasurement read Get_Length;
    property Width: IXMLMeasurement read Get_Width;
    property PaperSizeType: WideString read Get_PaperSizeType write Set_PaperSizeType;
  end;

{ IXMLSheetSizeList }

  IXMLSheetSizeList = interface(IXMLNodeCollection)
    ['{ED9E2B22-4CFB-43E2-91C4-FA04BF62BCFA}']
    { Methods & Properties }
    function Add: IXMLSheetSize;
    function Insert(const Index: Integer): IXMLSheetSize;
    function Get_Item(Index: Integer): IXMLSheetSize;
    property Items[Index: Integer]: IXMLSheetSize read Get_Item; default;
  end;

{ IXMLPunchedHoleDetails }

  IXMLPunchedHoleDetails = interface(IXMLNode)
    ['{D945B185-554C-44C8-BAA7-3B06BEE8B920}']
    { Property Accessors }
    function Get_NumberOfHoles: IXMLNumberOfHoles;
    function Get_HoleReinforcement: WideString;
    function Get_HolePunchType: WideString;
    function Get_StandardSpacing: WideString;
    function Get_SizeOfHolePunch: IXMLSizeOfHolePunch;
    function Get_HoleSpacing: IXMLHoleSpacing;
    function Get_DistanceFromEdge: IXMLDistanceFromEdgeList;
    function Get_HolePunchTemplateReference: IXMLHolePunchTemplateReferenceTypeList;
    procedure Set_HoleReinforcement(Value: WideString);
    procedure Set_HolePunchType(Value: WideString);
    procedure Set_StandardSpacing(Value: WideString);
    { Methods & Properties }
    property NumberOfHoles: IXMLNumberOfHoles read Get_NumberOfHoles;
    property HoleReinforcement: WideString read Get_HoleReinforcement write Set_HoleReinforcement;
    property HolePunchType: WideString read Get_HolePunchType write Set_HolePunchType;
    property StandardSpacing: WideString read Get_StandardSpacing write Set_StandardSpacing;
    property SizeOfHolePunch: IXMLSizeOfHolePunch read Get_SizeOfHolePunch;
    property HoleSpacing: IXMLHoleSpacing read Get_HoleSpacing;
    property DistanceFromEdge: IXMLDistanceFromEdgeList read Get_DistanceFromEdge;
    property HolePunchTemplateReference: IXMLHolePunchTemplateReferenceTypeList read Get_HolePunchTemplateReference;
  end;

{ IXMLPunchedHoleDetailsList }

  IXMLPunchedHoleDetailsList = interface(IXMLNodeCollection)
    ['{929B32C4-81DC-4A0B-A69F-CE05976C09F8}']
    { Methods & Properties }
    function Add: IXMLPunchedHoleDetails;
    function Insert(const Index: Integer): IXMLPunchedHoleDetails;
    function Get_Item(Index: Integer): IXMLPunchedHoleDetails;
    property Items[Index: Integer]: IXMLPunchedHoleDetails read Get_Item; default;
  end;

{ IXMLNumberOfHoles }

  IXMLNumberOfHoles = interface(IXMLNode)
    ['{09AA2C4E-C574-4EFC-8B4D-E4BD6F6714CF}']
  end;

{ IXMLSizeOfHolePunch }

  IXMLSizeOfHolePunch = interface(IXMLMeasurement)
    ['{D4D56B9E-BAA7-4772-BC35-C97B920DB91B}']
    { Property Accessors }
    function Get_ShapeOfHole: WideString;
    procedure Set_ShapeOfHole(Value: WideString);
    { Methods & Properties }
    property ShapeOfHole: WideString read Get_ShapeOfHole write Set_ShapeOfHole;
  end;

{ IXMLHoleSpacing }

  IXMLHoleSpacing = interface(IXMLNode)
    ['{4614BD1B-BDFD-4077-A993-EF5F5D5AAF89}']
    { Property Accessors }
    function Get_EvenSpacing: IXMLEvenSpacing;
    function Get_UnevenSpacing: WideString;
    procedure Set_UnevenSpacing(Value: WideString);
    { Methods & Properties }
    property EvenSpacing: IXMLEvenSpacing read Get_EvenSpacing;
    property UnevenSpacing: WideString read Get_UnevenSpacing write Set_UnevenSpacing;
  end;

{ IXMLEvenSpacing }

  IXMLEvenSpacing = interface(IXMLNode)
    ['{B4FB067B-C665-473D-B540-12068095ADA3}']
    { Property Accessors }
    function Get_Value: IXMLValue;
    { Methods & Properties }
    property Value: IXMLValue read Get_Value;
  end;

{ IXMLDistanceFromEdge }

  IXMLDistanceFromEdge = interface(IXMLMeasurement)
    ['{849B226A-B086-4A45-A8B7-D660952EA76D}']
    { Property Accessors }
    function Get_EdgeType: WideString;
    procedure Set_EdgeType(Value: WideString);
    { Methods & Properties }
    property EdgeType: WideString read Get_EdgeType write Set_EdgeType;
  end;

{ IXMLDistanceFromEdgeList }

  IXMLDistanceFromEdgeList = interface(IXMLNodeCollection)
    ['{5E0A1F66-395A-49BB-865D-81D9F9357D9B}']
    { Methods & Properties }
    function Add: IXMLDistanceFromEdge;
    function Insert(const Index: Integer): IXMLDistanceFromEdge;
    function Get_Item(Index: Integer): IXMLDistanceFromEdge;
    property Items[Index: Integer]: IXMLDistanceFromEdge read Get_Item; default;
  end;

{ IXMLCuttingDetails }

  IXMLCuttingDetails = interface(IXMLNode)
    ['{314259B4-A6CB-487C-8D6B-E841033FF65A}']
    { Property Accessors }
    function Get_CuttingTemplateCode: IXMLCuttingTemplateCode;
    function Get_AdditionalText: IXMLS255List;
    { Methods & Properties }
    property CuttingTemplateCode: IXMLCuttingTemplateCode read Get_CuttingTemplateCode;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLCuttingDetailsList }

  IXMLCuttingDetailsList = interface(IXMLNodeCollection)
    ['{44A9638C-9258-4424-B576-99DAA9B81141}']
    { Methods & Properties }
    function Add: IXMLCuttingDetails;
    function Insert(const Index: Integer): IXMLCuttingDetails;
    function Get_Item(Index: Integer): IXMLCuttingDetails;
    property Items[Index: Integer]: IXMLCuttingDetails read Get_Item; default;
  end;

{ IXMLCuttingTemplateCode }

  IXMLCuttingTemplateCode = interface(IXMLNode)
    ['{0CE5B27A-7732-459E-8260-CBC34CF1C313}']
    { Property Accessors }
    function Get_AssignedBy: WideString;
    function Get_Agency: WideString;
    procedure Set_AssignedBy(Value: WideString);
    procedure Set_Agency(Value: WideString);
    { Methods & Properties }
    property AssignedBy: WideString read Get_AssignedBy write Set_AssignedBy;
    property Agency: WideString read Get_Agency write Set_Agency;
  end;

{ IXMLEmbossing }

  IXMLEmbossing = interface(IXMLNode)
    ['{C88ED41A-382D-4721-B57F-CD073B12E786}']
    { Property Accessors }
    function Get_EmbossingCode: IXMLEmbossingCode;
    function Get_EmbossingDescription: IXMLS60List;
    { Methods & Properties }
    property EmbossingCode: IXMLEmbossingCode read Get_EmbossingCode;
    property EmbossingDescription: IXMLS60List read Get_EmbossingDescription;
  end;

{ IXMLEmbossingList }

  IXMLEmbossingList = interface(IXMLNodeCollection)
    ['{E2ECDA66-5D27-4865-B4B1-5004B1F1A7B5}']
    { Methods & Properties }
    function Add: IXMLEmbossing;
    function Insert(const Index: Integer): IXMLEmbossing;
    function Get_Item(Index: Integer): IXMLEmbossing;
    property Items[Index: Integer]: IXMLEmbossing read Get_Item; default;
  end;

{ IXMLEmbossingCode }

  IXMLEmbossingCode = interface(IXMLNode)
    ['{E62D8736-D786-40FA-AE32-DBB2D65EE71D}']
    { Property Accessors }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
  end;

{ IXMLWatermark }

  IXMLWatermark = interface(IXMLNode)
    ['{3235781E-C985-46DC-B61F-341617DFEC7F}']
    { Property Accessors }
    function Get_WatermarkCode: IXMLWatermarkCode;
    function Get_WatermarkDescription: IXMLS60List;
    { Methods & Properties }
    property WatermarkCode: IXMLWatermarkCode read Get_WatermarkCode;
    property WatermarkDescription: IXMLS60List read Get_WatermarkDescription;
  end;

{ IXMLWatermarkList }

  IXMLWatermarkList = interface(IXMLNodeCollection)
    ['{02826532-A702-4570-A751-21F3B55DF13D}']
    { Methods & Properties }
    function Add: IXMLWatermark;
    function Insert(const Index: Integer): IXMLWatermark;
    function Get_Item(Index: Integer): IXMLWatermark;
    property Items[Index: Integer]: IXMLWatermark read Get_Item; default;
  end;

{ IXMLWatermarkCode }

  IXMLWatermarkCode = interface(IXMLNode)
    ['{D2B54123-B1E3-4E3C-AC8A-7BF6C079904A}']
    { Property Accessors }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
  end;

{ IXMLSheetPackagingCharacteristicsClass }

  IXMLSheetPackagingCharacteristicsClass = interface(IXMLNode)
    ['{2EAF1200-1BB2-414E-9387-D230CFFD6911}']
    { Property Accessors }
    function Get_ActionType: WideString;
    function Get_PackagingCode: IXMLPackagingCodeList;
    function Get_PackagingDescription: IXMLPackagingDescriptionList;
    function Get_ReamType: IXMLReamTypeList;
    function Get_ReamWeight: IXMLMeasurementList;
    function Get_SheetCount: IXMLSheetCountList;
    function Get_Wrap: IXMLWrapList;
    function Get_BandCharacteristics: IXMLBandCharacteristicsList;
    function Get_PalletCharacteristics: IXMLPalletCharacteristicsList;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_MaximumHeight: IXMLMeasurement;
    function Get_MaximumGrossWeight: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ActionType(Value: WideString);
    { Methods & Properties }
    property ActionType: WideString read Get_ActionType write Set_ActionType;
    property PackagingCode: IXMLPackagingCodeList read Get_PackagingCode;
    property PackagingDescription: IXMLPackagingDescriptionList read Get_PackagingDescription;
    property ReamType: IXMLReamTypeList read Get_ReamType;
    property ReamWeight: IXMLMeasurementList read Get_ReamWeight;
    property SheetCount: IXMLSheetCountList read Get_SheetCount;
    property Wrap: IXMLWrapList read Get_Wrap;
    property BandCharacteristics: IXMLBandCharacteristicsList read Get_BandCharacteristics;
    property PalletCharacteristics: IXMLPalletCharacteristicsList read Get_PalletCharacteristics;
    property LabelCharacteristics: IXMLLabelCharacteristicsList read Get_LabelCharacteristics;
    property StencilCharacteristics: IXMLStencilCharacteristicsList read Get_StencilCharacteristics;
    property MaximumHeight: IXMLMeasurement read Get_MaximumHeight;
    property MaximumGrossWeight: IXMLMeasurement read Get_MaximumGrossWeight;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLSheetCount }

  IXMLSheetCount = interface(IXMLNode)
    ['{16453EE2-3878-4DF8-A984-1DD5B6E8680F}']
    { Property Accessors }
    function Get_SheetCountMethodType: WideString;
    function Get_PerCarton: LongWord;
    function Get_PerReam: LongWord;
    function Get_PerPallet: LongWord;
    function Get_PerTab: LongWord;
    procedure Set_SheetCountMethodType(Value: WideString);
    procedure Set_PerCarton(Value: LongWord);
    procedure Set_PerReam(Value: LongWord);
    procedure Set_PerPallet(Value: LongWord);
    procedure Set_PerTab(Value: LongWord);
    { Methods & Properties }
    property SheetCountMethodType: WideString read Get_SheetCountMethodType write Set_SheetCountMethodType;
    property PerCarton: LongWord read Get_PerCarton write Set_PerCarton;
    property PerReam: LongWord read Get_PerReam write Set_PerReam;
    property PerPallet: LongWord read Get_PerPallet write Set_PerPallet;
    property PerTab: LongWord read Get_PerTab write Set_PerTab;
  end;

{ IXMLSheetCountList }

  IXMLSheetCountList = interface(IXMLNodeCollection)
    ['{F9858921-8C5A-4E41-8AFE-B88C4E936282}']
    { Methods & Properties }
    function Add: IXMLSheetCount;
    function Insert(const Index: Integer): IXMLSheetCount;
    function Get_Item(Index: Integer): IXMLSheetCount;
    property Items[Index: Integer]: IXMLSheetCount read Get_Item; default;
  end;

{ IXMLPaper }

  IXMLPaper = interface(IXMLNode)
    ['{5F0AA3C0-8931-450B-82C3-5D200334BBF7}']
    { Property Accessors }
    function Get_PaperCharacteristics: IXMLPaperCharacteristics;
    function Get_Reel: IXMLReel;
    function Get_Sheet: IXMLSheet;
    { Methods & Properties }
    property PaperCharacteristics: IXMLPaperCharacteristics read Get_PaperCharacteristics;
    property Reel: IXMLReel read Get_Reel;
    property Sheet: IXMLSheet read Get_Sheet;
  end;

{ IXMLPaperCharacteristics }

  IXMLPaperCharacteristics = interface(IXMLNode)
    ['{533CEC7B-02CF-46FB-BDB1-7DC1E0585ED4}']
    { Property Accessors }
    function Get_CoatingTop: WideString;
    function Get_CoatingBottom: WideString;
    function Get_FinishType: WideString;
    function Get_PrintType: WideString;
    function Get_Abrasion: IXMLAbrasionList;
    function Get_AbsorptionInk: IXMLAbsorptionInkList;
    function Get_AbsorptionLight: IXMLAbsorptionLightList;
    function Get_AbsorptionWater: IXMLAbsorptionWaterList;
    function Get_Appearance: IXMLAppearanceList;
    function Get_Ash: IXMLAshList;
    function Get_BasisWeight: IXMLBasisWeightList;
    function Get_BendingResistance: IXMLBendingResistanceList;
    function Get_BendingStiffness: IXMLBendingStiffnessList;
    function Get_Brightness: IXMLBrightnessList;
    function Get_Bulk: IXMLBulkList;
    function Get_Burst: IXMLBurstList;
    function Get_BurstIndex: IXMLBurstIndexList;
    function Get_Caliper: IXMLCaliperList;
    function Get_CoatWeight: IXMLCoatWeightList;
    function Get_ColourDetail: IXMLColourDetailList;
    function Get_Density: IXMLDensityList;
    function Get_Dirt: IXMLDirtList;
    function Get_DominantWavelength: IXMLDominantWavelengthList;
    function Get_ExcitationPurity: IXMLExcitationPurityList;
    function Get_FibreLength: IXMLFibreLengthList;
    function Get_FibreClassification: IXMLFibreClassificationList;
    function Get_Folding: IXMLFoldingList;
    function Get_Formation: IXMLFormationList;
    function Get_Freeness: IXMLFreenessList;
    function Get_Friction: IXMLFrictionList;
    function Get_Gloss: IXMLGlossList;
    function Get_LightScattering: IXMLLightScatteringList;
    function Get_Luminance: IXMLLuminanceList;
    function Get_Moisture: IXMLMoistureList;
    function Get_Mullen: IXMLMullenList;
    function Get_Opacity: IXMLOpacityList;
    function Get_Permeability: IXMLPermeabilityList;
    function Get_PH: IXMLPHList;
    function Get_PlyBond: IXMLPlyBondList;
    function Get_Porosity: IXMLPorosityList;
    function Get_PostConsumerWaste: IXMLPostConsumerWasteList;
    function Get_PPI: IXMLMeasurementList;
    function Get_PreConsumerWaste: IXMLPreConsumerWasteList;
    function Get_Recycled: IXMLRecycledList;
    function Get_Resistance: IXMLResistanceList;
    function Get_RingCrush: IXMLRingCrushList;
    function Get_Roughness: IXMLRoughnessList;
    function Get_RunnabilityIndex: IXMLRunnabilityIndexList;
    function Get_ShowThrough: IXMLShowThroughList;
    function Get_Sizing: IXMLSizingList;
    function Get_Smoothness: IXMLSmoothnessList;
    function Get_Stiffness: IXMLStiffnessList;
    function Get_Stretch: IXMLStretchList;
    function Get_SurfaceStrength: IXMLSurfaceStrengthList;
    function Get_TEA: IXMLTEAList;
    function Get_Tear: IXMLTearList;
    function Get_TearIndex: IXMLTearIndexList;
    function Get_Tensile: IXMLTensileList;
    function Get_TensileIndex: IXMLTensileIndexList;
    function Get_Whiteness: IXMLWhitenessList;
    function Get_AdditionalTest: IXMLAdditionalTest;
    function Get_NumberOfPlies: IXMLNni1List;
    function Get_PlyAttributes: IXMLPlyAttributesList;
    function Get_PlySet: IXMLPlySetList;
    procedure Set_CoatingTop(Value: WideString);
    procedure Set_CoatingBottom(Value: WideString);
    procedure Set_FinishType(Value: WideString);
    procedure Set_PrintType(Value: WideString);
    { Methods & Properties }
    property CoatingTop: WideString read Get_CoatingTop write Set_CoatingTop;
    property CoatingBottom: WideString read Get_CoatingBottom write Set_CoatingBottom;
    property FinishType: WideString read Get_FinishType write Set_FinishType;
    property PrintType: WideString read Get_PrintType write Set_PrintType;
    property Abrasion: IXMLAbrasionList read Get_Abrasion;
    property AbsorptionInk: IXMLAbsorptionInkList read Get_AbsorptionInk;
    property AbsorptionLight: IXMLAbsorptionLightList read Get_AbsorptionLight;
    property AbsorptionWater: IXMLAbsorptionWaterList read Get_AbsorptionWater;
    property Appearance: IXMLAppearanceList read Get_Appearance;
    property Ash: IXMLAshList read Get_Ash;
    property BasisWeight: IXMLBasisWeightList read Get_BasisWeight;
    property BendingResistance: IXMLBendingResistanceList read Get_BendingResistance;
    property BendingStiffness: IXMLBendingStiffnessList read Get_BendingStiffness;
    property Brightness: IXMLBrightnessList read Get_Brightness;
    property Bulk: IXMLBulkList read Get_Bulk;
    property Burst: IXMLBurstList read Get_Burst;
    property BurstIndex: IXMLBurstIndexList read Get_BurstIndex;
    property Caliper: IXMLCaliperList read Get_Caliper;
    property CoatWeight: IXMLCoatWeightList read Get_CoatWeight;
    property ColourDetail: IXMLColourDetailList read Get_ColourDetail;
    property Density: IXMLDensityList read Get_Density;
    property Dirt: IXMLDirtList read Get_Dirt;
    property DominantWavelength: IXMLDominantWavelengthList read Get_DominantWavelength;
    property ExcitationPurity: IXMLExcitationPurityList read Get_ExcitationPurity;
    property FibreLength: IXMLFibreLengthList read Get_FibreLength;
    property FibreClassification: IXMLFibreClassificationList read Get_FibreClassification;
    property Folding: IXMLFoldingList read Get_Folding;
    property Formation: IXMLFormationList read Get_Formation;
    property Freeness: IXMLFreenessList read Get_Freeness;
    property Friction: IXMLFrictionList read Get_Friction;
    property Gloss: IXMLGlossList read Get_Gloss;
    property LightScattering: IXMLLightScatteringList read Get_LightScattering;
    property Luminance: IXMLLuminanceList read Get_Luminance;
    property Moisture: IXMLMoistureList read Get_Moisture;
    property Mullen: IXMLMullenList read Get_Mullen;
    property Opacity: IXMLOpacityList read Get_Opacity;
    property Permeability: IXMLPermeabilityList read Get_Permeability;
    property PH: IXMLPHList read Get_PH;
    property PlyBond: IXMLPlyBondList read Get_PlyBond;
    property Porosity: IXMLPorosityList read Get_Porosity;
    property PostConsumerWaste: IXMLPostConsumerWasteList read Get_PostConsumerWaste;
    property PPI: IXMLMeasurementList read Get_PPI;
    property PreConsumerWaste: IXMLPreConsumerWasteList read Get_PreConsumerWaste;
    property Recycled: IXMLRecycledList read Get_Recycled;
    property Resistance: IXMLResistanceList read Get_Resistance;
    property RingCrush: IXMLRingCrushList read Get_RingCrush;
    property Roughness: IXMLRoughnessList read Get_Roughness;
    property RunnabilityIndex: IXMLRunnabilityIndexList read Get_RunnabilityIndex;
    property ShowThrough: IXMLShowThroughList read Get_ShowThrough;
    property Sizing: IXMLSizingList read Get_Sizing;
    property Smoothness: IXMLSmoothnessList read Get_Smoothness;
    property Stiffness: IXMLStiffnessList read Get_Stiffness;
    property Stretch: IXMLStretchList read Get_Stretch;
    property SurfaceStrength: IXMLSurfaceStrengthList read Get_SurfaceStrength;
    property TEA: IXMLTEAList read Get_TEA;
    property Tear: IXMLTearList read Get_Tear;
    property TearIndex: IXMLTearIndexList read Get_TearIndex;
    property Tensile: IXMLTensileList read Get_Tensile;
    property TensileIndex: IXMLTensileIndexList read Get_TensileIndex;
    property Whiteness: IXMLWhitenessList read Get_Whiteness;
    property AdditionalTest: IXMLAdditionalTest read Get_AdditionalTest;
    property NumberOfPlies: IXMLNni1List read Get_NumberOfPlies;
    property PlyAttributes: IXMLPlyAttributesList read Get_PlyAttributes;
    property PlySet: IXMLPlySetList read Get_PlySet;
  end;

{ IXMLAbrasion }

  IXMLAbrasion = interface(IXMLDetailMeasurement)
    ['{7E64A080-5BFB-4091-B482-AAAA2C7BE462}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLAbrasionList }

  IXMLAbrasionList = interface(IXMLNodeCollection)
    ['{65C4C7AF-D9DF-4E8A-8402-578F4748E89D}']
    { Methods & Properties }
    function Add: IXMLAbrasion;
    function Insert(const Index: Integer): IXMLAbrasion;
    function Get_Item(Index: Integer): IXMLAbrasion;
    property Items[Index: Integer]: IXMLAbrasion read Get_Item; default;
  end;

{ IXMLAbsorptionInk }

  IXMLAbsorptionInk = interface(IXMLDetailMeasurement)
    ['{A2FB2BAA-4865-4650-8791-AE320B9305D8}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLAbsorptionInkList }

  IXMLAbsorptionInkList = interface(IXMLNodeCollection)
    ['{24372E41-F5D3-46D5-9076-2E40CE4BC807}']
    { Methods & Properties }
    function Add: IXMLAbsorptionInk;
    function Insert(const Index: Integer): IXMLAbsorptionInk;
    function Get_Item(Index: Integer): IXMLAbsorptionInk;
    property Items[Index: Integer]: IXMLAbsorptionInk read Get_Item; default;
  end;

{ IXMLAbsorptionLight }

  IXMLAbsorptionLight = interface(IXMLDetailMeasurement)
    ['{3854C604-36DF-40A7-8DB8-3D60D1FA2047}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLAbsorptionLightList }

  IXMLAbsorptionLightList = interface(IXMLNodeCollection)
    ['{549B7AF6-079C-409E-8450-43945AE37EEC}']
    { Methods & Properties }
    function Add: IXMLAbsorptionLight;
    function Insert(const Index: Integer): IXMLAbsorptionLight;
    function Get_Item(Index: Integer): IXMLAbsorptionLight;
    property Items[Index: Integer]: IXMLAbsorptionLight read Get_Item; default;
  end;

{ IXMLAbsorptionWater }

  IXMLAbsorptionWater = interface(IXMLDetailMeasurement)
    ['{055A0831-6939-4E23-A1A8-0FF84DADFFF1}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLAbsorptionWaterList }

  IXMLAbsorptionWaterList = interface(IXMLNodeCollection)
    ['{6EFC39DC-D86F-4DA5-8177-0EF988889E74}']
    { Methods & Properties }
    function Add: IXMLAbsorptionWater;
    function Insert(const Index: Integer): IXMLAbsorptionWater;
    function Get_Item(Index: Integer): IXMLAbsorptionWater;
    property Items[Index: Integer]: IXMLAbsorptionWater read Get_Item; default;
  end;

{ IXMLAppearance }

  IXMLAppearance = interface(IXMLDetailMeasurement)
    ['{4B6C25FB-222D-4A2D-9C66-7AF5AC90D674}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLAppearanceList }

  IXMLAppearanceList = interface(IXMLNodeCollection)
    ['{69899356-3EDB-44C8-936F-87BB58AE4880}']
    { Methods & Properties }
    function Add: IXMLAppearance;
    function Insert(const Index: Integer): IXMLAppearance;
    function Get_Item(Index: Integer): IXMLAppearance;
    property Items[Index: Integer]: IXMLAppearance read Get_Item; default;
  end;

{ IXMLAsh }

  IXMLAsh = interface(IXMLDetailMeasurement)
    ['{3B37A6FC-E7E0-4461-B885-EF357A50DA2A}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLAshList }

  IXMLAshList = interface(IXMLNodeCollection)
    ['{AAD12BCD-E361-4F2C-A81E-66D1DA4D5EC9}']
    { Methods & Properties }
    function Add: IXMLAsh;
    function Insert(const Index: Integer): IXMLAsh;
    function Get_Item(Index: Integer): IXMLAsh;
    property Items[Index: Integer]: IXMLAsh read Get_Item; default;
  end;

{ IXMLBasisWeight }

  IXMLBasisWeight = interface(IXMLNode) //XMLBasisWeight)
    ['{B53691DE-053C-470C-91F5-522747544641}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLBasisWeightList }

  IXMLBasisWeightList = interface(IXMLNodeCollection)
    ['{19E13007-D483-4791-B53D-1876DA766491}']
    { Methods & Properties }
    function Add: IXMLBasisWeight;
    function Insert(const Index: Integer): IXMLBasisWeight;
    function Get_Item(Index: Integer): IXMLBasisWeight;
    property Items[Index: Integer]: IXMLBasisWeight read Get_Item; default;
  end;

{ IXMLBendingResistance }

  IXMLBendingResistance = interface(IXMLDetailMeasurement)
    ['{A7265650-FFE7-4E35-BCAA-E0915354D713}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLBendingResistanceList }

  IXMLBendingResistanceList = interface(IXMLNodeCollection)
    ['{07150D85-5D45-42BC-BFFB-549BDFEE6FB0}']
    { Methods & Properties }
    function Add: IXMLBendingResistance;
    function Insert(const Index: Integer): IXMLBendingResistance;
    function Get_Item(Index: Integer): IXMLBendingResistance;
    property Items[Index: Integer]: IXMLBendingResistance read Get_Item; default;
  end;

{ IXMLBendingStiffness }

  IXMLBendingStiffness = interface(IXMLDetailMeasurement)
    ['{9A07F517-50D9-419F-AD1E-352A4ACF7179}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLBendingStiffnessList }

  IXMLBendingStiffnessList = interface(IXMLNodeCollection)
    ['{90194768-145A-43D8-B4DD-FB9CC13929C2}']
    { Methods & Properties }
    function Add: IXMLBendingStiffness;
    function Insert(const Index: Integer): IXMLBendingStiffness;
    function Get_Item(Index: Integer): IXMLBendingStiffness;
    property Items[Index: Integer]: IXMLBendingStiffness read Get_Item; default;
  end;

{ IXMLBrightness }

  IXMLBrightness = interface(IXMLDetailMeasurement)
    ['{62579F74-65BF-4B81-BA86-587E4C6BA970}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLBrightnessList }

  IXMLBrightnessList = interface(IXMLNodeCollection)
    ['{FA2C705D-F468-481A-AD6F-F36B191D8290}']
    { Methods & Properties }
    function Add: IXMLBrightness;
    function Insert(const Index: Integer): IXMLBrightness;
    function Get_Item(Index: Integer): IXMLBrightness;
    property Items[Index: Integer]: IXMLBrightness read Get_Item; default;
  end;

{ IXMLBulk }

  IXMLBulk = interface(IXMLDetailMeasurement)
    ['{959F825F-68AA-48CB-BFB1-946B109E57B0}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLBulkList }

  IXMLBulkList = interface(IXMLNodeCollection)
    ['{A537C6E7-BFF1-44AF-9196-387482F8CB3F}']
    { Methods & Properties }
    function Add: IXMLBulk;
    function Insert(const Index: Integer): IXMLBulk;
    function Get_Item(Index: Integer): IXMLBulk;
    property Items[Index: Integer]: IXMLBulk read Get_Item; default;
  end;

{ IXMLCaliper }

  IXMLCaliper = interface(IXMLDetailMeasurement)
    ['{6542B6D8-9205-4DE2-A8A3-190FFE6588F0}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLCaliperList }

  IXMLCaliperList = interface(IXMLNodeCollection)
    ['{9BECF9C8-1511-463B-B7DC-FD3937F87BE4}']
    { Methods & Properties }
    function Add: IXMLCaliper;
    function Insert(const Index: Integer): IXMLCaliper;
    function Get_Item(Index: Integer): IXMLCaliper;
    property Items[Index: Integer]: IXMLCaliper read Get_Item; default;
  end;

{ IXMLCoatWeight }

  IXMLCoatWeight = interface(IXMLDetailMeasurement)
    ['{713CD815-31D8-4BFD-A76E-ADBC96EBD35E}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLCoatWeightList }

  IXMLCoatWeightList = interface(IXMLNodeCollection)
    ['{A6E20272-881B-4B06-BD52-9989CF2D6543}']
    { Methods & Properties }
    function Add: IXMLCoatWeight;
    function Insert(const Index: Integer): IXMLCoatWeight;
    function Get_Item(Index: Integer): IXMLCoatWeight;
    property Items[Index: Integer]: IXMLCoatWeight read Get_Item; default;
  end;

{ IXMLColourDetail }

  IXMLColourDetail = interface(IXMLNode)
    ['{FC436F69-4E90-4542-B0AD-A285D251F125}']
    { Property Accessors }
    function Get_CMYK: IXMLCMYK;
    function Get_ColourShade: IXMLColourShade;
    function Get_HSB: IXMLHSB;
    function Get_Lab: IXMLLab;
    function Get_RGB: IXMLRGB;
    function Get_ColourDescription: IXMLS72List;
    function Get_ColourCode: IXMLColourCode;
    { Methods & Properties }
    property CMYK: IXMLCMYK read Get_CMYK;
    property ColourShade: IXMLColourShade read Get_ColourShade;
    property HSB: IXMLHSB read Get_HSB;
    property Lab: IXMLLab read Get_Lab;
    property RGB: IXMLRGB read Get_RGB;
    property ColourDescription: IXMLS72List read Get_ColourDescription;
    property ColourCode: IXMLColourCode read Get_ColourCode;
  end;

{ IXMLColourDetailList }

  IXMLColourDetailList = interface(IXMLNodeCollection)
    ['{B2FA0EC9-BE2F-42AC-AAA7-A185CB9ED936}']
    { Methods & Properties }
    function Add: IXMLColourDetail;
    function Insert(const Index: Integer): IXMLColourDetail;
    function Get_Item(Index: Integer): IXMLColourDetail;
    property Items[Index: Integer]: IXMLColourDetail read Get_Item; default;
  end;

{ IXMLCMYK }

  IXMLCMYK = interface(IXMLNode)
    ['{DFC78300-1E9A-4207-902E-CABB77ED04F9}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    function Get_Cyan: IXMLDetailMeasurement;
    function Get_Magenta: IXMLDetailMeasurement;
    function Get_Yellow: IXMLDetailMeasurement;
    function Get_Black: IXMLDetailMeasurement;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
    property Cyan: IXMLDetailMeasurement read Get_Cyan;
    property Magenta: IXMLDetailMeasurement read Get_Magenta;
    property Yellow: IXMLDetailMeasurement read Get_Yellow;
    property Black: IXMLDetailMeasurement read Get_Black;
  end;

{ IXMLBurst }

  IXMLBurst = interface(IXMLDetailMeasurement)
    ['{789B882B-A7E9-4509-8EEF-785C86CA76D0}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLBurstList }

  IXMLBurstList = interface(IXMLNodeCollection)
    ['{03F770FA-1C78-4EC3-B39D-EFB9C3C69EC0}']
    { Methods & Properties }
    function Add: IXMLBurst;
    function Insert(const Index: Integer): IXMLBurst;
    function Get_Item(Index: Integer): IXMLBurst;
    property Items[Index: Integer]: IXMLBurst read Get_Item; default;
  end;

{ IXMLDetailValue }

  IXMLDetailValue = interface(IXMLNode)
    ['{2F46A10A-809A-437F-AC50-8219B97015FB}']
    { Property Accessors }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
    { Methods & Properties }
    property UOM: WideString read Get_UOM write Set_UOM;
  end;

{ IXMLDetailRangeMin }

  IXMLDetailRangeMin = interface(IXMLNode)
    ['{18551446-24B2-43F8-B4EA-C18B50F1B587}']
    { Property Accessors }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
    { Methods & Properties }
    property UOM: WideString read Get_UOM write Set_UOM;
  end;

{ IXMLDetailRangeMax }

  IXMLDetailRangeMax = interface(IXMLNode)
    ['{2D27ADBA-1AA7-46F5-8CD5-4C7F314A3679}']
    { Property Accessors }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
    { Methods & Properties }
    property UOM: WideString read Get_UOM write Set_UOM;
  end;

{ IXMLStandardDeviation }

  IXMLStandardDeviation = interface(IXMLNode)
    ['{24D2ED7E-2964-42C5-9F02-D83AF8F0310A}']
    { Property Accessors }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
    { Methods & Properties }
    property UOM: WideString read Get_UOM write Set_UOM;
  end;

{ IXMLTwoSigmaLower }

  IXMLTwoSigmaLower = interface(IXMLNode)
    ['{5F14A1B9-07A2-44EF-A5D6-88861F581F36}']
    { Property Accessors }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
    { Methods & Properties }
    property UOM: WideString read Get_UOM write Set_UOM;
  end;

{ IXMLTwoSigmaUpper }

  IXMLTwoSigmaUpper = interface(IXMLNode)
    ['{7D19919D-D311-4FBF-B665-18000CF20DC3}']
    { Property Accessors }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
    { Methods & Properties }
    property UOM: WideString read Get_UOM write Set_UOM;
  end;

{ IXMLColourShade }

  IXMLColourShade = interface(IXMLNode)
    ['{6D80232A-E4F2-4D46-9517-C9C3CCE996C9}']
    { Property Accessors }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
  end;

{ IXMLHSB }

  IXMLHSB = interface(IXMLNode)
    ['{C724F5F1-9132-4DC3-BC05-9C0525ED356C}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    function Get_Hue: IXMLDetailMeasurement;
    function Get_Saturation: IXMLDetailMeasurement;
    function Get_Brilliance: IXMLDetailMeasurement;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
    property Hue: IXMLDetailMeasurement read Get_Hue;
    property Saturation: IXMLDetailMeasurement read Get_Saturation;
    property Brilliance: IXMLDetailMeasurement read Get_Brilliance;
  end;

{ IXMLLab }

  IXMLLab = interface(IXMLNode)
    ['{0C750387-94F3-441E-91C0-33B6510668BD}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    function Get_L: IXMLDetailMeasurement;
    function Get_A: IXMLDetailMeasurement;
    function Get_B: IXMLDetailMeasurement;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
    property L: IXMLDetailMeasurement read Get_L;
    property A: IXMLDetailMeasurement read Get_A;
    property B: IXMLDetailMeasurement read Get_B;
  end;

{ IXMLRGB }

  IXMLRGB = interface(IXMLNode)
    ['{2329327B-9013-4B4F-A5B6-DCA54D8A0D58}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    function Get_Red: IXMLDetailMeasurement;
    function Get_Green: IXMLDetailMeasurement;
    function Get_Blue: IXMLDetailMeasurement;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
    property Red: IXMLDetailMeasurement read Get_Red;
    property Green: IXMLDetailMeasurement read Get_Green;
    property Blue: IXMLDetailMeasurement read Get_Blue;
  end;

{ IXMLDensity }

  IXMLDensity = interface(IXMLDetailMeasurement)
    ['{C2C74B0D-008A-4612-985C-0CCA9A6758A0}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLDensityList }

  IXMLDensityList = interface(IXMLNodeCollection)
    ['{517367D9-6B36-4C67-8C37-2747C8015994}']
    { Methods & Properties }
    function Add: IXMLDensity;
    function Insert(const Index: Integer): IXMLDensity;
    function Get_Item(Index: Integer): IXMLDensity;
    property Items[Index: Integer]: IXMLDensity read Get_Item; default;
  end;

{ IXMLDirt }

  IXMLDirt = interface(IXMLDetailMeasurement)
    ['{33D420AD-7EDD-4862-9D84-E07C707B5B1A}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLDirtList }

  IXMLDirtList = interface(IXMLNodeCollection)
    ['{66299278-8A19-45F3-9B7F-403D7AA44CBE}']
    { Methods & Properties }
    function Add: IXMLDirt;
    function Insert(const Index: Integer): IXMLDirt;
    function Get_Item(Index: Integer): IXMLDirt;
    property Items[Index: Integer]: IXMLDirt read Get_Item; default;
  end;

{ IXMLDominantWavelength }

  IXMLDominantWavelength = interface(IXMLDetailMeasurement)
    ['{26C00ECC-F4FD-494A-977E-DEBD206CA8E3}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLDominantWavelengthList }

  IXMLDominantWavelengthList = interface(IXMLNodeCollection)
    ['{14D50259-8CD1-4B20-B538-85201121D6B5}']
    { Methods & Properties }
    function Add: IXMLDominantWavelength;
    function Insert(const Index: Integer): IXMLDominantWavelength;
    function Get_Item(Index: Integer): IXMLDominantWavelength;
    property Items[Index: Integer]: IXMLDominantWavelength read Get_Item; default;
  end;

{ IXMLExcitationPurity }

  IXMLExcitationPurity = interface(IXMLDetailMeasurement)
    ['{81A784C8-D0C9-4170-A1AA-68B4966AA3AA}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLExcitationPurityList }

  IXMLExcitationPurityList = interface(IXMLNodeCollection)
    ['{F1EF24ED-F2E5-4501-AE9A-CFF58FA7B053}']
    { Methods & Properties }
    function Add: IXMLExcitationPurity;
    function Insert(const Index: Integer): IXMLExcitationPurity;
    function Get_Item(Index: Integer): IXMLExcitationPurity;
    property Items[Index: Integer]: IXMLExcitationPurity read Get_Item; default;
  end;

{ IXMLFibreLength }

  IXMLFibreLength = interface(IXMLDetailMeasurement)
    ['{C7E4562A-02DF-4ED2-9A9E-3CDB4291CCEE}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLFibreLengthList }

  IXMLFibreLengthList = interface(IXMLNodeCollection)
    ['{670E5ACF-D971-47B5-96A5-E344523D3E16}']
    { Methods & Properties }
    function Add: IXMLFibreLength;
    function Insert(const Index: Integer): IXMLFibreLength;
    function Get_Item(Index: Integer): IXMLFibreLength;
    property Items[Index: Integer]: IXMLFibreLength read Get_Item; default;
  end;

{ IXMLFibreClassification }

  IXMLFibreClassification = interface(IXMLDetailMeasurement)
    ['{B96543B8-AF46-40FA-BD50-7F2BC588151C}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLFibreClassificationList }

  IXMLFibreClassificationList = interface(IXMLNodeCollection)
    ['{325622B9-FF9F-4ACC-B433-2251718AD06D}']
    { Methods & Properties }
    function Add: IXMLFibreClassification;
    function Insert(const Index: Integer): IXMLFibreClassification;
    function Get_Item(Index: Integer): IXMLFibreClassification;
    property Items[Index: Integer]: IXMLFibreClassification read Get_Item; default;
  end;

{ IXMLFolding }

  IXMLFolding = interface(IXMLDetailMeasurement)
    ['{71F3DDAA-FD7B-4F1E-BCFA-F8332362D973}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLFoldingList }

  IXMLFoldingList = interface(IXMLNodeCollection)
    ['{82B1B64E-DCA7-431B-BAE8-9BABD46DF1C8}']
    { Methods & Properties }
    function Add: IXMLFolding;
    function Insert(const Index: Integer): IXMLFolding;
    function Get_Item(Index: Integer): IXMLFolding;
    property Items[Index: Integer]: IXMLFolding read Get_Item; default;
  end;

{ IXMLFormation }

  IXMLFormation = interface(IXMLDetailMeasurement)
    ['{0C2CA820-0E69-444F-ADD3-6617BAA46781}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLFormationList }

  IXMLFormationList = interface(IXMLNodeCollection)
    ['{8893D456-94D2-48D3-A8AE-2B65264D595F}']
    { Methods & Properties }
    function Add: IXMLFormation;
    function Insert(const Index: Integer): IXMLFormation;
    function Get_Item(Index: Integer): IXMLFormation;
    property Items[Index: Integer]: IXMLFormation read Get_Item; default;
  end;

{ IXMLFreeness }

  IXMLFreeness = interface(IXMLDetailMeasurement)
    ['{210A2FC8-C984-4B3C-B3DF-53AB4C9B5C30}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLFreenessList }

  IXMLFreenessList = interface(IXMLNodeCollection)
    ['{E097FAA0-0788-432C-B446-BBC29BF4F75D}']
    { Methods & Properties }
    function Add: IXMLFreeness;
    function Insert(const Index: Integer): IXMLFreeness;
    function Get_Item(Index: Integer): IXMLFreeness;
    property Items[Index: Integer]: IXMLFreeness read Get_Item; default;
  end;

{ IXMLFriction }

  IXMLFriction = interface(IXMLDetailMeasurement)
    ['{38286299-B0B8-446C-B52D-C685E4696627}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLFrictionList }

  IXMLFrictionList = interface(IXMLNodeCollection)
    ['{8AE47AEB-847B-4FDF-81E3-9560AAA8A184}']
    { Methods & Properties }
    function Add: IXMLFriction;
    function Insert(const Index: Integer): IXMLFriction;
    function Get_Item(Index: Integer): IXMLFriction;
    property Items[Index: Integer]: IXMLFriction read Get_Item; default;
  end;

{ IXMLGloss }

  IXMLGloss = interface(IXMLDetailMeasurement)
    ['{56722480-378A-4474-BCB8-D080AB383F67}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLGlossList }

  IXMLGlossList = interface(IXMLNodeCollection)
    ['{9E54261E-95C9-454D-8FD2-6D72047026E0}']
    { Methods & Properties }
    function Add: IXMLGloss;
    function Insert(const Index: Integer): IXMLGloss;
    function Get_Item(Index: Integer): IXMLGloss;
    property Items[Index: Integer]: IXMLGloss read Get_Item; default;
  end;

{ IXMLLightScattering }

  IXMLLightScattering = interface(IXMLDetailMeasurement)
    ['{CD0D4039-9795-4651-9D6E-96C774343D0B}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLLightScatteringList }

  IXMLLightScatteringList = interface(IXMLNodeCollection)
    ['{8431E8D1-BFDE-4A94-8DF9-E6F8EEA76774}']
    { Methods & Properties }
    function Add: IXMLLightScattering;
    function Insert(const Index: Integer): IXMLLightScattering;
    function Get_Item(Index: Integer): IXMLLightScattering;
    property Items[Index: Integer]: IXMLLightScattering read Get_Item; default;
  end;

{ IXMLLuminance }

  IXMLLuminance = interface(IXMLDetailMeasurement)
    ['{B26A450D-EA99-49A9-BC9B-2677C083FFF5}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLLuminanceList }

  IXMLLuminanceList = interface(IXMLNodeCollection)
    ['{CF2D7A36-1474-4F1A-BCCE-E1CA7C719E54}']
    { Methods & Properties }
    function Add: IXMLLuminance;
    function Insert(const Index: Integer): IXMLLuminance;
    function Get_Item(Index: Integer): IXMLLuminance;
    property Items[Index: Integer]: IXMLLuminance read Get_Item; default;
  end;

{ IXMLMoisture }

  IXMLMoisture = interface(IXMLDetailMeasurement)
    ['{3B3F1B4E-E638-4B3A-BFEB-1AD82F0B113E}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLMoistureList }

  IXMLMoistureList = interface(IXMLNodeCollection)
    ['{4E966BC3-F707-4D55-BD77-F77AA2748820}']
    { Methods & Properties }
    function Add: IXMLMoisture;
    function Insert(const Index: Integer): IXMLMoisture;
    function Get_Item(Index: Integer): IXMLMoisture;
    property Items[Index: Integer]: IXMLMoisture read Get_Item; default;
  end;

{ IXMLMullen }

  IXMLMullen = interface(IXMLDetailMeasurement)
    ['{B3972863-0C0F-4D92-9BC5-EAC69A83F1D0}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLMullenList }

  IXMLMullenList = interface(IXMLNodeCollection)
    ['{A6EBFB6F-D615-4CF6-8453-D370B1BD2017}']
    { Methods & Properties }
    function Add: IXMLMullen;
    function Insert(const Index: Integer): IXMLMullen;
    function Get_Item(Index: Integer): IXMLMullen;
    property Items[Index: Integer]: IXMLMullen read Get_Item; default;
  end;

{ IXMLOpacity }

  IXMLOpacity = interface(IXMLDetailMeasurement)
    ['{03E70C54-332A-4ACF-BD9A-ED01FF338462}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLOpacityList }

  IXMLOpacityList = interface(IXMLNodeCollection)
    ['{3EE716F0-D6DF-4F92-88E8-1B81AEDFCF79}']
    { Methods & Properties }
    function Add: IXMLOpacity;
    function Insert(const Index: Integer): IXMLOpacity;
    function Get_Item(Index: Integer): IXMLOpacity;
    property Items[Index: Integer]: IXMLOpacity read Get_Item; default;
  end;

{ IXMLPermeability }

  IXMLPermeability = interface(IXMLDetailMeasurement)
    ['{A5713F46-7CDD-4E00-AC43-F2D57BCA4016}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLPermeabilityList }

  IXMLPermeabilityList = interface(IXMLNodeCollection)
    ['{88FCD723-B818-4937-9AAA-87819E633B11}']
    { Methods & Properties }
    function Add: IXMLPermeability;
    function Insert(const Index: Integer): IXMLPermeability;
    function Get_Item(Index: Integer): IXMLPermeability;
    property Items[Index: Integer]: IXMLPermeability read Get_Item; default;
  end;

{ IXMLPH }

  IXMLPH = interface(IXMLDetailMeasurement)
    ['{05CA9163-D292-47E4-9B43-E2AEAB6153EA}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLPHList }

  IXMLPHList = interface(IXMLNodeCollection)
    ['{5A52628E-D82D-4286-9012-F81D59FBB1DF}']
    { Methods & Properties }
    function Add: IXMLPH;
    function Insert(const Index: Integer): IXMLPH;
    function Get_Item(Index: Integer): IXMLPH;
    property Items[Index: Integer]: IXMLPH read Get_Item; default;
  end;

{ IXMLPlyBond }

  IXMLPlyBond = interface(IXMLDetailMeasurement)
    ['{7F662EE3-9262-4BB8-8F26-D47D2E5D44DE}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLPlyBondList }

  IXMLPlyBondList = interface(IXMLNodeCollection)
    ['{39FE8E6B-F631-4AA4-A2EB-E48D869C1618}']
    { Methods & Properties }
    function Add: IXMLPlyBond;
    function Insert(const Index: Integer): IXMLPlyBond;
    function Get_Item(Index: Integer): IXMLPlyBond;
    property Items[Index: Integer]: IXMLPlyBond read Get_Item; default;
  end;

{ IXMLPorosity }

  IXMLPorosity = interface(IXMLDetailMeasurement)
    ['{A1C309F4-51FB-421D-805F-251483C2392E}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLPorosityList }

  IXMLPorosityList = interface(IXMLNodeCollection)
    ['{B8002A5F-11B7-43E3-8893-9EB14F34707F}']
    { Methods & Properties }
    function Add: IXMLPorosity;
    function Insert(const Index: Integer): IXMLPorosity;
    function Get_Item(Index: Integer): IXMLPorosity;
    property Items[Index: Integer]: IXMLPorosity read Get_Item; default;
  end;

{ IXMLPostConsumerWaste }

  IXMLPostConsumerWaste = interface(IXMLDetailMeasurement)
    ['{A57263E8-B768-4E04-B4E3-3829F8911F8E}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLPostConsumerWasteList }

  IXMLPostConsumerWasteList = interface(IXMLNodeCollection)
    ['{A02CE51B-E0F4-4E50-B7C5-1015EEF263B5}']
    { Methods & Properties }
    function Add: IXMLPostConsumerWaste;
    function Insert(const Index: Integer): IXMLPostConsumerWaste;
    function Get_Item(Index: Integer): IXMLPostConsumerWaste;
    property Items[Index: Integer]: IXMLPostConsumerWaste read Get_Item; default;
  end;

{ IXMLPreConsumerWaste }

  IXMLPreConsumerWaste = interface(IXMLDetailMeasurement)
    ['{EE2F3F50-A784-4258-900B-1DC150CB258C}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLPreConsumerWasteList }

  IXMLPreConsumerWasteList = interface(IXMLNodeCollection)
    ['{C4B4023E-9859-4AA8-8739-7553AD167736}']
    { Methods & Properties }
    function Add: IXMLPreConsumerWaste;
    function Insert(const Index: Integer): IXMLPreConsumerWaste;
    function Get_Item(Index: Integer): IXMLPreConsumerWaste;
    property Items[Index: Integer]: IXMLPreConsumerWaste read Get_Item; default;
  end;

{ IXMLRecycled }

  IXMLRecycled = interface(IXMLDetailMeasurement)
    ['{330EA349-3980-4770-9E98-B34BC81DB9DB}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLRecycledList }

  IXMLRecycledList = interface(IXMLNodeCollection)
    ['{6CAEA093-5380-4880-B07B-6D3C708C336C}']
    { Methods & Properties }
    function Add: IXMLRecycled;
    function Insert(const Index: Integer): IXMLRecycled;
    function Get_Item(Index: Integer): IXMLRecycled;
    property Items[Index: Integer]: IXMLRecycled read Get_Item; default;
  end;

{ IXMLResistance }

  IXMLResistance = interface(IXMLDetailMeasurement)
    ['{AB2C2D19-5C87-4A24-B741-D5D4A3DFC9B6}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLResistanceList }

  IXMLResistanceList = interface(IXMLNodeCollection)
    ['{1A280790-EDD6-40ED-8C3F-55B77FF84C66}']
    { Methods & Properties }
    function Add: IXMLResistance;
    function Insert(const Index: Integer): IXMLResistance;
    function Get_Item(Index: Integer): IXMLResistance;
    property Items[Index: Integer]: IXMLResistance read Get_Item; default;
  end;

{ IXMLRingCrush }

  IXMLRingCrush = interface(IXMLDetailMeasurement)
    ['{ECC8FC30-4ABD-4643-868B-7B762E958D59}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLRingCrushList }

  IXMLRingCrushList = interface(IXMLNodeCollection)
    ['{41ED2239-B94B-49A1-BE7C-51F160A32CFB}']
    { Methods & Properties }
    function Add: IXMLRingCrush;
    function Insert(const Index: Integer): IXMLRingCrush;
    function Get_Item(Index: Integer): IXMLRingCrush;
    property Items[Index: Integer]: IXMLRingCrush read Get_Item; default;
  end;

{ IXMLRoughness }

  IXMLRoughness = interface(IXMLDetailMeasurement)
    ['{A70CFB35-E751-4E44-89B2-1FF942D28484}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLRoughnessList }

  IXMLRoughnessList = interface(IXMLNodeCollection)
    ['{47F488CC-A3A4-417E-BF3F-0D0B17E5FF49}']
    { Methods & Properties }
    function Add: IXMLRoughness;
    function Insert(const Index: Integer): IXMLRoughness;
    function Get_Item(Index: Integer): IXMLRoughness;
    property Items[Index: Integer]: IXMLRoughness read Get_Item; default;
  end;

{ IXMLRunnabilityIndex }

  IXMLRunnabilityIndex = interface(IXMLDetailMeasurement)
    ['{71561556-A797-428F-9457-61F27029F50F}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLRunnabilityIndexList }

  IXMLRunnabilityIndexList = interface(IXMLNodeCollection)
    ['{E74B1C9D-5210-42F3-9BE7-81455D4B860B}']
    { Methods & Properties }
    function Add: IXMLRunnabilityIndex;
    function Insert(const Index: Integer): IXMLRunnabilityIndex;
    function Get_Item(Index: Integer): IXMLRunnabilityIndex;
    property Items[Index: Integer]: IXMLRunnabilityIndex read Get_Item; default;
  end;

{ IXMLShowThrough }

  IXMLShowThrough = interface(IXMLDetailMeasurement)
    ['{709E5720-FA70-46AB-9F28-DFB38797D3B6}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLShowThroughList }

  IXMLShowThroughList = interface(IXMLNodeCollection)
    ['{2845B8BC-9746-4224-9EB3-EA0631F5953D}']
    { Methods & Properties }
    function Add: IXMLShowThrough;
    function Insert(const Index: Integer): IXMLShowThrough;
    function Get_Item(Index: Integer): IXMLShowThrough;
    property Items[Index: Integer]: IXMLShowThrough read Get_Item; default;
  end;

{ IXMLSizing }

  IXMLSizing = interface(IXMLDetailMeasurement)
    ['{EEA8E0C3-9843-4C4B-81BC-0801001AE223}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLSizingList }

  IXMLSizingList = interface(IXMLNodeCollection)
    ['{BE359C5E-FCD8-4D20-BC3F-E6525F37EB0D}']
    { Methods & Properties }
    function Add: IXMLSizing;
    function Insert(const Index: Integer): IXMLSizing;
    function Get_Item(Index: Integer): IXMLSizing;
    property Items[Index: Integer]: IXMLSizing read Get_Item; default;
  end;

{ IXMLSmoothness }

  IXMLSmoothness = interface(IXMLDetailMeasurement)
    ['{C899D412-BEA6-4269-8093-ED954F2B4790}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLSmoothnessList }

  IXMLSmoothnessList = interface(IXMLNodeCollection)
    ['{433119DD-33FA-4753-A102-B8FEA830112D}']
    { Methods & Properties }
    function Add: IXMLSmoothness;
    function Insert(const Index: Integer): IXMLSmoothness;
    function Get_Item(Index: Integer): IXMLSmoothness;
    property Items[Index: Integer]: IXMLSmoothness read Get_Item; default;
  end;

{ IXMLStiffness }

  IXMLStiffness = interface(IXMLDetailMeasurement)
    ['{25FB6759-89A1-4891-9B9F-D9808BDA1083}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLStiffnessList }

  IXMLStiffnessList = interface(IXMLNodeCollection)
    ['{B21A0122-7DB8-47B4-A35E-C41E975D3310}']
    { Methods & Properties }
    function Add: IXMLStiffness;
    function Insert(const Index: Integer): IXMLStiffness;
    function Get_Item(Index: Integer): IXMLStiffness;
    property Items[Index: Integer]: IXMLStiffness read Get_Item; default;
  end;

{ IXMLStretch }

  IXMLStretch = interface(IXMLDetailMeasurement)
    ['{F0962DB3-6AD5-4FFB-AF03-6308708D58A0}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLStretchList }

  IXMLStretchList = interface(IXMLNodeCollection)
    ['{142D3EE4-F62C-4315-BE1D-C26033151A5A}']
    { Methods & Properties }
    function Add: IXMLStretch;
    function Insert(const Index: Integer): IXMLStretch;
    function Get_Item(Index: Integer): IXMLStretch;
    property Items[Index: Integer]: IXMLStretch read Get_Item; default;
  end;

{ IXMLSurfaceStrength }

  IXMLSurfaceStrength = interface(IXMLDetailMeasurement)
    ['{7C870645-6636-41BF-97A3-6D7A23207639}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLSurfaceStrengthList }

  IXMLSurfaceStrengthList = interface(IXMLNodeCollection)
    ['{179D8AF8-662C-4CC1-BB4E-5EC53EA69847}']
    { Methods & Properties }
    function Add: IXMLSurfaceStrength;
    function Insert(const Index: Integer): IXMLSurfaceStrength;
    function Get_Item(Index: Integer): IXMLSurfaceStrength;
    property Items[Index: Integer]: IXMLSurfaceStrength read Get_Item; default;
  end;

{ IXMLTEA }

  IXMLTEA = interface(IXMLDetailMeasurement)
    ['{5103B7A5-AD26-4949-A2F6-18FDBFCF3BAB}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLTEAList }

  IXMLTEAList = interface(IXMLNodeCollection)
    ['{03B93406-DBB2-4DFE-A6AE-DD8B5B98AF63}']
    { Methods & Properties }
    function Add: IXMLTEA;
    function Insert(const Index: Integer): IXMLTEA;
    function Get_Item(Index: Integer): IXMLTEA;
    property Items[Index: Integer]: IXMLTEA read Get_Item; default;
  end;

{ IXMLTear }

  IXMLTear = interface(IXMLDetailMeasurement)
    ['{E5D5241C-068B-4918-94E2-249446F843E5}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLTearList }

  IXMLTearList = interface(IXMLNodeCollection)
    ['{7378588F-F2FE-40A8-AEBB-47162855B862}']
    { Methods & Properties }
    function Add: IXMLTear;
    function Insert(const Index: Integer): IXMLTear;
    function Get_Item(Index: Integer): IXMLTear;
    property Items[Index: Integer]: IXMLTear read Get_Item; default;
  end;

{ IXMLTearIndex }

  IXMLTearIndex = interface(IXMLDetailMeasurement)
    ['{5D1DDC77-E687-4331-A7B1-824A2DE0B188}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLTearIndexList }

  IXMLTearIndexList = interface(IXMLNodeCollection)
    ['{E04D83F3-AA75-4A93-B155-D5688200C3B4}']
    { Methods & Properties }
    function Add: IXMLTearIndex;
    function Insert(const Index: Integer): IXMLTearIndex;
    function Get_Item(Index: Integer): IXMLTearIndex;
    property Items[Index: Integer]: IXMLTearIndex read Get_Item; default;
  end;

{ IXMLTensile }

  IXMLTensile = interface(IXMLDetailMeasurement)
    ['{59936B5D-51BE-4885-8B2B-83142A79FAED}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLTensileList }

  IXMLTensileList = interface(IXMLNodeCollection)
    ['{D2F1046F-06D2-42F6-8BC7-F4CF05DCE5B1}']
    { Methods & Properties }
    function Add: IXMLTensile;
    function Insert(const Index: Integer): IXMLTensile;
    function Get_Item(Index: Integer): IXMLTensile;
    property Items[Index: Integer]: IXMLTensile read Get_Item; default;
  end;

{ IXMLTensileIndex }

  IXMLTensileIndex = interface(IXMLDetailMeasurement)
    ['{2EB32379-71B3-4F5B-B82B-4834F88D231A}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLTensileIndexList }

  IXMLTensileIndexList = interface(IXMLNodeCollection)
    ['{C3F84805-607E-4397-B80A-C060AB4FAA97}']
    { Methods & Properties }
    function Add: IXMLTensileIndex;
    function Insert(const Index: Integer): IXMLTensileIndex;
    function Get_Item(Index: Integer): IXMLTensileIndex;
    property Items[Index: Integer]: IXMLTensileIndex read Get_Item; default;
  end;

{ IXMLWhiteness }

  IXMLWhiteness = interface(IXMLDetailMeasurement)
    ['{00909155-C161-4E20-A0D4-0A319657D9F8}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLWhitenessList }

  IXMLWhitenessList = interface(IXMLNodeCollection)
    ['{092E2396-2958-42CC-A3D3-2FFB4E177821}']
    { Methods & Properties }
    function Add: IXMLWhiteness;
    function Insert(const Index: Integer): IXMLWhiteness;
    function Get_Item(Index: Integer): IXMLWhiteness;
    property Items[Index: Integer]: IXMLWhiteness read Get_Item; default;
  end;

{ IXMLAdditionalTest }

  IXMLAdditionalTest = interface(IXMLNode)
    ['{2417A155-32E9-42CC-9B5C-9744DA7A9A6A}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    function Get_AdditionalTestName: WideString;
    function Get_DetailValue: IXMLDetailValue;
    function Get_DetailRangeMin: IXMLDetailRangeMin;
    function Get_DetailRangeMax: IXMLDetailRangeMax;
    function Get_StandardDeviation: IXMLStandardDeviation;
    function Get_SampleSize: LongWord;
    function Get_TwoSigmaLower: IXMLTwoSigmaLower;
    function Get_TwoSigmaUpper: IXMLTwoSigmaUpper;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    procedure Set_AdditionalTestName(Value: WideString);
    procedure Set_SampleSize(Value: LongWord);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
    property AdditionalTestName: WideString read Get_AdditionalTestName write Set_AdditionalTestName;
    property DetailValue: IXMLDetailValue read Get_DetailValue;
    property DetailRangeMin: IXMLDetailRangeMin read Get_DetailRangeMin;
    property DetailRangeMax: IXMLDetailRangeMax read Get_DetailRangeMax;
    property StandardDeviation: IXMLStandardDeviation read Get_StandardDeviation;
    property SampleSize: LongWord read Get_SampleSize write Set_SampleSize;
    property TwoSigmaLower: IXMLTwoSigmaLower read Get_TwoSigmaLower;
    property TwoSigmaUpper: IXMLTwoSigmaUpper read Get_TwoSigmaUpper;
  end;

{ IXMLPlyAttributes }

  IXMLPlyAttributes = interface(IXMLNode)
    ['{4B2712E4-A918-4866-A693-59EBD81E4F4B}']
    { Property Accessors }
    function Get_CoatingLocation: WideString;
    function Get_PlyNumber: LongWord;
    function Get_Abrasion: IXMLAbrasionList;
    function Get_AbsorptionInk: IXMLAbsorptionInkList;
    function Get_AbsorptionLight: IXMLAbsorptionLightList;
    function Get_AbsorptionWater: IXMLAbsorptionWaterList;
    function Get_Appearance: IXMLAppearanceList;
    function Get_Ash: IXMLAshList;
    function Get_BasisWeight: IXMLBasisWeightList;
    function Get_BendingResistance: IXMLBendingResistanceList;
    function Get_BendingStiffness: IXMLBendingStiffnessList;
    function Get_Brightness: IXMLBrightnessList;
    function Get_Bulk: IXMLBulkList;
    function Get_Burst: IXMLBurstList;
    function Get_BurstIndex: IXMLBurstIndexList;
    function Get_Caliper: IXMLCaliperList;
    function Get_CoatWeight: IXMLCoatWeightList;
    function Get_ColourDetail: IXMLColourDetailList;
    function Get_Density: IXMLDensityList;
    function Get_Dirt: IXMLDirtList;
    function Get_DominantWavelength: IXMLDominantWavelengthList;
    function Get_FibreLength: IXMLFibreLengthList;
    function Get_FibreClassification: IXMLFibreClassificationList;
    function Get_Folding: IXMLFoldingList;
    function Get_Formation: IXMLFormationList;
    function Get_Freeness: IXMLFreenessList;
    function Get_Friction: IXMLFrictionList;
    function Get_Gloss: IXMLGlossList;
    function Get_LightScattering: IXMLLightScatteringList;
    function Get_Moisture: IXMLMoistureList;
    function Get_Opacity: IXMLOpacityList;
    function Get_Permeability: IXMLPermeabilityList;
    function Get_PH: IXMLPHList;
    function Get_PlyBond: IXMLPlyBondList;
    function Get_Porosity: IXMLPorosityList;
    function Get_PostConsumerWaste: IXMLPostConsumerWasteList;
    function Get_PPI: IXMLMeasurementList;
    function Get_PreConsumerWaste: IXMLPreConsumerWasteList;
    function Get_Recycled: IXMLRecycledList;
    function Get_Resistance: IXMLResistanceList;
    function Get_RingCrush: IXMLRingCrushList;
    function Get_Roughness: IXMLRoughnessList;
    function Get_RunnabilityIndex: IXMLRunnabilityIndexList;
    function Get_ShowThrough: IXMLShowThroughList;
    function Get_Sizing: IXMLSizingList;
    function Get_Smoothness: IXMLSmoothnessList;
    function Get_Stiffness: IXMLStiffnessList;
    function Get_Stretch: IXMLStretchList;
    function Get_SurfaceStrength: IXMLSurfaceStrengthList;
    function Get_TEA: IXMLTEAList;
    function Get_Tear: IXMLTearList;
    function Get_TearIndex: IXMLTearIndexList;
    function Get_Tensile: IXMLTensileList;
    function Get_TensileIndex: IXMLTensileIndexList;
    function Get_Whiteness: IXMLWhitenessList;
    function Get_AdditionalTest: IXMLAdditionalTest;
    procedure Set_CoatingLocation(Value: WideString);
    procedure Set_PlyNumber(Value: LongWord);
    { Methods & Properties }
    property CoatingLocation: WideString read Get_CoatingLocation write Set_CoatingLocation;
    property PlyNumber: LongWord read Get_PlyNumber write Set_PlyNumber;
    property Abrasion: IXMLAbrasionList read Get_Abrasion;
    property AbsorptionInk: IXMLAbsorptionInkList read Get_AbsorptionInk;
    property AbsorptionLight: IXMLAbsorptionLightList read Get_AbsorptionLight;
    property AbsorptionWater: IXMLAbsorptionWaterList read Get_AbsorptionWater;
    property Appearance: IXMLAppearanceList read Get_Appearance;
    property Ash: IXMLAshList read Get_Ash;
    property BasisWeight: IXMLBasisWeightList read Get_BasisWeight;
    property BendingResistance: IXMLBendingResistanceList read Get_BendingResistance;
    property BendingStiffness: IXMLBendingStiffnessList read Get_BendingStiffness;
    property Brightness: IXMLBrightnessList read Get_Brightness;
    property Bulk: IXMLBulkList read Get_Bulk;
    property Burst: IXMLBurstList read Get_Burst;
    property BurstIndex: IXMLBurstIndexList read Get_BurstIndex;
    property Caliper: IXMLCaliperList read Get_Caliper;
    property CoatWeight: IXMLCoatWeightList read Get_CoatWeight;
    property ColourDetail: IXMLColourDetailList read Get_ColourDetail;
    property Density: IXMLDensityList read Get_Density;
    property Dirt: IXMLDirtList read Get_Dirt;
    property DominantWavelength: IXMLDominantWavelengthList read Get_DominantWavelength;
    property FibreLength: IXMLFibreLengthList read Get_FibreLength;
    property FibreClassification: IXMLFibreClassificationList read Get_FibreClassification;
    property Folding: IXMLFoldingList read Get_Folding;
    property Formation: IXMLFormationList read Get_Formation;
    property Freeness: IXMLFreenessList read Get_Freeness;
    property Friction: IXMLFrictionList read Get_Friction;
    property Gloss: IXMLGlossList read Get_Gloss;
    property LightScattering: IXMLLightScatteringList read Get_LightScattering;
    property Moisture: IXMLMoistureList read Get_Moisture;
    property Opacity: IXMLOpacityList read Get_Opacity;
    property Permeability: IXMLPermeabilityList read Get_Permeability;
    property PH: IXMLPHList read Get_PH;
    property PlyBond: IXMLPlyBondList read Get_PlyBond;
    property Porosity: IXMLPorosityList read Get_Porosity;
    property PostConsumerWaste: IXMLPostConsumerWasteList read Get_PostConsumerWaste;
    property PPI: IXMLMeasurementList read Get_PPI;
    property PreConsumerWaste: IXMLPreConsumerWasteList read Get_PreConsumerWaste;
    property Recycled: IXMLRecycledList read Get_Recycled;
    property Resistance: IXMLResistanceList read Get_Resistance;
    property RingCrush: IXMLRingCrushList read Get_RingCrush;
    property Roughness: IXMLRoughnessList read Get_Roughness;
    property RunnabilityIndex: IXMLRunnabilityIndexList read Get_RunnabilityIndex;
    property ShowThrough: IXMLShowThroughList read Get_ShowThrough;
    property Sizing: IXMLSizingList read Get_Sizing;
    property Smoothness: IXMLSmoothnessList read Get_Smoothness;
    property Stiffness: IXMLStiffnessList read Get_Stiffness;
    property Stretch: IXMLStretchList read Get_Stretch;
    property SurfaceStrength: IXMLSurfaceStrengthList read Get_SurfaceStrength;
    property TEA: IXMLTEAList read Get_TEA;
    property Tear: IXMLTearList read Get_Tear;
    property TearIndex: IXMLTearIndexList read Get_TearIndex;
    property Tensile: IXMLTensileList read Get_Tensile;
    property TensileIndex: IXMLTensileIndexList read Get_TensileIndex;
    property Whiteness: IXMLWhitenessList read Get_Whiteness;
    property AdditionalTest: IXMLAdditionalTest read Get_AdditionalTest;
  end;

{ IXMLPlyAttributesList }

  IXMLPlyAttributesList = interface(IXMLNodeCollection)
    ['{19286052-CEC0-480E-B6F2-CC78743B956A}']
    { Methods & Properties }
    function Add: IXMLPlyAttributes;
    function Insert(const Index: Integer): IXMLPlyAttributes;
    function Get_Item(Index: Integer): IXMLPlyAttributes;
    property Items[Index: Integer]: IXMLPlyAttributes read Get_Item; default;
  end;

{ IXMLPlySet }

  IXMLPlySet = interface(IXMLNode)
    ['{1208BD82-AD40-4356-AE84-7E8C3E6BACF7}']
    { Property Accessors }
    function Get_EdgePaddable: WideString;
    function Get_NumberOfPlies: IXMLNni1List;
    function Get_PlyAttributes: IXMLPlyAttributesList;
    procedure Set_EdgePaddable(Value: WideString);
    { Methods & Properties }
    property EdgePaddable: WideString read Get_EdgePaddable write Set_EdgePaddable;
    property NumberOfPlies: IXMLNni1List read Get_NumberOfPlies;
    property PlyAttributes: IXMLPlyAttributesList read Get_PlyAttributes;
  end;

{ IXMLPlySetList }

  IXMLPlySetList = interface(IXMLNodeCollection)
    ['{F71E1945-2C12-4D56-B37C-7E156E3BFD37}']
    { Methods & Properties }
    function Add: IXMLPlySet;
    function Insert(const Index: Integer): IXMLPlySet;
    function Get_Item(Index: Integer): IXMLPlySet;
    property Items[Index: Integer]: IXMLPlySet read Get_Item; default;
  end;

{ IXMLReel }

  IXMLReel = interface(IXMLNode)
    ['{22C8F48B-1693-4A5F-8B3C-A8BCD55D7220}']
    { Property Accessors }
    function Get_ReelConversionCharacteristics: IXMLReelConversionCharacteristicsClass;
    function Get_ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass;
    { Methods & Properties }
    property ReelConversionCharacteristics: IXMLReelConversionCharacteristicsClass read Get_ReelConversionCharacteristics;
    property ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass read Get_ReelPackagingCharacteristics;
  end;

{ IXMLReelConversionCharacteristicsClass }

  IXMLReelConversionCharacteristicsClass = interface(IXMLNode)
    ['{BED881F6-E284-4B5D-922D-4CC87E690DD6}']
    { Property Accessors }
    function Get_ConversionCode: IXMLConversionCode;
    function Get_WindingDirection: WideString;
    function Get_MakeTo: WideString;
    function Get_ReelWidth: IXMLMeasurementList;
    function Get_ReelDiameter: IXMLMeasurementList;
    function Get_ReelLength: IXMLMeasurementList;
    function Get_TargetProductWeight: IXMLMeasurement;
    function Get_CoreCharacteristics: IXMLCoreCharacteristicsList;
    function Get_Embossing: IXMLEmbossingList;
    function Get_Watermark: IXMLWatermarkList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_WindingDirection(Value: WideString);
    procedure Set_MakeTo(Value: WideString);
    { Methods & Properties }
    property ConversionCode: IXMLConversionCode read Get_ConversionCode;
    property WindingDirection: WideString read Get_WindingDirection write Set_WindingDirection;
    property MakeTo: WideString read Get_MakeTo write Set_MakeTo;
    property ReelWidth: IXMLMeasurementList read Get_ReelWidth;
    property ReelDiameter: IXMLMeasurementList read Get_ReelDiameter;
    property ReelLength: IXMLMeasurementList read Get_ReelLength;
    property TargetProductWeight: IXMLMeasurement read Get_TargetProductWeight;
    property CoreCharacteristics: IXMLCoreCharacteristicsList read Get_CoreCharacteristics;
    property Embossing: IXMLEmbossingList read Get_Embossing;
    property Watermark: IXMLWatermarkList read Get_Watermark;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLPulpClass }

  IXMLPulpClass = interface(IXMLNode)
    ['{22C7F22C-CAA2-4D21-B966-CD890B4E39C4}']
    { Property Accessors }
    function Get_PulpCharacteristics: IXMLPulpCharacteristics;
    function Get_Bale: IXMLBale;
    function Get_Reel: IXMLReel;
    function Get_Slurry: IXMLSlurry;
    function Get_NonStandardPulp: IXMLNonStandardPulp;
    { Methods & Properties }
    property PulpCharacteristics: IXMLPulpCharacteristics read Get_PulpCharacteristics;
    property Bale: IXMLBale read Get_Bale;
    property Reel: IXMLReel read Get_Reel;
    property Slurry: IXMLSlurry read Get_Slurry;
    property NonStandardPulp: IXMLNonStandardPulp read Get_NonStandardPulp;
  end;

{ IXMLPulpCharacteristics }

  IXMLPulpCharacteristics = interface(IXMLNode)
    ['{3F62FD84-7B7D-49E4-BCDE-237EC7413309}']
    { Property Accessors }
    function Get_PulpingProcess: WideString;
    function Get_BleachingProcess: WideString;
    function Get_FibreSource: WideString;
    function Get_Ash: IXMLAshList;
    function Get_BasisWeight: IXMLBasisWeightList;
    function Get_Brightness: IXMLBrightnessList;
    function Get_Burst: IXMLBurstList;
    function Get_BurstIndex: IXMLBurstIndexList;
    function Get_ColourDetail: IXMLColourDetailList;
    function Get_Density: IXMLDensityList;
    function Get_Dirt: IXMLDirtList;
    function Get_DrainageResistance: IXMLDrainageResistanceList;
    function Get_FibreLength: IXMLFibreLengthList;
    function Get_FibreClassification: IXMLFibreClassificationList;
    function Get_Freeness: IXMLFreenessList;
    function Get_LightScattering: IXMLLightScatteringList;
    function Get_Moisture: IXMLMoistureList;
    function Get_Opacity: IXMLOpacityList;
    function Get_PH: IXMLPHList;
    function Get_PostConsumerWaste: IXMLPostConsumerWasteList;
    function Get_PreConsumerWaste: IXMLPreConsumerWasteList;
    function Get_Recycled: IXMLRecycledList;
    function Get_Tear: IXMLTearList;
    function Get_TearIndex: IXMLTearIndexList;
    function Get_Tensile: IXMLTensileList;
    function Get_TensileIndex: IXMLTensileIndexList;
    function Get_Viscosity: IXMLViscosityList;
    function Get_Whiteness: IXMLWhitenessList;
    function Get_AdditionalTest: IXMLAdditionalTest;
    procedure Set_PulpingProcess(Value: WideString);
    procedure Set_BleachingProcess(Value: WideString);
    procedure Set_FibreSource(Value: WideString);
    { Methods & Properties }
    property PulpingProcess: WideString read Get_PulpingProcess write Set_PulpingProcess;
    property BleachingProcess: WideString read Get_BleachingProcess write Set_BleachingProcess;
    property FibreSource: WideString read Get_FibreSource write Set_FibreSource;
    property Ash: IXMLAshList read Get_Ash;
    property BasisWeight: IXMLBasisWeightList read Get_BasisWeight;
    property Brightness: IXMLBrightnessList read Get_Brightness;
    property Burst: IXMLBurstList read Get_Burst;
    property BurstIndex: IXMLBurstIndexList read Get_BurstIndex;
    property ColourDetail: IXMLColourDetailList read Get_ColourDetail;
    property Density: IXMLDensityList read Get_Density;
    property Dirt: IXMLDirtList read Get_Dirt;
    property DrainageResistance: IXMLDrainageResistanceList read Get_DrainageResistance;
    property FibreLength: IXMLFibreLengthList read Get_FibreLength;
    property FibreClassification: IXMLFibreClassificationList read Get_FibreClassification;
    property Freeness: IXMLFreenessList read Get_Freeness;
    property LightScattering: IXMLLightScatteringList read Get_LightScattering;
    property Moisture: IXMLMoistureList read Get_Moisture;
    property Opacity: IXMLOpacityList read Get_Opacity;
    property PH: IXMLPHList read Get_PH;
    property PostConsumerWaste: IXMLPostConsumerWasteList read Get_PostConsumerWaste;
    property PreConsumerWaste: IXMLPreConsumerWasteList read Get_PreConsumerWaste;
    property Recycled: IXMLRecycledList read Get_Recycled;
    property Tear: IXMLTearList read Get_Tear;
    property TearIndex: IXMLTearIndexList read Get_TearIndex;
    property Tensile: IXMLTensileList read Get_Tensile;
    property TensileIndex: IXMLTensileIndexList read Get_TensileIndex;
    property Viscosity: IXMLViscosityList read Get_Viscosity;
    property Whiteness: IXMLWhitenessList read Get_Whiteness;
    property AdditionalTest: IXMLAdditionalTest read Get_AdditionalTest;
  end;

{ IXMLDrainageResistance }

  IXMLDrainageResistance = interface(IXMLDetailMeasurement)
    ['{E1EC5F34-32E8-46E1-86E7-F41C762F0530}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLDrainageResistanceList }

  IXMLDrainageResistanceList = interface(IXMLNodeCollection)
    ['{E355CE10-D33E-4664-B5AD-4B83EA950B23}']
    { Methods & Properties }
    function Add: IXMLDrainageResistance;
    function Insert(const Index: Integer): IXMLDrainageResistance;
    function Get_Item(Index: Integer): IXMLDrainageResistance;
    property Items[Index: Integer]: IXMLDrainageResistance read Get_Item; default;
  end;

{ IXMLViscosity }

  IXMLViscosity = interface(IXMLDetailMeasurement)
    ['{DD596785-05EB-450A-B058-27288E855DB8}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLViscosityList }

  IXMLViscosityList = interface(IXMLNodeCollection)
    ['{C2E2606D-8793-4275-BE48-DCFF158C4EB4}']
    { Methods & Properties }
    function Add: IXMLViscosity;
    function Insert(const Index: Integer): IXMLViscosity;
    function Get_Item(Index: Integer): IXMLViscosity;
    property Items[Index: Integer]: IXMLViscosity read Get_Item; default;
  end;

{ IXMLBale }

  IXMLBale = interface(IXMLNode)
    ['{7FCD1A16-723D-4FB3-99B1-FA35738FF6C9}']
    { Property Accessors }
    function Get_BaleType: WideString;
    function Get_BaleConversionCharacteristics: IXMLBaleConversionCharacteristics;
    function Get_BalePackagingCharacteristics: IXMLBalePackagingCharacteristics;
    procedure Set_BaleType(Value: WideString);
    { Methods & Properties }
    property BaleType: WideString read Get_BaleType write Set_BaleType;
    property BaleConversionCharacteristics: IXMLBaleConversionCharacteristics read Get_BaleConversionCharacteristics;
    property BalePackagingCharacteristics: IXMLBalePackagingCharacteristics read Get_BalePackagingCharacteristics;
  end;

{ IXMLBaleConversionCharacteristics }

  IXMLBaleConversionCharacteristics = interface(IXMLNode)
    ['{DEABDC87-8270-4FDF-A7F6-C714DCF93608}']
    { Property Accessors }
    function Get_ConversionCode: IXMLConversionCode;
    function Get_BaleHeight: IXMLMeasurement;
    function Get_BaleWidth: IXMLMeasurement;
    function Get_BaleDepth: IXMLMeasurement;
    function Get_BaleStandardWeight: IXMLMeasurement;
    { Methods & Properties }
    property ConversionCode: IXMLConversionCode read Get_ConversionCode;
    property BaleHeight: IXMLMeasurement read Get_BaleHeight;
    property BaleWidth: IXMLMeasurement read Get_BaleWidth;
    property BaleDepth: IXMLMeasurement read Get_BaleDepth;
    property BaleStandardWeight: IXMLMeasurement read Get_BaleStandardWeight;
  end;

{ IXMLBalePackagingCharacteristics }

  IXMLBalePackagingCharacteristics = interface(IXMLNode)
    ['{4B2B98D5-BDA7-4C85-9A8F-7AB2464DB505}']
    { Property Accessors }
    function Get_PackagingCode: IXMLPackagingCode;
    function Get_CustomerMarks: WideString;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_PulpUnitCharacteristics: IXMLPulpUnitCharacteristics;
    procedure Set_CustomerMarks(Value: WideString);
    { Methods & Properties }
    property PackagingCode: IXMLPackagingCode read Get_PackagingCode;
    property CustomerMarks: WideString read Get_CustomerMarks write Set_CustomerMarks;
    property StencilCharacteristics: IXMLStencilCharacteristicsList read Get_StencilCharacteristics;
    property PulpUnitCharacteristics: IXMLPulpUnitCharacteristics read Get_PulpUnitCharacteristics;
  end;

{ IXMLPulpUnitCharacteristics }

  IXMLPulpUnitCharacteristics = interface(IXMLNode)
    ['{F749ECA5-1CEB-476F-BA52-71EC41D128AA}']
    { Property Accessors }
    function Get_PackagingDescription: IXMLPackagingDescription;
    function Get_Wrap: IXMLWrap;
    function Get_PalletCharacteristics: IXMLPalletCharacteristics;
    function Get_BalesPerUnit: LongWord;
    function Get_LayersPerUnit: LongWord;
    function Get_LabelCharacteristics: IXMLLabelCharacteristics;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_MaximumGrossWeight: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_BalesPerUnit(Value: LongWord);
    procedure Set_LayersPerUnit(Value: LongWord);
    { Methods & Properties }
    property PackagingDescription: IXMLPackagingDescription read Get_PackagingDescription;
    property Wrap: IXMLWrap read Get_Wrap;
    property PalletCharacteristics: IXMLPalletCharacteristics read Get_PalletCharacteristics;
    property BalesPerUnit: LongWord read Get_BalesPerUnit write Set_BalesPerUnit;
    property LayersPerUnit: LongWord read Get_LayersPerUnit write Set_LayersPerUnit;
    property LabelCharacteristics: IXMLLabelCharacteristics read Get_LabelCharacteristics;
    property StencilCharacteristics: IXMLStencilCharacteristicsList read Get_StencilCharacteristics;
    property MaximumGrossWeight: IXMLMeasurement read Get_MaximumGrossWeight;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLSlurry }

  IXMLSlurry = interface(IXMLNode)
    ['{F5164D80-51EB-4C7E-939A-2ED797F4B3FD}']
    { Property Accessors }
    function Get_TargetSolidsContent: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
    { Methods & Properties }
    property TargetSolidsContent: IXMLMeasurement read Get_TargetSolidsContent;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLNonStandardPulp }

  IXMLNonStandardPulp = interface(IXMLNode)
    ['{DDE18E61-6AEB-4C27-A741-84ED8864A326}']
    { Property Accessors }
    function Get_TargetMoisture: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
    { Methods & Properties }
    property TargetMoisture: IXMLMeasurement read Get_TargetMoisture;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLRecoveredPaper }

  IXMLRecoveredPaper = interface(IXMLNode)
    ['{9B078B06-C3A8-42DE-BFC7-12F736FD3A52}']
    { Property Accessors }
    function Get_RecoveredPaperAttributes: WideString;
    procedure Set_RecoveredPaperAttributes(Value: WideString);
    { Methods & Properties }
    property RecoveredPaperAttributes: WideString read Get_RecoveredPaperAttributes write Set_RecoveredPaperAttributes;
  end;

{ IXMLVirginFibre }

  IXMLVirginFibre = interface(IXMLNode)
    ['{2C99A0AB-5447-43B5-88A2-294C09865702}']
    { Property Accessors }
    function Get_TimberCharacteristics: IXMLTimberCharacteristics;
    function Get_Log: IXMLLog;
    function Get_Chip: IXMLChip;
    { Methods & Properties }
    property TimberCharacteristics: IXMLTimberCharacteristics read Get_TimberCharacteristics;
    property Log: IXMLLog read Get_Log;
    property Chip: IXMLChip read Get_Chip;
  end;

{ IXMLTimberCharacteristics }

  IXMLTimberCharacteristics = interface(IXMLNode)
    ['{5E6F2508-2F16-4371-9467-BA4F48EA4C86}']
    { Property Accessors }
    function Get_LumberSpecies: IXMLLumberSpeciesClassList;
    function Get_Age: IXMLMeasurement;
    function Get_Grade: WideString;
    procedure Set_Grade(Value: WideString);
    { Methods & Properties }
    property LumberSpecies: IXMLLumberSpeciesClassList read Get_LumberSpecies;
    property Age: IXMLMeasurement read Get_Age;
    property Grade: WideString read Get_Grade write Set_Grade;
  end;

{ IXMLLumberSpeciesClass }

  IXMLLumberSpeciesClass = interface(IXMLNode)
    ['{2DED22EB-2CF8-4B63-AC50-F571A605DA46}']
    { Property Accessors }
    function Get_SpeciesType: WideString;
    function Get_SpeciesOrigin: WideString;
    function Get_SpeciesAgency: WideString;
    function Get_SpeciesCode: WideString;
    function Get_AdditionalText: WideString;
    procedure Set_SpeciesType(Value: WideString);
    procedure Set_SpeciesOrigin(Value: WideString);
    procedure Set_SpeciesAgency(Value: WideString);
    procedure Set_SpeciesCode(Value: WideString);
    procedure Set_AdditionalText(Value: WideString);
    { Methods & Properties }
    property SpeciesType: WideString read Get_SpeciesType write Set_SpeciesType;
    property SpeciesOrigin: WideString read Get_SpeciesOrigin write Set_SpeciesOrigin;
    property SpeciesAgency: WideString read Get_SpeciesAgency write Set_SpeciesAgency;
    property SpeciesCode: WideString read Get_SpeciesCode write Set_SpeciesCode;
    property AdditionalText: WideString read Get_AdditionalText write Set_AdditionalText;
  end;

{ IXMLLumberSpeciesClassList }

  IXMLLumberSpeciesClassList = interface(IXMLNodeCollection)
    ['{4AE3ED89-E6C0-403D-B32A-693A87487408}']
    { Methods & Properties }
    function Add: IXMLLumberSpeciesClass;
    function Insert(const Index: Integer): IXMLLumberSpeciesClass;
    function Get_Item(Index: Integer): IXMLLumberSpeciesClass;
    property Items[Index: Integer]: IXMLLumberSpeciesClass read Get_Item; default;
  end;

{ IXMLLog }

  IXMLLog = interface(IXMLNode)
    ['{C5CB3CC4-2F2E-4523-8E66-D264ED031A13}']
    { Property Accessors }
    function Get_LogCharacteristics: IXMLLogCharacteristics;
    function Get_LogPackagingCharacteristics: IXMLLogPackagingCharacteristics;
    { Methods & Properties }
    property LogCharacteristics: IXMLLogCharacteristics read Get_LogCharacteristics;
    property LogPackagingCharacteristics: IXMLLogPackagingCharacteristics read Get_LogPackagingCharacteristics;
  end;

{ IXMLLogCharacteristics }

  IXMLLogCharacteristics = interface(IXMLNode)
    ['{7FECE43B-EC38-4215-9D4B-AB27656E1CCF}']
    { Property Accessors }
    function Get_LogLengthType: WideString;
    function Get_Debarked: WideString;
    function Get_LogConversionRule: WideString;
    function Get_Length: IXMLMeasurement;
    function Get_SmallEndDiameter: IXMLMeasurement;
    function Get_LargeEndDiameter: IXMLMeasurement;
    function Get_DiameterBreastHeight: IXMLMeasurement;
    procedure Set_LogLengthType(Value: WideString);
    procedure Set_Debarked(Value: WideString);
    procedure Set_LogConversionRule(Value: WideString);
    { Methods & Properties }
    property LogLengthType: WideString read Get_LogLengthType write Set_LogLengthType;
    property Debarked: WideString read Get_Debarked write Set_Debarked;
    property LogConversionRule: WideString read Get_LogConversionRule write Set_LogConversionRule;
    property Length: IXMLMeasurement read Get_Length;
    property SmallEndDiameter: IXMLMeasurement read Get_SmallEndDiameter;
    property LargeEndDiameter: IXMLMeasurement read Get_LargeEndDiameter;
    property DiameterBreastHeight: IXMLMeasurement read Get_DiameterBreastHeight;
  end;

{ IXMLLogPackagingCharacteristics }

  IXMLLogPackagingCharacteristics = interface(IXMLNode)
    ['{C4B132BC-D11D-43B8-A415-26F8963FA1E8}']
    { Property Accessors }
    function Get_DoubleBunked: WideString;
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_ItemCount: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    procedure Set_DoubleBunked(Value: WideString);
    { Methods & Properties }
    property DoubleBunked: WideString read Get_DoubleBunked write Set_DoubleBunked;
    property Identifier: IXMLIdentifierS60List read Get_Identifier;
    property ItemCount: IXMLMeasurement read Get_ItemCount;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
  end;

{ IXMLIdentifierS60 }

  IXMLIdentifierS60 = interface(IXMLNode)
    ['{F51164C1-B2D8-4968-B1DB-45F65E9237A6}']
    { Property Accessors }
    function Get_IdentifierCodeType: WideString;
    function Get_IdentifierType: WideString;
    function Get_IdentifierFormatType: WideString;
    procedure Set_IdentifierCodeType(Value: WideString);
    procedure Set_IdentifierType(Value: WideString);
    procedure Set_IdentifierFormatType(Value: WideString);
    { Methods & Properties }
    property IdentifierCodeType: WideString read Get_IdentifierCodeType write Set_IdentifierCodeType;
    property IdentifierType: WideString read Get_IdentifierType write Set_IdentifierType;
    property IdentifierFormatType: WideString read Get_IdentifierFormatType write Set_IdentifierFormatType;
  end;

{ IXMLIdentifierS60List }

  IXMLIdentifierS60List = interface(IXMLNodeCollection)
    ['{CA2BE849-698D-4010-8366-767472F04979}']
    { Methods & Properties }
    function Add: IXMLIdentifierS60;
    function Insert(const Index: Integer): IXMLIdentifierS60;
    function Get_Item(Index: Integer): IXMLIdentifierS60;
    property Items[Index: Integer]: IXMLIdentifierS60 read Get_Item; default;
  end;

{ IXMLChip }

  IXMLChip = interface(IXMLNode)
    ['{DE626DD0-F8B5-4CA5-B967-C96F2870B14C}']
    { Property Accessors }
    function Get_ChipCharacteristics: IXMLChipCharacteristics;
    function Get_ChipPackagingCharacteristics: IXMLChipPackagingCharacteristics;
    { Methods & Properties }
    property ChipCharacteristics: IXMLChipCharacteristics read Get_ChipCharacteristics;
    property ChipPackagingCharacteristics: IXMLChipPackagingCharacteristics read Get_ChipPackagingCharacteristics;
  end;

{ IXMLChipCharacteristics }

  IXMLChipCharacteristics = interface(IXMLNode)
    ['{FC55A622-8FDF-4D25-BE24-855018430717}']
    { Property Accessors }
    function Get_Screened: WideString;
    function Get_Debarked: WideString;
    function Get_Thickness: IXMLMeasurement;
    function Get_Moisture: IXMLMoisture;
    function Get_Dirt: IXMLDirt;
    function Get_Bark: IXMLBark;
    function Get_Sawdust: IXMLSawdust;
    procedure Set_Screened(Value: WideString);
    procedure Set_Debarked(Value: WideString);
    { Methods & Properties }
    property Screened: WideString read Get_Screened write Set_Screened;
    property Debarked: WideString read Get_Debarked write Set_Debarked;
    property Thickness: IXMLMeasurement read Get_Thickness;
    property Moisture: IXMLMoisture read Get_Moisture;
    property Dirt: IXMLDirt read Get_Dirt;
    property Bark: IXMLBark read Get_Bark;
    property Sawdust: IXMLSawdust read Get_Sawdust;
  end;

{ IXMLBark }

  IXMLBark = interface(IXMLDetailMeasurement)
    ['{6F3EA382-3786-4453-813F-7ADBCF553F1E}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLSawdust }

  IXMLSawdust = interface(IXMLDetailMeasurement)
    ['{B756BDC8-649B-437B-B98A-DA3A175E3BB9}']
    { Property Accessors }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    { Methods & Properties }
    property TestMethod: WideString read Get_TestMethod write Set_TestMethod;
    property TestAgency: WideString read Get_TestAgency write Set_TestAgency;
    property SampleType: WideString read Get_SampleType write Set_SampleType;
    property ResultSource: WideString read Get_ResultSource write Set_ResultSource;
  end;

{ IXMLChipPackagingCharacteristics }

  IXMLChipPackagingCharacteristics = interface(IXMLNode)
    ['{7F46A2E0-7337-4C2F-92A8-348BB924E8B0}']
    { Property Accessors }
    function Get_Identifier: IXMLIdentifierS60;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantity;
    { Methods & Properties }
    property Identifier: IXMLIdentifierS60 read Get_Identifier;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantity read Get_InformationalQuantity;
  end;

{ IXMLWoodProducts }

  IXMLWoodProducts = interface(IXMLNode)
    ['{637661E0-BA0D-454F-A302-D0D08301C6B1}']
    { Property Accessors }
    function Get_WoodTimbersDimensionalLumberBoards: IXMLWoodTimbersDimensionalLumberBoards;
    function Get_RoofingSidingDeckingFencing: IXMLRoofingSidingDeckingFencing;
    function Get_CompositeAndVeneerWoodPanels: IXMLCompositeAndVeneerWoodPanels;
    function Get_ConstructionPackagesAndPreFabPanels: IXMLConstructionPackagesAndPreFabPanels;
    function Get_Millwork: WideString;
    function Get_Gypsum: WideString;
    function Get_ProofInformationalQuantity: IXMLProofInformationalQuantityList;
    function Get_SuppliedComponentInformation: IXMLSuppliedComponentInformationList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_Millwork(Value: WideString);
    procedure Set_Gypsum(Value: WideString);
    { Methods & Properties }
    property WoodTimbersDimensionalLumberBoards: IXMLWoodTimbersDimensionalLumberBoards read Get_WoodTimbersDimensionalLumberBoards;
    property RoofingSidingDeckingFencing: IXMLRoofingSidingDeckingFencing read Get_RoofingSidingDeckingFencing;
    property CompositeAndVeneerWoodPanels: IXMLCompositeAndVeneerWoodPanels read Get_CompositeAndVeneerWoodPanels;
    property ConstructionPackagesAndPreFabPanels: IXMLConstructionPackagesAndPreFabPanels read Get_ConstructionPackagesAndPreFabPanels;
    property Millwork: WideString read Get_Millwork write Set_Millwork;
    property Gypsum: WideString read Get_Gypsum write Set_Gypsum;
    property ProofInformationalQuantity: IXMLProofInformationalQuantityList read Get_ProofInformationalQuantity;
    property SuppliedComponentInformation: IXMLSuppliedComponentInformationList read Get_SuppliedComponentInformation;
    property SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList read Get_SafetyAndEnvironmentalInformation;
  end;

{ IXMLWoodTimbersDimensionalLumberBoards }

  IXMLWoodTimbersDimensionalLumberBoards = interface(IXMLNode)
    ['{CE7C5698-B246-4795-85BE-F6B035FA6195}']
    { Property Accessors }
    function Get_SoftwoodLumber: IXMLSoftwoodLumber;
    function Get_HardwoodLumber: IXMLHardwoodLumber;
    { Methods & Properties }
    property SoftwoodLumber: IXMLSoftwoodLumber read Get_SoftwoodLumber;
    property HardwoodLumber: IXMLHardwoodLumber read Get_HardwoodLumber;
  end;

{ IXMLSoftwoodLumber }

  IXMLSoftwoodLumber = interface(IXMLNode)
    ['{BF2E6223-08EE-43B0-9B12-6758139F21B9}']
    { Property Accessors }
    function Get_SoftwoodLumberCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
    function Get_Packaging: IXMLPackaging;
    { Methods & Properties }
    property SoftwoodLumberCharacteristics: IXMLSoftwoodLumberCharacteristicsClass read Get_SoftwoodLumberCharacteristics;
    property Packaging: IXMLPackaging read Get_Packaging;
  end;

{ IXMLSoftwoodLumberCharacteristicsClass }

  IXMLSoftwoodLumberCharacteristicsClass = interface(IXMLNode)
    ['{3E92B4CB-A956-482E-BFB0-CD57FD77982F}']
    { Property Accessors }
    function Get_LumberSpecies: IXMLLumberSpeciesClassList;
    function Get_LumberGrade: IXMLLumberGradeClass;
    function Get_Length: IXMLDimensionConstructionClassList;
    function Get_Width: IXMLDimensionConstructionClassList;
    function Get_Thickness: IXMLDimensionConstructionClassList;
    function Get_Seasoning: IXMLLumberSeasoningClass;
    function Get_MoistureContent: IXMLLumberMoistureContentClass;
    function Get_HeatTreatment: IXMLHeatTreatmentClass;
    function Get_ManufacturingProcess: IXMLLumberManufacturingProcessClassList;
    function Get_PatternProfile: IXMLLumberPatternProfileClass;
    function Get_Trim: IXMLLumberTrimClass;
    function Get_Joining: IXMLLumberJoiningClass;
    function Get_PressureTreatment: IXMLPressureTreatmentClass;
    function Get_FireTreatment: IXMLFireTreatmentClass;
    function Get_OtherTreatment: IXMLOtherTreatmentClass;
    function Get_GradeStamp: IXMLConstructionGradeStampClass;
    function Get_ExLog: IXMLExLogClass;
    function Get_ClassIdentifier: IXMLIdentifierS60List;
    function Get_Weight: IXMLMeasurement;
    function Get_LabelCharacteristics: IXMLLabelCharacteristics;
    function Get_StencilCharacteristics: IXMLStencilCharacteristics;
    function Get_Wrap: IXMLWrap;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    function Get_AdditionalText: IXMLS255List;
    function Get_LengthCutDescription: IXMLLengthCutDescription;
    function Get_ShippingMark: WideString;
    procedure Set_ShippingMark(Value: WideString);
    { Methods & Properties }
    property LumberSpecies: IXMLLumberSpeciesClassList read Get_LumberSpecies;
    property LumberGrade: IXMLLumberGradeClass read Get_LumberGrade;
    property Length: IXMLDimensionConstructionClassList read Get_Length;
    property Width: IXMLDimensionConstructionClassList read Get_Width;
    property Thickness: IXMLDimensionConstructionClassList read Get_Thickness;
    property Seasoning: IXMLLumberSeasoningClass read Get_Seasoning;
    property MoistureContent: IXMLLumberMoistureContentClass read Get_MoistureContent;
    property HeatTreatment: IXMLHeatTreatmentClass read Get_HeatTreatment;
    property ManufacturingProcess: IXMLLumberManufacturingProcessClassList read Get_ManufacturingProcess;
    property PatternProfile: IXMLLumberPatternProfileClass read Get_PatternProfile;
    property Trim: IXMLLumberTrimClass read Get_Trim;
    property Joining: IXMLLumberJoiningClass read Get_Joining;
    property PressureTreatment: IXMLPressureTreatmentClass read Get_PressureTreatment;
    property FireTreatment: IXMLFireTreatmentClass read Get_FireTreatment;
    property OtherTreatment: IXMLOtherTreatmentClass read Get_OtherTreatment;
    property GradeStamp: IXMLConstructionGradeStampClass read Get_GradeStamp;
    property ExLog: IXMLExLogClass read Get_ExLog;
    property ClassIdentifier: IXMLIdentifierS60List read Get_ClassIdentifier;
    property Weight: IXMLMeasurement read Get_Weight;
    property LabelCharacteristics: IXMLLabelCharacteristics read Get_LabelCharacteristics;
    property StencilCharacteristics: IXMLStencilCharacteristics read Get_StencilCharacteristics;
    property Wrap: IXMLWrap read Get_Wrap;
    property SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList read Get_SafetyAndEnvironmentalInformation;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property LengthCutDescription: IXMLLengthCutDescription read Get_LengthCutDescription;
    property ShippingMark: WideString read Get_ShippingMark write Set_ShippingMark;
  end;

{ IXMLLumberGradeClass }

  IXMLLumberGradeClass = interface(IXMLNode)
    ['{5962F8BC-E646-44FF-A588-958C40627CC5}']
    { Property Accessors }
    function Get_GradeType: WideString;
    function Get_GradingRule: WideString;
    function Get_GradeAgency: WideString;
    function Get_ModulusElasticity: WideString;
    function Get_Face: WideString;
    function Get_GradeName: WideString;
    function Get_GradeCode: WideString;
    function Get_AdditionalText: WideString;
    procedure Set_GradeType(Value: WideString);
    procedure Set_GradingRule(Value: WideString);
    procedure Set_GradeAgency(Value: WideString);
    procedure Set_ModulusElasticity(Value: WideString);
    procedure Set_Face(Value: WideString);
    procedure Set_GradeName(Value: WideString);
    procedure Set_GradeCode(Value: WideString);
    procedure Set_AdditionalText(Value: WideString);
    { Methods & Properties }
    property GradeType: WideString read Get_GradeType write Set_GradeType;
    property GradingRule: WideString read Get_GradingRule write Set_GradingRule;
    property GradeAgency: WideString read Get_GradeAgency write Set_GradeAgency;
    property ModulusElasticity: WideString read Get_ModulusElasticity write Set_ModulusElasticity;
    property Face: WideString read Get_Face write Set_Face;
    property GradeName: WideString read Get_GradeName write Set_GradeName;
    property GradeCode: WideString read Get_GradeCode write Set_GradeCode;
    property AdditionalText: WideString read Get_AdditionalText write Set_AdditionalText;
  end;

{ IXMLDimensionConstructionClass }

  IXMLDimensionConstructionClass = interface(IXMLNode)
    ['{8DD2B67F-BBA8-4180-8F5B-97D3BCBF6D45}']
    { Property Accessors }
    function Get_ActualNominal: WideString;
    function Get_WithGrain: WideString;
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ActualNominal(Value: WideString);
    procedure Set_WithGrain(Value: WideString);
    { Methods & Properties }
    property ActualNominal: WideString read Get_ActualNominal write Set_ActualNominal;
    property WithGrain: WideString read Get_WithGrain write Set_WithGrain;
    property Value: IXMLValue read Get_Value;
    property RangeMin: IXMLRangeMin read Get_RangeMin;
    property RangeMax: IXMLRangeMax read Get_RangeMax;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLDimensionConstructionClassList }

  IXMLDimensionConstructionClassList = interface(IXMLNodeCollection)
    ['{96C5DC34-AC79-4444-9390-211CB219AD1D}']
    { Methods & Properties }
    function Add: IXMLDimensionConstructionClass;
    function Insert(const Index: Integer): IXMLDimensionConstructionClass;
    function Get_Item(Index: Integer): IXMLDimensionConstructionClass;
    property Items[Index: Integer]: IXMLDimensionConstructionClass read Get_Item; default;
  end;

{ IXMLLumberSeasoningClass }

  IXMLLumberSeasoningClass = interface(IXMLNode)
    ['{2B4787DF-7AB0-4D4D-B704-A496C44DBDE9}']
    { Property Accessors }
    function Get_SeasoningType: WideString;
    function Get_AdditionalText: WideString;
    procedure Set_SeasoningType(Value: WideString);
    procedure Set_AdditionalText(Value: WideString);
    { Methods & Properties }
    property SeasoningType: WideString read Get_SeasoningType write Set_SeasoningType;
    property AdditionalText: WideString read Get_AdditionalText write Set_AdditionalText;
  end;

{ IXMLLumberMoistureContentClass }

  IXMLLumberMoistureContentClass = interface(IXMLNode)
    ['{0A64CCAE-A407-42BF-B391-C6C7F5AE9DD3}']
    { Property Accessors }
    function Get_MoistureContentPercentage: WideString;
    function Get_AdditionalText: WideString;
    procedure Set_MoistureContentPercentage(Value: WideString);
    procedure Set_AdditionalText(Value: WideString);
    { Methods & Properties }
    property MoistureContentPercentage: WideString read Get_MoistureContentPercentage write Set_MoistureContentPercentage;
    property AdditionalText: WideString read Get_AdditionalText write Set_AdditionalText;
  end;

{ IXMLHeatTreatmentClass }

  IXMLHeatTreatmentClass = interface(IXMLNodeCollection)
    ['{44176628-68FB-4A9D-8879-340E2A915033}']
    { Property Accessors }
    function Get_HeatTreatmentType: WideString;
    function Get_AdditionalText(Index: Integer): WideString;
    procedure Set_HeatTreatmentType(Value: WideString);
    { Methods & Properties }
    function Add(const AdditionalText: WideString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: WideString): IXMLNode;
    property HeatTreatmentType: WideString read Get_HeatTreatmentType write Set_HeatTreatmentType;
    property AdditionalText[Index: Integer]: WideString read Get_AdditionalText; default;
  end;

{ IXMLLumberManufacturingProcessClass }

  IXMLLumberManufacturingProcessClass = interface(IXMLNode)
    ['{B25BE7A8-B03B-4AB4-84BC-D5D5DB5EED1C}']
    { Property Accessors }
    function Get_ManufacturingProcessType: WideString;
    function Get_ManufacturingProcessAgency: WideString;
    function Get_Value: Variant;
    function Get_AdditionalText: WideString;
    procedure Set_ManufacturingProcessType(Value: WideString);
    procedure Set_ManufacturingProcessAgency(Value: WideString);
    procedure Set_Value(Value: Variant);
    procedure Set_AdditionalText(Value: WideString);
    { Methods & Properties }
    property ManufacturingProcessType: WideString read Get_ManufacturingProcessType write Set_ManufacturingProcessType;
    property ManufacturingProcessAgency: WideString read Get_ManufacturingProcessAgency write Set_ManufacturingProcessAgency;
    property Value: Variant read Get_Value write Set_Value;
    property AdditionalText: WideString read Get_AdditionalText write Set_AdditionalText;
  end;

{ IXMLLumberManufacturingProcessClassList }

  IXMLLumberManufacturingProcessClassList = interface(IXMLNodeCollection)
    ['{DE5EAACB-0C3F-4AB6-BB4A-2E3F0BFEC5E8}']
    { Methods & Properties }
    function Add: IXMLLumberManufacturingProcessClass;
    function Insert(const Index: Integer): IXMLLumberManufacturingProcessClass;
    function Get_Item(Index: Integer): IXMLLumberManufacturingProcessClass;
    property Items[Index: Integer]: IXMLLumberManufacturingProcessClass read Get_Item; default;
  end;

{ IXMLLumberPatternProfileClass }

  IXMLLumberPatternProfileClass = interface(IXMLNode)
    ['{DA770B25-D78B-4E2F-B351-7A1F64DFAC9B}']
    { Property Accessors }
    function Get_PatternProfileType: WideString;
    function Get_PatternProfileAgency: WideString;
    function Get_PatternProfileCode: WideString;
    function Get_AdditionalText: WideString;
    procedure Set_PatternProfileType(Value: WideString);
    procedure Set_PatternProfileAgency(Value: WideString);
    procedure Set_PatternProfileCode(Value: WideString);
    procedure Set_AdditionalText(Value: WideString);
    { Methods & Properties }
    property PatternProfileType: WideString read Get_PatternProfileType write Set_PatternProfileType;
    property PatternProfileAgency: WideString read Get_PatternProfileAgency write Set_PatternProfileAgency;
    property PatternProfileCode: WideString read Get_PatternProfileCode write Set_PatternProfileCode;
    property AdditionalText: WideString read Get_AdditionalText write Set_AdditionalText;
  end;

{ IXMLLumberTrimClass }

  IXMLLumberTrimClass = interface(IXMLNode)
    ['{395E00F5-B78E-4439-9A0C-E529FC5B25D0}']
    { Property Accessors }
    function Get_TrimType: WideString;
    function Get_AdditionalText: WideString;
    procedure Set_TrimType(Value: WideString);
    procedure Set_AdditionalText(Value: WideString);
    { Methods & Properties }
    property TrimType: WideString read Get_TrimType write Set_TrimType;
    property AdditionalText: WideString read Get_AdditionalText write Set_AdditionalText;
  end;

{ IXMLLumberJoiningClass }

  IXMLLumberJoiningClass = interface(IXMLNode)
    ['{12B965DC-652F-418D-AFD4-6C16B063A889}']
    { Property Accessors }
    function Get_JoiningType: WideString;
    function Get_AdditionalText: WideString;
    procedure Set_JoiningType(Value: WideString);
    procedure Set_AdditionalText(Value: WideString);
    { Methods & Properties }
    property JoiningType: WideString read Get_JoiningType write Set_JoiningType;
    property AdditionalText: WideString read Get_AdditionalText write Set_AdditionalText;
  end;

{ IXMLPressureTreatmentClass }

  IXMLPressureTreatmentClass = interface(IXMLNode)
    ['{94AFD7BF-2126-497B-9D49-EF281E50695B}']
    { Property Accessors }
    function Get_PressureTreatmentCompound: IXMLPressureTreatmentCompoundClass;
    function Get_PressureTreatmentConcentration: IXMLPressureTreatmentConcentration;
    function Get_PressureTreatmentComStdorUseCategory: WideString;
    procedure Set_PressureTreatmentComStdorUseCategory(Value: WideString);
    { Methods & Properties }
    property PressureTreatmentCompound: IXMLPressureTreatmentCompoundClass read Get_PressureTreatmentCompound;
    property PressureTreatmentConcentration: IXMLPressureTreatmentConcentration read Get_PressureTreatmentConcentration;
    property PressureTreatmentComStdorUseCategory: WideString read Get_PressureTreatmentComStdorUseCategory write Set_PressureTreatmentComStdorUseCategory;
  end;

{ IXMLPressureTreatmentCompoundClass }

  IXMLPressureTreatmentCompoundClass = interface(IXMLNode)
    ['{4347EFDF-2AD3-4BE0-85C8-EB3A38CC7134}']
    { Property Accessors }
    function Get_CompoundType: WideString;
    function Get_CompoundAgency: WideString;
    function Get_Value: Variant;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_CompoundType(Value: WideString);
    procedure Set_CompoundAgency(Value: WideString);
    procedure Set_Value(Value: Variant);
    { Methods & Properties }
    property CompoundType: WideString read Get_CompoundType write Set_CompoundType;
    property CompoundAgency: WideString read Get_CompoundAgency write Set_CompoundAgency;
    property Value: Variant read Get_Value write Set_Value;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLPressureTreatmentConcentration }

  IXMLPressureTreatmentConcentration = interface(IXMLNode)
    ['{C166A951-1BFE-49B4-9016-0A1C3CB0BC18}']
    { Property Accessors }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
    { Methods & Properties }
    property UOM: WideString read Get_UOM write Set_UOM;
  end;

{ IXMLFireTreatmentClass }

  IXMLFireTreatmentClass = interface(IXMLNodeCollection)
    ['{2DB6D718-E907-4154-B173-6E25BD51381D}']
    { Property Accessors }
    function Get_FireTreatmentType: WideString;
    function Get_AdditionalText(Index: Integer): WideString;
    procedure Set_FireTreatmentType(Value: WideString);
    { Methods & Properties }
    function Add(const AdditionalText: WideString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: WideString): IXMLNode;
    property FireTreatmentType: WideString read Get_FireTreatmentType write Set_FireTreatmentType;
    property AdditionalText[Index: Integer]: WideString read Get_AdditionalText; default;
  end;

{ IXMLOtherTreatmentClass }

  IXMLOtherTreatmentClass = interface(IXMLNodeCollection)
    ['{67FE3E5E-9563-4394-8E04-BFEC0077D042}']
    { Property Accessors }
    function Get_AdditionalText(Index: Integer): WideString;
    { Methods & Properties }
    function Add(const AdditionalText: WideString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: WideString): IXMLNode;
    property AdditionalText[Index: Integer]: WideString read Get_AdditionalText; default;
  end;

{ IXMLConstructionGradeStampClass }

  IXMLConstructionGradeStampClass = interface(IXMLNode)
    ['{9F6EF471-60DE-4D68-B9EC-D5D6EC282F28}']
    { Property Accessors }
    function Get_GradeStamped: WideString;
    function Get_GradeStampMillNumber: WideString;
    function Get_GradeStampLocation: WideString;
    procedure Set_GradeStamped(Value: WideString);
    procedure Set_GradeStampMillNumber(Value: WideString);
    procedure Set_GradeStampLocation(Value: WideString);
    { Methods & Properties }
    property GradeStamped: WideString read Get_GradeStamped write Set_GradeStamped;
    property GradeStampMillNumber: WideString read Get_GradeStampMillNumber write Set_GradeStampMillNumber;
    property GradeStampLocation: WideString read Get_GradeStampLocation write Set_GradeStampLocation;
  end;

{ IXMLExLogClass }

  IXMLExLogClass = interface(IXMLNode)
    ['{67D04179-734D-48B8-BCC7-65BB18FD752B}']
    { Property Accessors }
    function Get_Value: IXMLValue;
    { Methods & Properties }
    property Value: IXMLValue read Get_Value;
  end;

{ IXMLLengthCutDescription }

  IXMLLengthCutDescription = interface(IXMLNode)
    ['{1A1F4ADA-57E9-4AC8-BD3B-A30155B49A93}']
    { Property Accessors }
    function Get_LengthCutType: WideString;
    procedure Set_LengthCutType(Value: WideString);
    { Methods & Properties }
    property LengthCutType: WideString read Get_LengthCutType write Set_LengthCutType;
  end;

{ IXMLPackaging }

  IXMLPackaging = interface(IXMLNode)
    ['{70BEA29F-F72E-445A-A059-1AA5BEA3FF8F}']
    { Property Accessors }
    function Get_ProductPackaging: IXMLProductPackagingClass;
    { Methods & Properties }
    property ProductPackaging: IXMLProductPackagingClass read Get_ProductPackaging;
  end;

{ IXMLProductPackagingClass }

  IXMLProductPackagingClass = interface(IXMLNode)
    ['{E023EE77-E39D-42ED-BE0E-6382D5F07E43}']
    { Property Accessors }
    function Get_QuantityInUnit: IXMLMeasurement;
    function Get_UnitDimension: IXMLUnitDimensionType;
    function Get_Weight: IXMLMeasurement;
    function Get_PackageIDInformation: IXMLLumberPackageCodeClass;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_BandCharacteristics: IXMLBandCharacteristicsList;
    function Get_PalletCharacteristics: IXMLPalletCharacteristicsList;
    function Get_Wrap: IXMLWrapList;
    function Get_AdditionalText: IXMLS255List;
    function Get_PackageType: WideString;
    procedure Set_PackageType(Value: WideString);
    { Methods & Properties }
    property QuantityInUnit: IXMLMeasurement read Get_QuantityInUnit;
    property UnitDimension: IXMLUnitDimensionType read Get_UnitDimension;
    property Weight: IXMLMeasurement read Get_Weight;
    property PackageIDInformation: IXMLLumberPackageCodeClass read Get_PackageIDInformation;
    property LabelCharacteristics: IXMLLabelCharacteristicsList read Get_LabelCharacteristics;
    property StencilCharacteristics: IXMLStencilCharacteristicsList read Get_StencilCharacteristics;
    property BandCharacteristics: IXMLBandCharacteristicsList read Get_BandCharacteristics;
    property PalletCharacteristics: IXMLPalletCharacteristicsList read Get_PalletCharacteristics;
    property Wrap: IXMLWrapList read Get_Wrap;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
    property PackageType: WideString read Get_PackageType write Set_PackageType;
  end;

{ IXMLUnitDimensionType }

  IXMLUnitDimensionType = interface(IXMLNode)
    ['{114D30CD-D368-4F3D-9D99-CED9984228FA}']
    { Property Accessors }
    function Get_Length: IXMLDimensionMeasurementClass;
    function Get_Width: IXMLDimensionMeasurementClass;
    function Get_Height: IXMLDimensionMeasurementClass;
    function Get_PiecesPerRow: LongWord;
    function Get_RowsPerUnit: LongWord;
    procedure Set_PiecesPerRow(Value: LongWord);
    procedure Set_RowsPerUnit(Value: LongWord);
    { Methods & Properties }
    property Length: IXMLDimensionMeasurementClass read Get_Length;
    property Width: IXMLDimensionMeasurementClass read Get_Width;
    property Height: IXMLDimensionMeasurementClass read Get_Height;
    property PiecesPerRow: LongWord read Get_PiecesPerRow write Set_PiecesPerRow;
    property RowsPerUnit: LongWord read Get_RowsPerUnit write Set_RowsPerUnit;
  end;

{ IXMLDimensionMeasurementClass }

  IXMLDimensionMeasurementClass = interface(IXMLNode)
    ['{E77EAA21-6FB9-4B2D-9110-E445702C4529}']
    { Property Accessors }
    function Get_ActualNominal: WideString;
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    procedure Set_ActualNominal(Value: WideString);
    { Methods & Properties }
    property ActualNominal: WideString read Get_ActualNominal write Set_ActualNominal;
    property Value: IXMLValue read Get_Value;
    property RangeMin: IXMLRangeMin read Get_RangeMin;
    property RangeMax: IXMLRangeMax read Get_RangeMax;
  end;

{ IXMLLumberPackageCodeClass }

  IXMLLumberPackageCodeClass = interface(IXMLNode)
    ['{6731C9C2-E952-481B-B903-A5141B09B785}']
    { Property Accessors }
    function Get_PackageAgency: WideString;
    function Get_PackageCode: WideString;
    function Get_PackageName: WideString;
    procedure Set_PackageAgency(Value: WideString);
    procedure Set_PackageCode(Value: WideString);
    procedure Set_PackageName(Value: WideString);
    { Methods & Properties }
    property PackageAgency: WideString read Get_PackageAgency write Set_PackageAgency;
    property PackageCode: WideString read Get_PackageCode write Set_PackageCode;
    property PackageName: WideString read Get_PackageName write Set_PackageName;
  end;

{ IXMLHardwoodLumber }

  IXMLHardwoodLumber = interface(IXMLNode)
    ['{637CB5DB-02EC-41F5-8DEB-7375FD10C8C6}']
    { Property Accessors }
    function Get_HardwoodLumberCharacteristics: WideString;
    function Get_Packaging: IXMLPackaging;
    procedure Set_HardwoodLumberCharacteristics(Value: WideString);
    { Methods & Properties }
    property HardwoodLumberCharacteristics: WideString read Get_HardwoodLumberCharacteristics write Set_HardwoodLumberCharacteristics;
    property Packaging: IXMLPackaging read Get_Packaging;
  end;

{ IXMLRoofingSidingDeckingFencing }

  IXMLRoofingSidingDeckingFencing = interface(IXMLNode)
    ['{DEC0ABD2-8121-4230-999C-F8C7C1D79753}']
    { Property Accessors }
    function Get_NaturalWoodSiding: IXMLNaturalWoodSiding;
    function Get_NaturalWoodSidingOther: IXMLNaturalWoodSidingOther;
    function Get_DeckAndPorchFlooringMaterialsNaturalWood: IXMLDeckAndPorchFlooringMaterialsNaturalWood;
    { Methods & Properties }
    property NaturalWoodSiding: IXMLNaturalWoodSiding read Get_NaturalWoodSiding;
    property NaturalWoodSidingOther: IXMLNaturalWoodSidingOther read Get_NaturalWoodSidingOther;
    property DeckAndPorchFlooringMaterialsNaturalWood: IXMLDeckAndPorchFlooringMaterialsNaturalWood read Get_DeckAndPorchFlooringMaterialsNaturalWood;
  end;

{ IXMLNaturalWoodSiding }

  IXMLNaturalWoodSiding = interface(IXMLNode)
    ['{3D447CE0-D493-42FF-93FB-5EBBE3DB5C31}']
    { Property Accessors }
    function Get_NaturalWoodSidingCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
    function Get_Packaging: IXMLPackaging;
    { Methods & Properties }
    property NaturalWoodSidingCharacteristics: IXMLSoftwoodLumberCharacteristicsClass read Get_NaturalWoodSidingCharacteristics;
    property Packaging: IXMLPackaging read Get_Packaging;
  end;

{ IXMLNaturalWoodSidingOther }

  IXMLNaturalWoodSidingOther = interface(IXMLNode)
    ['{727426D6-6DF6-4CBF-A09A-C4148FC4B7FB}']
    { Property Accessors }
    function Get_NaturalWoodSidingOtherCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
    function Get_Packaging: IXMLPackaging;
    { Methods & Properties }
    property NaturalWoodSidingOtherCharacteristics: IXMLSoftwoodLumberCharacteristicsClass read Get_NaturalWoodSidingOtherCharacteristics;
    property Packaging: IXMLPackaging read Get_Packaging;
  end;

{ IXMLDeckAndPorchFlooringMaterialsNaturalWood }

  IXMLDeckAndPorchFlooringMaterialsNaturalWood = interface(IXMLNode)
    ['{5BC8AA1A-9612-45F8-904E-D645C93362EA}']
    { Property Accessors }
    function Get_DeckAndPorchFlooringMaterialsNaturalWoodCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
    function Get_Packaging: IXMLPackaging;
    { Methods & Properties }
    property DeckAndPorchFlooringMaterialsNaturalWoodCharacteristics: IXMLSoftwoodLumberCharacteristicsClass read Get_DeckAndPorchFlooringMaterialsNaturalWoodCharacteristics;
    property Packaging: IXMLPackaging read Get_Packaging;
  end;

{ IXMLCompositeAndVeneerWoodPanels }

  IXMLCompositeAndVeneerWoodPanels = interface(IXMLNode)
    ['{694CE790-B04F-4304-99A5-CE57E1089CE2}']
    { Property Accessors }
    function Get_SoftwoodPlywood: IXMLNAPlywoodOSBCharacteristicsClass;
    function Get_Packaging: IXMLPackaging;
    { Methods & Properties }
    property SoftwoodPlywood: IXMLNAPlywoodOSBCharacteristicsClass read Get_SoftwoodPlywood;
    property Packaging: IXMLPackaging read Get_Packaging;
  end;

{ IXMLNAPlywoodOSBCharacteristicsClass }

  IXMLNAPlywoodOSBCharacteristicsClass = interface(IXMLNode)
    ['{D9698F3E-66A5-497A-8504-F0A4B70F760F}']
    { Property Accessors }
    function Get_PlywoodOSBGrade: IXMLPlywoodOSBGradeClass;
    function Get_Thickness: IXMLDimensionConstructionClassList;
    function Get_Width: IXMLDimensionConstructionClassList;
    function Get_Length: IXMLDimensionConstructionClassList;
    function Get_PlywoodOSBSpecies: IXMLPlywoodOSBSpeciesTypeList;
    function Get_PlyNumber: LongWord;
    function Get_Surface: IXMLPlywoodOSBSurfaceClass;
    function Get_Overlay: IXMLPlywoodOSBOverlayClassList;
    function Get_GlueExposure: WideString;
    function Get_Edge: IXMLPlywoodOSBEdgeClass;
    function Get_PressureTreatment: IXMLPressureTreatmentClass;
    function Get_FireTreatment: IXMLFireTreatmentClass;
    function Get_Supplemental: IXMLPlywoodOSBSupplementalClassList;
    function Get_Brand: WideString;
    function Get_GradeAgency: WideString;
    function Get_GradeStamp: IXMLConstructionGradeStampClass;
    function Get_ClassIdentifier: IXMLIdentifierS60;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_PlyNumber(Value: LongWord);
    procedure Set_GlueExposure(Value: WideString);
    procedure Set_Brand(Value: WideString);
    procedure Set_GradeAgency(Value: WideString);
    { Methods & Properties }
    property PlywoodOSBGrade: IXMLPlywoodOSBGradeClass read Get_PlywoodOSBGrade;
    property Thickness: IXMLDimensionConstructionClassList read Get_Thickness;
    property Width: IXMLDimensionConstructionClassList read Get_Width;
    property Length: IXMLDimensionConstructionClassList read Get_Length;
    property PlywoodOSBSpecies: IXMLPlywoodOSBSpeciesTypeList read Get_PlywoodOSBSpecies;
    property PlyNumber: LongWord read Get_PlyNumber write Set_PlyNumber;
    property Surface: IXMLPlywoodOSBSurfaceClass read Get_Surface;
    property Overlay: IXMLPlywoodOSBOverlayClassList read Get_Overlay;
    property GlueExposure: WideString read Get_GlueExposure write Set_GlueExposure;
    property Edge: IXMLPlywoodOSBEdgeClass read Get_Edge;
    property PressureTreatment: IXMLPressureTreatmentClass read Get_PressureTreatment;
    property FireTreatment: IXMLFireTreatmentClass read Get_FireTreatment;
    property Supplemental: IXMLPlywoodOSBSupplementalClassList read Get_Supplemental;
    property Brand: WideString read Get_Brand write Set_Brand;
    property GradeAgency: WideString read Get_GradeAgency write Set_GradeAgency;
    property GradeStamp: IXMLConstructionGradeStampClass read Get_GradeStamp;
    property ClassIdentifier: IXMLIdentifierS60 read Get_ClassIdentifier;
    property LabelCharacteristics: IXMLLabelCharacteristicsList read Get_LabelCharacteristics;
    property StencilCharacteristics: IXMLStencilCharacteristicsList read Get_StencilCharacteristics;
    property SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList read Get_SafetyAndEnvironmentalInformation;
  end;

{ IXMLPlywoodOSBGradeClass }

  IXMLPlywoodOSBGradeClass = interface(IXMLNode)
    ['{B5479F3C-5FF9-41AD-A21E-99C2C6CD2B49}']
    { Property Accessors }
    function Get_Face: WideString;
    function Get_SpanRating: WideString;
    function Get_StrengthGroup: WideString;
    procedure Set_Face(Value: WideString);
    procedure Set_SpanRating(Value: WideString);
    procedure Set_StrengthGroup(Value: WideString);
    { Methods & Properties }
    property Face: WideString read Get_Face write Set_Face;
    property SpanRating: WideString read Get_SpanRating write Set_SpanRating;
    property StrengthGroup: WideString read Get_StrengthGroup write Set_StrengthGroup;
  end;

{ IXMLPlywoodOSBSurfaceClass }

  IXMLPlywoodOSBSurfaceClass = interface(IXMLNodeCollection)
    ['{943DF568-CAA3-47A3-A66E-2A3549EFDA6A}']
    { Property Accessors }
    function Get_SurfaceType: WideString;
    function Get_AdditionalText(Index: Integer): WideString;
    procedure Set_SurfaceType(Value: WideString);
    { Methods & Properties }
    function Add(const AdditionalText: WideString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: WideString): IXMLNode;
    property SurfaceType: WideString read Get_SurfaceType write Set_SurfaceType;
    property AdditionalText[Index: Integer]: WideString read Get_AdditionalText; default;
  end;

{ IXMLPlywoodOSBOverlayClass }

  IXMLPlywoodOSBOverlayClass = interface(IXMLNodeCollection)
    ['{B960A40C-B887-4A6A-A820-11CC8F929A4F}']
    { Property Accessors }
    function Get_OverlaySide: WideString;
    function Get_AdditionalText(Index: Integer): WideString;
    procedure Set_OverlaySide(Value: WideString);
    { Methods & Properties }
    function Add(const AdditionalText: WideString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: WideString): IXMLNode;
    property OverlaySide: WideString read Get_OverlaySide write Set_OverlaySide;
    property AdditionalText[Index: Integer]: WideString read Get_AdditionalText; default;
  end;

{ IXMLPlywoodOSBOverlayClassList }

  IXMLPlywoodOSBOverlayClassList = interface(IXMLNodeCollection)
    ['{E4F3D3D2-22E3-4257-B39A-1BCE46EAB34A}']
    { Methods & Properties }
    function Add: IXMLPlywoodOSBOverlayClass;
    function Insert(const Index: Integer): IXMLPlywoodOSBOverlayClass;
    function Get_Item(Index: Integer): IXMLPlywoodOSBOverlayClass;
    property Items[Index: Integer]: IXMLPlywoodOSBOverlayClass read Get_Item; default;
  end;

{ IXMLPlywoodOSBEdgeClass }

  IXMLPlywoodOSBEdgeClass = interface(IXMLNode)
    ['{2829F0B2-BD6E-4E93-B7AF-1667404CE69C}']
    { Property Accessors }
    function Get_EdgeType: WideString;
    function Get_EdgeLocation: WideString;
    function Get_EdgeMachiningProfile: WideString;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_EdgeType(Value: WideString);
    procedure Set_EdgeLocation(Value: WideString);
    procedure Set_EdgeMachiningProfile(Value: WideString);
    { Methods & Properties }
    property EdgeType: WideString read Get_EdgeType write Set_EdgeType;
    property EdgeLocation: WideString read Get_EdgeLocation write Set_EdgeLocation;
    property EdgeMachiningProfile: WideString read Get_EdgeMachiningProfile write Set_EdgeMachiningProfile;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLPlywoodOSBSupplementalClass }

  IXMLPlywoodOSBSupplementalClass = interface(IXMLNodeCollection)
    ['{F007E302-AD71-4319-9457-142009A42695}']
    { Property Accessors }
    function Get_SupplementalSpecification: WideString;
    function Get_AdditionalText(Index: Integer): WideString;
    procedure Set_SupplementalSpecification(Value: WideString);
    { Methods & Properties }
    function Add(const AdditionalText: WideString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: WideString): IXMLNode;
    property SupplementalSpecification: WideString read Get_SupplementalSpecification write Set_SupplementalSpecification;
    property AdditionalText[Index: Integer]: WideString read Get_AdditionalText; default;
  end;

{ IXMLPlywoodOSBSupplementalClassList }

  IXMLPlywoodOSBSupplementalClassList = interface(IXMLNodeCollection)
    ['{B7BAA6A9-CFA0-4DF4-BF21-6C4A2781EDAD}']
    { Methods & Properties }
    function Add: IXMLPlywoodOSBSupplementalClass;
    function Insert(const Index: Integer): IXMLPlywoodOSBSupplementalClass;
    function Get_Item(Index: Integer): IXMLPlywoodOSBSupplementalClass;
    property Items[Index: Integer]: IXMLPlywoodOSBSupplementalClass read Get_Item; default;
  end;

{ IXMLConstructionPackagesAndPreFabPanels }

  IXMLConstructionPackagesAndPreFabPanels = interface(IXMLNode)
    ['{DD65097F-B488-463F-AA7F-BB4436DE0C36}']
    { Property Accessors }
    function Get_Floor: IXMLFloor;
    function Get_Wall: IXMLWall;
    function Get_Roof: IXMLRoof;
    function Get_Packaging: IXMLPackaging;
    { Methods & Properties }
    property Floor: IXMLFloor read Get_Floor;
    property Wall: IXMLWall read Get_Wall;
    property Roof: IXMLRoof read Get_Roof;
    property Packaging: IXMLPackaging read Get_Packaging;
  end;

{ IXMLFloor }

  IXMLFloor = interface(IXMLNode)
    ['{92CA8ED0-A786-4359-AB0D-F2B2C1FB8756}']
    { Property Accessors }
    function Get_FloorPanel: WideString;
    function Get_FloorPackage: WideString;
    function Get_FloorTruss: WideString;
    procedure Set_FloorPanel(Value: WideString);
    procedure Set_FloorPackage(Value: WideString);
    procedure Set_FloorTruss(Value: WideString);
    { Methods & Properties }
    property FloorPanel: WideString read Get_FloorPanel write Set_FloorPanel;
    property FloorPackage: WideString read Get_FloorPackage write Set_FloorPackage;
    property FloorTruss: WideString read Get_FloorTruss write Set_FloorTruss;
  end;

{ IXMLWall }

  IXMLWall = interface(IXMLNode)
    ['{B267C630-A696-4565-A013-0DF2C8B7822B}']
    { Property Accessors }
    function Get_WallPanel: WideString;
    function Get_WallPackage: WideString;
    procedure Set_WallPanel(Value: WideString);
    procedure Set_WallPackage(Value: WideString);
    { Methods & Properties }
    property WallPanel: WideString read Get_WallPanel write Set_WallPanel;
    property WallPackage: WideString read Get_WallPackage write Set_WallPackage;
  end;

{ IXMLRoof }

  IXMLRoof = interface(IXMLNode)
    ['{94E501E2-218F-49AC-B5A3-277B5DC1BE52}']
    { Property Accessors }
    function Get_RoofPanel: WideString;
    function Get_RoofPackage: WideString;
    function Get_RoofTruss: WideString;
    procedure Set_RoofPanel(Value: WideString);
    procedure Set_RoofPackage(Value: WideString);
    procedure Set_RoofTruss(Value: WideString);
    { Methods & Properties }
    property RoofPanel: WideString read Get_RoofPanel write Set_RoofPanel;
    property RoofPackage: WideString read Get_RoofPackage write Set_RoofPackage;
    property RoofTruss: WideString read Get_RoofTruss write Set_RoofTruss;
  end;

{ IXMLPackageInformationClass }

  IXMLPackageInformationClass = interface(IXMLNode)
    ['{1093AD45-FDFF-43D6-AD34-4EA707B16BA3}']
    { Property Accessors }
    function Get_PackageType: WideString;
    function Get_MixedProductPalletIndicator: WideString;
    function Get_PackageLevel: WideString;
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_RawMaterialSet: IXMLIdentifierS60List;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_MachineID: WideString;
    function Get_ItemCount: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_InventoryClass: IXMLInventoryClass;
    function Get_PackageCharacteristics: IXMLPackageCharacteristics;
    function Get_BaleItem: IXMLBaleItemList;
    function Get_BoxItem: IXMLBoxItemList;
    function Get_ReelItem: IXMLReelItemList;
    function Get_ReamItem: IXMLReamItemList;
    function Get_SheetItem: IXMLSheetItemList;
    function Get_UnitItem: IXMLUnitItemList;
    function Get_WoodItem: IXMLWoodItemList;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_EAttachment: IXMLEAttachment;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_PackageType(Value: WideString);
    procedure Set_MixedProductPalletIndicator(Value: WideString);
    procedure Set_PackageLevel(Value: WideString);
    procedure Set_MachineID(Value: WideString);
    { Methods & Properties }
    property PackageType: WideString read Get_PackageType write Set_PackageType;
    property MixedProductPalletIndicator: WideString read Get_MixedProductPalletIndicator write Set_MixedProductPalletIndicator;
    property PackageLevel: WideString read Get_PackageLevel write Set_PackageLevel;
    property Identifier: IXMLIdentifierS60List read Get_Identifier;
    property RawMaterialSet: IXMLIdentifierS60List read Get_RawMaterialSet;
    property PartyIdentifier: IXMLPartyIdentifierList read Get_PartyIdentifier;
    property MachineID: WideString read Get_MachineID write Set_MachineID;
    property ItemCount: IXMLMeasurement read Get_ItemCount;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property InventoryClass: IXMLInventoryClass read Get_InventoryClass;
    property PackageCharacteristics: IXMLPackageCharacteristics read Get_PackageCharacteristics;
    property BaleItem: IXMLBaleItemList read Get_BaleItem;
    property BoxItem: IXMLBoxItemList read Get_BoxItem;
    property ReelItem: IXMLReelItemList read Get_ReelItem;
    property ReamItem: IXMLReamItemList read Get_ReamItem;
    property SheetItem: IXMLSheetItemList read Get_SheetItem;
    property UnitItem: IXMLUnitItemList read Get_UnitItem;
    property WoodItem: IXMLWoodItemList read Get_WoodItem;
    property OtherDate: IXMLOtherDateList read Get_OtherDate;
    property EAttachment: IXMLEAttachment read Get_EAttachment;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLPackageInformationClassList }

  IXMLPackageInformationClassList = interface(IXMLNodeCollection)
    ['{800721CF-1CBE-483D-8308-F739D8772132}']
    { Methods & Properties }
    function Add: IXMLPackageInformationClass;
    function Insert(const Index: Integer): IXMLPackageInformationClass;
    function Get_Item(Index: Integer): IXMLPackageInformationClass;
    property Items[Index: Integer]: IXMLPackageInformationClass read Get_Item; default;
  end;

{ IXMLInventoryClass }

  IXMLInventoryClass = interface(IXMLNode)
    ['{514C1F10-11CB-43FA-A8CE-355B96367996}']
    { Property Accessors }
    function Get_InventoryStatusType: WideString;
    function Get_InventoryOwnedBy: WideString;
    function Get_InventoryClassCode: IXMLInventoryClassCodeList;
    function Get_InventoryClassDescription: IXMLS72List;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_InventoryStatusType(Value: WideString);
    procedure Set_InventoryOwnedBy(Value: WideString);
    { Methods & Properties }
    property InventoryStatusType: WideString read Get_InventoryStatusType write Set_InventoryStatusType;
    property InventoryOwnedBy: WideString read Get_InventoryOwnedBy write Set_InventoryOwnedBy;
    property InventoryClassCode: IXMLInventoryClassCodeList read Get_InventoryClassCode;
    property InventoryClassDescription: IXMLS72List read Get_InventoryClassDescription;
    property AdditionalText: IXMLS255List read Get_AdditionalText;
  end;

{ IXMLInventoryClassCode }

  IXMLInventoryClassCode = interface(IXMLNode)
    ['{6AEA3C4F-64C8-4666-875C-7128C1A75BEE}']
    { Property Accessors }
    function Get_Agency: WideString;
    function Get_InventoryClassLevel: LongWord;
    procedure Set_Agency(Value: WideString);
    procedure Set_InventoryClassLevel(Value: LongWord);
    { Methods & Properties }
    property Agency: WideString read Get_Agency write Set_Agency;
    property InventoryClassLevel: LongWord read Get_InventoryClassLevel write Set_InventoryClassLevel;
  end;

{ IXMLInventoryClassCodeList }

  IXMLInventoryClassCodeList = interface(IXMLNodeCollection)
    ['{9827CCB2-67C0-4361-89E1-E5A4FE070544}']
    { Methods & Properties }
    function Add: IXMLInventoryClassCode;
    function Insert(const Index: Integer): IXMLInventoryClassCode;
    function Get_Item(Index: Integer): IXMLInventoryClassCode;
    property Items[Index: Integer]: IXMLInventoryClassCode read Get_Item; default;
  end;

{ IXMLPackageCharacteristics }

  IXMLPackageCharacteristics = interface(IXMLNode)
    ['{B95FFFCD-52FB-4C5A-96B5-57075D257624}']
    { Property Accessors }
    function Get_Height: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_Length: IXMLMeasurement;
    function Get_LengthCutDescription: IXMLLengthCutDescription;
    { Methods & Properties }
    property Height: IXMLMeasurement read Get_Height;
    property Width: IXMLMeasurement read Get_Width;
    property Length: IXMLMeasurement read Get_Length;
    property LengthCutDescription: IXMLLengthCutDescription read Get_LengthCutDescription;
  end;

{ IXMLBaleItem }

  IXMLBaleItem = interface(IXMLNode)
    ['{06864BE2-CB56-4FC9-B281-729AAC149512}']
    { Property Accessors }
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_MachineID: WideString;
    function Get_Product: IXMLProductClass;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_InventoryClass: IXMLInventoryClass;
    procedure Set_MachineID(Value: WideString);
    { Methods & Properties }
    property Identifier: IXMLIdentifierS60List read Get_Identifier;
    property PartyIdentifier: IXMLPartyIdentifierList read Get_PartyIdentifier;
    property MachineID: WideString read Get_MachineID write Set_MachineID;
    property Product: IXMLProductClass read Get_Product;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property InventoryClass: IXMLInventoryClass read Get_InventoryClass;
  end;

{ IXMLBaleItemList }

  IXMLBaleItemList = interface(IXMLNodeCollection)
    ['{D956C4D5-1A5E-4A1A-A0C3-4457A0CBE347}']
    { Methods & Properties }
    function Add: IXMLBaleItem;
    function Insert(const Index: Integer): IXMLBaleItem;
    function Get_Item(Index: Integer): IXMLBaleItem;
    property Items[Index: Integer]: IXMLBaleItem read Get_Item; default;
  end;

{ IXMLBoxItem }

  IXMLBoxItem = interface(IXMLNode)
    ['{A96B98D2-DFD3-4813-9D3B-900C7CA3F35E}']
    { Property Accessors }
    function Get_MixProductIndicator: WideString;
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_MachineID: WideString;
    function Get_ItemCount: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_ReamItem: IXMLReamItemList;
    function Get_SheetItem: IXMLSheetItem;
    function Get_UnitItem: IXMLUnitItemList;
    function Get_BoxCharacteristics: IXMLBoxCharacteristics;
    function Get_InventoryClass: IXMLInventoryClass;
    procedure Set_MixProductIndicator(Value: WideString);
    procedure Set_MachineID(Value: WideString);
    { Methods & Properties }
    property MixProductIndicator: WideString read Get_MixProductIndicator write Set_MixProductIndicator;
    property Identifier: IXMLIdentifierS60List read Get_Identifier;
    property PartyIdentifier: IXMLPartyIdentifierList read Get_PartyIdentifier;
    property MachineID: WideString read Get_MachineID write Set_MachineID;
    property ItemCount: IXMLMeasurement read Get_ItemCount;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property ReamItem: IXMLReamItemList read Get_ReamItem;
    property SheetItem: IXMLSheetItem read Get_SheetItem;
    property UnitItem: IXMLUnitItemList read Get_UnitItem;
    property BoxCharacteristics: IXMLBoxCharacteristics read Get_BoxCharacteristics;
    property InventoryClass: IXMLInventoryClass read Get_InventoryClass;
  end;

{ IXMLBoxItemList }

  IXMLBoxItemList = interface(IXMLNodeCollection)
    ['{463CD61E-7929-4485-AF4D-120BA3B9B7F1}']
    { Methods & Properties }
    function Add: IXMLBoxItem;
    function Insert(const Index: Integer): IXMLBoxItem;
    function Get_Item(Index: Integer): IXMLBoxItem;
    property Items[Index: Integer]: IXMLBoxItem read Get_Item; default;
  end;

{ IXMLReamItem }

  IXMLReamItem = interface(IXMLNode)
    ['{5013B03F-CB95-4CB8-A453-AA3552E30390}']
    { Property Accessors }
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_ItemCount: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_SheetItem: IXMLSheetItem;
    { Methods & Properties }
    property Identifier: IXMLIdentifierS60List read Get_Identifier;
    property ItemCount: IXMLMeasurement read Get_ItemCount;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property SheetItem: IXMLSheetItem read Get_SheetItem;
  end;

{ IXMLReamItemList }

  IXMLReamItemList = interface(IXMLNodeCollection)
    ['{494E0B0B-B38A-4770-A011-1D0D3DCC8610}']
    { Methods & Properties }
    function Add: IXMLReamItem;
    function Insert(const Index: Integer): IXMLReamItem;
    function Get_Item(Index: Integer): IXMLReamItem;
    property Items[Index: Integer]: IXMLReamItem read Get_Item; default;
  end;

{ IXMLSheetItem }

  IXMLSheetItem = interface(IXMLNode)
    ['{12469CE3-1781-4BA8-A060-917D6468B94E}']
    { Property Accessors }
    function Get_DateSheeted: IXMLDateSheeted;
    function Get_DateFinished: IXMLDateFinished;
    { Methods & Properties }
    property DateSheeted: IXMLDateSheeted read Get_DateSheeted;
    property DateFinished: IXMLDateFinished read Get_DateFinished;
  end;

{ IXMLSheetItemList }

  IXMLSheetItemList = interface(IXMLNodeCollection)
    ['{AEBFFF24-6BD7-4F13-81AF-744B986D52C8}']
    { Methods & Properties }
    function Add: IXMLSheetItem;
    function Insert(const Index: Integer): IXMLSheetItem;
    function Get_Item(Index: Integer): IXMLSheetItem;
    property Items[Index: Integer]: IXMLSheetItem read Get_Item; default;
  end;

{ IXMLDateSheeted }

  IXMLDateSheeted = interface(IXMLNode)
    ['{9A5656C4-D9B6-46C7-A364-8B4060548AD6}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
  end;

{ IXMLDateFinished }

  IXMLDateFinished = interface(IXMLNode)
    ['{1A7651E0-04B3-4887-B310-D6B25AAEDE94}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
  end;

{ IXMLUnitItem }

  IXMLUnitItem = interface(IXMLNode)
    ['{4FAD4A57-59DE-4874-B1EA-2C887209500F}']
    { Property Accessors }
    function Get_Product: IXMLProductClass;
    function Get_UnitCharacteristics: IXMLUnitCharacteristics;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    { Methods & Properties }
    property Product: IXMLProductClass read Get_Product;
    property UnitCharacteristics: IXMLUnitCharacteristics read Get_UnitCharacteristics;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
  end;

{ IXMLUnitItemList }

  IXMLUnitItemList = interface(IXMLNodeCollection)
    ['{046D6FB5-B26F-498A-A0B1-355C52DEC59B}']
    { Methods & Properties }
    function Add: IXMLUnitItem;
    function Insert(const Index: Integer): IXMLUnitItem;
    function Get_Item(Index: Integer): IXMLUnitItem;
    property Items[Index: Integer]: IXMLUnitItem read Get_Item; default;
  end;

{ IXMLReelItem }

  IXMLReelItem = interface(IXMLNode)
    ['{7885FED5-C807-4505-91D8-79FE2D1FBE20}']
    { Property Accessors }
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_MachineID: WideString;
    function Get_DeliveryMessageReelCharacteristics: IXMLDeliveryMessageReelCharacteristics;
    function Get_InventoryClass: IXMLInventoryClass;
    function Get_MillOrderNumber: WideString;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    procedure Set_MachineID(Value: WideString);
    procedure Set_MillOrderNumber(Value: WideString);
    { Methods & Properties }
    property Identifier: IXMLIdentifierS60List read Get_Identifier;
    property PartyIdentifier: IXMLPartyIdentifierList read Get_PartyIdentifier;
    property MachineID: WideString read Get_MachineID write Set_MachineID;
    property DeliveryMessageReelCharacteristics: IXMLDeliveryMessageReelCharacteristics read Get_DeliveryMessageReelCharacteristics;
    property InventoryClass: IXMLInventoryClass read Get_InventoryClass;
    property MillOrderNumber: WideString read Get_MillOrderNumber write Set_MillOrderNumber;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
  end;

{ IXMLReelItemList }

  IXMLReelItemList = interface(IXMLNodeCollection)
    ['{62C96E81-0FFB-4A81-A6E8-F3DB621ADF5A}']
    { Methods & Properties }
    function Add: IXMLReelItem;
    function Insert(const Index: Integer): IXMLReelItem;
    function Get_Item(Index: Integer): IXMLReelItem;
    property Items[Index: Integer]: IXMLReelItem read Get_Item; default;
  end;

{ IXMLDeliveryMessageReelCharacteristics }

  IXMLDeliveryMessageReelCharacteristics = interface(IXMLNode)
    ['{292AB258-AC02-4B06-8B88-EA2A8124D07C}']
    { Property Accessors }
    function Get_ReelWidth: IXMLMeasurement;
    function Get_ReelDiameter: IXMLMeasurement;
    function Get_ReelLength: IXMLMeasurement;
    function Get_MachineID: WideString;
    function Get_TambourID: WideString;
    function Get_SetNumber: LongWord;
    function Get_SetPosition: LongWord;
    function Get_TotalSetPositions: LongWord;
    function Get_TotalSetNumbers: LongWord;
    function Get_NumberOfMillJoins: LongWord;
    function Get_MillJoinLocation: IXMLMillJoinLocationList;
    function Get_DateFinished: IXMLDateFinished;
    function Get_DateWound: IXMLDateWound;
    function Get_Caliper: IXMLCaliper;
    procedure Set_MachineID(Value: WideString);
    procedure Set_TambourID(Value: WideString);
    procedure Set_SetNumber(Value: LongWord);
    procedure Set_SetPosition(Value: LongWord);
    procedure Set_TotalSetPositions(Value: LongWord);
    procedure Set_TotalSetNumbers(Value: LongWord);
    procedure Set_NumberOfMillJoins(Value: LongWord);
    { Methods & Properties }
    property ReelWidth: IXMLMeasurement read Get_ReelWidth;
    property ReelDiameter: IXMLMeasurement read Get_ReelDiameter;
    property ReelLength: IXMLMeasurement read Get_ReelLength;
    property MachineID: WideString read Get_MachineID write Set_MachineID;
    property TambourID: WideString read Get_TambourID write Set_TambourID;
    property SetNumber: LongWord read Get_SetNumber write Set_SetNumber;
    property SetPosition: LongWord read Get_SetPosition write Set_SetPosition;
    property TotalSetPositions: LongWord read Get_TotalSetPositions write Set_TotalSetPositions;
    property TotalSetNumbers: LongWord read Get_TotalSetNumbers write Set_TotalSetNumbers;
    property NumberOfMillJoins: LongWord read Get_NumberOfMillJoins write Set_NumberOfMillJoins;
    property MillJoinLocation: IXMLMillJoinLocationList read Get_MillJoinLocation;
    property DateFinished: IXMLDateFinished read Get_DateFinished;
    property DateWound: IXMLDateWound read Get_DateWound;
    property Caliper: IXMLCaliper read Get_Caliper;
  end;

{ IXMLMillJoinLocation }

  IXMLMillJoinLocation = interface(IXMLNode)
    ['{308307C2-42C2-4744-A212-B5BAEDB982F0}']
    { Property Accessors }
    function Get_MillJoinNumber: LongWord;
    function Get_LengthFromCore: IXMLMeasurement;
    function Get_DistanceFromCore: IXMLMeasurement;
    procedure Set_MillJoinNumber(Value: LongWord);
    { Methods & Properties }
    property MillJoinNumber: LongWord read Get_MillJoinNumber write Set_MillJoinNumber;
    property LengthFromCore: IXMLMeasurement read Get_LengthFromCore;
    property DistanceFromCore: IXMLMeasurement read Get_DistanceFromCore;
  end;

{ IXMLMillJoinLocationList }

  IXMLMillJoinLocationList = interface(IXMLNodeCollection)
    ['{0B8B3822-3673-4775-80B3-BE984111305A}']
    { Methods & Properties }
    function Add: IXMLMillJoinLocation;
    function Insert(const Index: Integer): IXMLMillJoinLocation;
    function Get_Item(Index: Integer): IXMLMillJoinLocation;
    property Items[Index: Integer]: IXMLMillJoinLocation read Get_Item; default;
  end;

{ IXMLDateWound }

  IXMLDateWound = interface(IXMLNode)
    ['{8C0255C9-7528-43E1-AC4D-7A796D4175BD}']
    { Property Accessors }
    function Get_RewoundIndicator: WideString;
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_RewoundIndicator(Value: WideString);
    procedure Set_Time(Value: WideString);
    { Methods & Properties }
    property RewoundIndicator: WideString read Get_RewoundIndicator write Set_RewoundIndicator;
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
  end;

{ IXMLWoodItem }

  IXMLWoodItem = interface(IXMLNode)
    ['{5D466C30-AC91-4FFF-91C2-6EC7D9F9AFCF}']
    { Property Accessors }
    function Get_Product: IXMLProductClass;
    function Get_PackagingInformation: IXMLProductPackagingClass;
    function Get_ProductSummary: IXMLProductSummary;
    function Get_LengthSpecification: IXMLLengthSpecificationList;
    { Methods & Properties }
    property Product: IXMLProductClass read Get_Product;
    property PackagingInformation: IXMLProductPackagingClass read Get_PackagingInformation;
    property ProductSummary: IXMLProductSummary read Get_ProductSummary;
    property LengthSpecification: IXMLLengthSpecificationList read Get_LengthSpecification;
  end;

{ IXMLWoodItemList }

  IXMLWoodItemList = interface(IXMLNodeCollection)
    ['{CB2E9F4F-86CF-4313-8333-116AF432C8CE}']
    { Methods & Properties }
    function Add: IXMLWoodItem;
    function Insert(const Index: Integer): IXMLWoodItem;
    function Get_Item(Index: Integer): IXMLWoodItem;
    property Items[Index: Integer]: IXMLWoodItem read Get_Item; default;
  end;

{ IXMLProductSummary }

  IXMLProductSummary = interface(IXMLNode)
    ['{5E0D68D9-012B-4CE2-982E-01278C8D9860}']
    { Property Accessors }
    function Get_TotalQuantity: IXMLTotalQuantity;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    { Methods & Properties }
    property TotalQuantity: IXMLTotalQuantity read Get_TotalQuantity;
    property TotalInformationalQuantity: IXMLTotalInformationalQuantityList read Get_TotalInformationalQuantity;
  end;

{ IXMLTotalQuantity }

  IXMLTotalQuantity = interface(IXMLMeasurement)
    ['{E6F5FB71-D60A-4B0C-B39A-881614E03399}']
    { Property Accessors }
    function Get_QuantityType: WideString;
    function Get_QuantityTypeContext: WideString;
    function Get_AdjustmentType: WideString;
    procedure Set_QuantityType(Value: WideString);
    procedure Set_QuantityTypeContext(Value: WideString);
    procedure Set_AdjustmentType(Value: WideString);
    { Methods & Properties }
    property QuantityType: WideString read Get_QuantityType write Set_QuantityType;
    property QuantityTypeContext: WideString read Get_QuantityTypeContext write Set_QuantityTypeContext;
    property AdjustmentType: WideString read Get_AdjustmentType write Set_AdjustmentType;
  end;

{ IXMLTotalQuantityList }

  IXMLTotalQuantityList = interface(IXMLNodeCollection)
    ['{55924DF3-4D4D-47AE-9F57-F50611715B13}']
    { Methods & Properties }
    function Add: IXMLTotalQuantity;
    function Insert(const Index: Integer): IXMLTotalQuantity;
    function Get_Item(Index: Integer): IXMLTotalQuantity;
    property Items[Index: Integer]: IXMLTotalQuantity read Get_Item; default;
  end;

{ IXMLTotalInformationalQuantity }

  IXMLTotalInformationalQuantity = interface(IXMLMeasurement)
    ['{CDFA5B80-05A7-45CF-994B-54B7324D1C40}']
    { Property Accessors }
    function Get_QuantityType: WideString;
    function Get_QuantityTypeContext: WideString;
    function Get_AdjustmentType: WideString;
    procedure Set_QuantityType(Value: WideString);
    procedure Set_QuantityTypeContext(Value: WideString);
    procedure Set_AdjustmentType(Value: WideString);
    { Methods & Properties }
    property QuantityType: WideString read Get_QuantityType write Set_QuantityType;
    property QuantityTypeContext: WideString read Get_QuantityTypeContext write Set_QuantityTypeContext;
    property AdjustmentType: WideString read Get_AdjustmentType write Set_AdjustmentType;
  end;

{ IXMLTotalInformationalQuantityList }

  IXMLTotalInformationalQuantityList = interface(IXMLNodeCollection)
    ['{E5C27B5F-92F8-4F15-B410-FF6BAED062FD}']
    { Methods & Properties }
    function Add: IXMLTotalInformationalQuantity;
    function Insert(const Index: Integer): IXMLTotalInformationalQuantity;
    function Get_Item(Index: Integer): IXMLTotalInformationalQuantity;
    property Items[Index: Integer]: IXMLTotalInformationalQuantity read Get_Item; default;
  end;

{ IXMLLengthSpecification }

  IXMLLengthSpecification = interface(IXMLNode)
    ['{02A7552D-42C2-4D1A-844A-E93942F8313D}']
    { Property Accessors }
    function Get_LengthCategory: WideString;
    function Get_TotalNumberOfUnits: IXMLMeasurement;
    procedure Set_LengthCategory(Value: WideString);
    { Methods & Properties }
    property LengthCategory: WideString read Get_LengthCategory write Set_LengthCategory;
    property TotalNumberOfUnits: IXMLMeasurement read Get_TotalNumberOfUnits;
  end;

{ IXMLLengthSpecificationList }

  IXMLLengthSpecificationList = interface(IXMLNodeCollection)
    ['{C3D7E0D0-7FBB-475D-87E6-C3F8217602EA}']
    { Methods & Properties }
    function Add: IXMLLengthSpecification;
    function Insert(const Index: Integer): IXMLLengthSpecification;
    function Get_Item(Index: Integer): IXMLLengthSpecification;
    property Items[Index: Integer]: IXMLLengthSpecification read Get_Item; default;
  end;

{ IXMLOtherDate }

  IXMLOtherDate = interface(IXMLNode)
    ['{6E77FEF7-6B25-4C53-89C7-4000381E64A0}']
    { Property Accessors }
    function Get_DateType: WideString;
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    function Get_Week: WideString;
    procedure Set_DateType(Value: WideString);
    procedure Set_Time(Value: WideString);
    procedure Set_Week(Value: WideString);
    { Methods & Properties }
    property DateType: WideString read Get_DateType write Set_DateType;
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
    property Week: WideString read Get_Week write Set_Week;
  end;

{ IXMLOtherDateList }

  IXMLOtherDateList = interface(IXMLNodeCollection)
    ['{EA5EF96A-9813-42A8-9B22-0AE20DCE9524}']
    { Methods & Properties }
    function Add: IXMLOtherDate;
    function Insert(const Index: Integer): IXMLOtherDate;
    function Get_Item(Index: Integer): IXMLOtherDate;
    property Items[Index: Integer]: IXMLOtherDate read Get_Item; default;
  end;

{ IXMLTransportPackageInformation }

  IXMLTransportPackageInformation = interface(IXMLNode)
    ['{A666D241-45EB-40C0-926C-68AE74D0C743}']
    { Property Accessors }
    function Get_PackageType: WideString;
    function Get_MixedProductPalletIndicator: WideString;
    function Get_PackageLevel: WideString;
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_RawMaterialSet: IXMLIdentifierS60List;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_MachineID: WideString;
    function Get_ItemCount: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_InventoryClass: IXMLInventoryClass;
    function Get_TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics;
    function Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristics;
    function Get_PackageCharacteristics: IXMLPackageCharacteristics;
    function Get_BaleItem: IXMLBaleItemList;
    function Get_BoxItem: IXMLBoxItemList;
    function Get_ReelItem: IXMLReelItemList;
    function Get_ReamItem: IXMLReamItemList;
    function Get_SheetItem: IXMLSheetItemList;
    function Get_UnitItem: IXMLUnitItemList;
    function Get_WoodItem: IXMLWoodItemList;
    function Get_OtherDate: IXMLOtherDate;
    procedure Set_PackageType(Value: WideString);
    procedure Set_MixedProductPalletIndicator(Value: WideString);
    procedure Set_PackageLevel(Value: WideString);
    procedure Set_MachineID(Value: WideString);
    { Methods & Properties }
    property PackageType: WideString read Get_PackageType write Set_PackageType;
    property MixedProductPalletIndicator: WideString read Get_MixedProductPalletIndicator write Set_MixedProductPalletIndicator;
    property PackageLevel: WideString read Get_PackageLevel write Set_PackageLevel;
    property Identifier: IXMLIdentifierS60List read Get_Identifier;
    property RawMaterialSet: IXMLIdentifierS60List read Get_RawMaterialSet;
    property PartyIdentifier: IXMLPartyIdentifierList read Get_PartyIdentifier;
    property MachineID: WideString read Get_MachineID write Set_MachineID;
    property ItemCount: IXMLMeasurement read Get_ItemCount;
    property Quantity: IXMLQuantity read Get_Quantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
    property InventoryClass: IXMLInventoryClass read Get_InventoryClass;
    property TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics read Get_TransportVehicleCharacteristics;
    property TransportUnitCharacteristics: IXMLTransportUnitCharacteristics read Get_TransportUnitCharacteristics;
    property PackageCharacteristics: IXMLPackageCharacteristics read Get_PackageCharacteristics;
    property BaleItem: IXMLBaleItemList read Get_BaleItem;
    property BoxItem: IXMLBoxItemList read Get_BoxItem;
    property ReelItem: IXMLReelItemList read Get_ReelItem;
    property ReamItem: IXMLReamItemList read Get_ReamItem;
    property SheetItem: IXMLSheetItemList read Get_SheetItem;
    property UnitItem: IXMLUnitItemList read Get_UnitItem;
    property WoodItem: IXMLWoodItemList read Get_WoodItem;
    property OtherDate: IXMLOtherDate read Get_OtherDate;
  end;

{ IXMLTransportPackageInformationList }

  IXMLTransportPackageInformationList = interface(IXMLNodeCollection)
    ['{0A928212-2747-4ABB-872C-3D41F569060C}']
    { Methods & Properties }
    function Add: IXMLTransportPackageInformation;
    function Insert(const Index: Integer): IXMLTransportPackageInformation;
    function Get_Item(Index: Integer): IXMLTransportPackageInformation;
    property Items[Index: Integer]: IXMLTransportPackageInformation read Get_Item; default;
  end;

{ IXMLMeasurementWithText }

  IXMLMeasurementWithText = interface(IXMLNode)
    ['{B91BA87C-1776-466B-A51B-1D48223016ED}']
    { Property Accessors }
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    function Get_AdditionalText: WideString;
    procedure Set_AdditionalText(Value: WideString);
    { Methods & Properties }
    property Value: IXMLValue read Get_Value;
    property RangeMin: IXMLRangeMin read Get_RangeMin;
    property RangeMax: IXMLRangeMax read Get_RangeMax;
    property AdditionalText: WideString read Get_AdditionalText write Set_AdditionalText;
  end;

{ IXMLProductGroupSummary }

  IXMLProductGroupSummary = interface(IXMLNode)
    ['{BBCC8B9A-2173-47CE-8CA1-EB0A12EEE9B3}']
    { Property Accessors }
    function Get_TotalQuantity: IXMLTotalQuantity;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    function Get_ProductSummary: IXMLProductSummary;
    function Get_LengthSpecification: IXMLLengthSpecificationList;
    { Methods & Properties }
    property TotalQuantity: IXMLTotalQuantity read Get_TotalQuantity;
    property TotalInformationalQuantity: IXMLTotalInformationalQuantityList read Get_TotalInformationalQuantity;
    property ProductSummary: IXMLProductSummary read Get_ProductSummary;
    property LengthSpecification: IXMLLengthSpecificationList read Get_LengthSpecification;
  end;

{ IXMLShipmentSummary }

  IXMLShipmentSummary = interface(IXMLNode)
    ['{18AC3B03-3335-405A-8297-6FC1B813EC4F}']
    { Property Accessors }
    function Get_TotalQuantity: IXMLTotalQuantity;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    function Get_ProductSummary: IXMLProductSummary;
    function Get_LengthSpecification: IXMLLengthSpecificationList;
    { Methods & Properties }
    property TotalQuantity: IXMLTotalQuantity read Get_TotalQuantity;
    property TotalInformationalQuantity: IXMLTotalInformationalQuantityList read Get_TotalInformationalQuantity;
    property ProductSummary: IXMLProductSummary read Get_ProductSummary;
    property LengthSpecification: IXMLLengthSpecificationList read Get_LengthSpecification;
  end;

{ IXMLDeliveryMessageWoodSummary }

  IXMLDeliveryMessageWoodSummary = interface(IXMLNode)
    ['{4E799A6C-9211-41CE-B698-91BC3DD5236B}']
    { Property Accessors }
    function Get_TotalNumberOfShipments: LongWord;
    function Get_TotalQuantity: IXMLTotalQuantityList;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    function Get_ProductSummary: IXMLProductSummary;
    function Get_LengthSpecification: IXMLLengthSpecificationList;
    function Get_QuantityDeviation: IXMLMeasurementWithText;
    function Get_CustomsTotals: IXMLCustomsTotalsList;
    function Get_CustomsStampInformation: IXMLCustomsStampInformationList;
    function Get_TermsAndDisclaimers: IXMLTermsAndDisclaimersList;
    procedure Set_TotalNumberOfShipments(Value: LongWord);
    { Methods & Properties }
    property TotalNumberOfShipments: LongWord read Get_TotalNumberOfShipments write Set_TotalNumberOfShipments;
    property TotalQuantity: IXMLTotalQuantityList read Get_TotalQuantity;
    property TotalInformationalQuantity: IXMLTotalInformationalQuantityList read Get_TotalInformationalQuantity;
    property ProductSummary: IXMLProductSummary read Get_ProductSummary;
    property LengthSpecification: IXMLLengthSpecificationList read Get_LengthSpecification;
    property QuantityDeviation: IXMLMeasurementWithText read Get_QuantityDeviation;
    property CustomsTotals: IXMLCustomsTotalsList read Get_CustomsTotals;
    property CustomsStampInformation: IXMLCustomsStampInformationList read Get_CustomsStampInformation;
    property TermsAndDisclaimers: IXMLTermsAndDisclaimersList read Get_TermsAndDisclaimers;
  end;

{ IXMLCustomsTotals }

  IXMLCustomsTotals = interface(IXMLNode)
    ['{A6F0C0D2-25DD-4A18-B690-48AA4FB3CE6F}']
    { Property Accessors }
    function Get_CustomsTariffCode: WideString;
    function Get_TotalQuantity: IXMLTotalQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    procedure Set_CustomsTariffCode(Value: WideString);
    { Methods & Properties }
    property CustomsTariffCode: WideString read Get_CustomsTariffCode write Set_CustomsTariffCode;
    property TotalQuantity: IXMLTotalQuantity read Get_TotalQuantity;
    property InformationalQuantity: IXMLInformationalQuantityList read Get_InformationalQuantity;
  end;

{ IXMLCustomsTotalsList }

  IXMLCustomsTotalsList = interface(IXMLNodeCollection)
    ['{9BE81EB8-77EE-4029-811E-BA752CEC1DF5}']
    { Methods & Properties }
    function Add: IXMLCustomsTotals;
    function Insert(const Index: Integer): IXMLCustomsTotals;
    function Get_Item(Index: Integer): IXMLCustomsTotals;
    property Items[Index: Integer]: IXMLCustomsTotals read Get_Item; default;
  end;

{ IXMLCustomsStampInformation }

  IXMLCustomsStampInformation = interface(IXMLNode)
    ['{530200D5-67F7-4B4E-A4A7-F1DDFE5317C9}']
    { Property Accessors }
    function Get_CustomsStampHeaderText: IXMLS255List;
    function Get_CustomsParty: IXMLParty;
    function Get_CustomsStampDate: IXMLCustomsStampDate;
    function Get_CustomsReferenceNumber: IXMLCustomsReferenceNumber;
    function Get_SupplierCustomsReference: IXMLSupplierCustomsReference;
    function Get_MillParty: IXMLParty;
    function Get_CustomsStampTrailerText: IXMLS255List;
    { Methods & Properties }
    property CustomsStampHeaderText: IXMLS255List read Get_CustomsStampHeaderText;
    property CustomsParty: IXMLParty read Get_CustomsParty;
    property CustomsStampDate: IXMLCustomsStampDate read Get_CustomsStampDate;
    property CustomsReferenceNumber: IXMLCustomsReferenceNumber read Get_CustomsReferenceNumber;
    property SupplierCustomsReference: IXMLSupplierCustomsReference read Get_SupplierCustomsReference;
    property MillParty: IXMLParty read Get_MillParty;
    property CustomsStampTrailerText: IXMLS255List read Get_CustomsStampTrailerText;
  end;

{ IXMLCustomsStampInformationList }

  IXMLCustomsStampInformationList = interface(IXMLNodeCollection)
    ['{BD23393D-0AFB-42F8-81B9-EF0459AF807A}']
    { Methods & Properties }
    function Add: IXMLCustomsStampInformation;
    function Insert(const Index: Integer): IXMLCustomsStampInformation;
    function Get_Item(Index: Integer): IXMLCustomsStampInformation;
    property Items[Index: Integer]: IXMLCustomsStampInformation read Get_Item; default;
  end;

{ IXMLCustomsStampDate }

  IXMLCustomsStampDate = interface(IXMLNode)
    ['{45B62B71-8CD3-4D38-86B4-86A1CEC7C577}']
    { Property Accessors }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
    { Methods & Properties }
    property Date: IXMLDateBasis read Get_Date;
    property Time: WideString read Get_Time write Set_Time;
  end;

{ IXMLCustomsReferenceNumber }

  IXMLCustomsReferenceNumber = interface(IXMLNode)
    ['{B6653B6F-C605-4AB9-BB52-93A8B982F08D}']
    { Property Accessors }
    function Get_CustomsReferenceNumberType: WideString;
    procedure Set_CustomsReferenceNumberType(Value: WideString);
    { Methods & Properties }
    property CustomsReferenceNumberType: WideString read Get_CustomsReferenceNumberType write Set_CustomsReferenceNumberType;
  end;

{ IXMLSupplierCustomsReference }

  IXMLSupplierCustomsReference = interface(IXMLNode)
    ['{8C369E8B-F354-442E-9A47-1268B50FC2C0}']
    { Property Accessors }
    function Get_SupplierCustomsReferenceType: WideString;
    function Get_AssignedBy: WideString;
    procedure Set_SupplierCustomsReferenceType(Value: WideString);
    procedure Set_AssignedBy(Value: WideString);
    { Methods & Properties }
    property SupplierCustomsReferenceType: WideString read Get_SupplierCustomsReferenceType write Set_SupplierCustomsReferenceType;
    property AssignedBy: WideString read Get_AssignedBy write Set_AssignedBy;
  end;

{ IXMLTermsAndDisclaimers }

  IXMLTermsAndDisclaimers = interface(IXMLNode)
    ['{942D9DBD-44CE-424B-989E-F519DCFBCF7F}']
    { Property Accessors }
    function Get_Language: WideString;
    procedure Set_Language(Value: WideString);
    { Methods & Properties }
    property Language: WideString read Get_Language write Set_Language;
  end;

{ IXMLTermsAndDisclaimersList }

  IXMLTermsAndDisclaimersList = interface(IXMLNodeCollection)
    ['{8BA2D11B-CC53-4525-AE74-B0BD1A47C974}']
    { Methods & Properties }
    function Add: IXMLTermsAndDisclaimers;
    function Insert(const Index: Integer): IXMLTermsAndDisclaimers;
    function Get_Item(Index: Integer): IXMLTermsAndDisclaimers;
    property Items[Index: Integer]: IXMLTermsAndDisclaimers read Get_Item; default;
  end;

{ IXMLS255List }

  IXMLS255List = interface(IXMLNodeCollection)
    ['{C804C7C7-8EFE-4BE0-913D-706A33BD9DE2}']
    { Methods & Properties }
    function Add(const Value: WideString): IXMLNode;
    function Insert(const Index: Integer; const Value: WideString): IXMLNode;
    function Get_Item(Index: Integer): WideString;
    property Items[Index: Integer]: WideString read Get_Item; default;
  end;

{ IXMLS60List }

  IXMLS60List = interface(IXMLNodeCollection)
    ['{B07AA345-86D3-4929-9BBF-1AD774888F8C}']
    { Methods & Properties }
    function Add(const Value: WideString): IXMLNode;
    function Insert(const Index: Integer; const Value: WideString): IXMLNode;
    function Get_Item(Index: Integer): WideString;
    property Items[Index: Integer]: WideString read Get_Item; default;
  end;

{ IXMLAnyURIList }

  IXMLAnyURIList = interface(IXMLNodeCollection)
    ['{0C2D5893-7D72-4775-8477-4F44A94A1171}']
    { Methods & Properties }
    function Add(const Value: WideString): IXMLNode;
    function Insert(const Index: Integer; const Value: WideString): IXMLNode;
    function Get_Item(Index: Integer): WideString;
    property Items[Index: Integer]: WideString read Get_Item; default;
  end;

{ IXMLS72List }

  IXMLS72List = interface(IXMLNodeCollection)
    ['{D4EA0EFD-93E5-4133-8042-0B70F93C33CE}']
    { Methods & Properties }
    function Add(const Value: WideString): IXMLNode;
    function Insert(const Index: Integer; const Value: WideString): IXMLNode;
    function Get_Item(Index: Integer): WideString;
    property Items[Index: Integer]: WideString read Get_Item; default;
  end;

{ IXMLS20List }

  IXMLS20List = interface(IXMLNodeCollection)
    ['{055981D6-D42C-469A-B016-C9EB36FAA257}']
    { Methods & Properties }
    function Add(const Value: WideString): IXMLNode;
    function Insert(const Index: Integer; const Value: WideString): IXMLNode;
    function Get_Item(Index: Integer): WideString;
    property Items[Index: Integer]: WideString read Get_Item; default;
  end;

{ IXMLNni1List }

  IXMLNni1List = interface(IXMLNodeCollection)
    ['{7E153081-5049-4B02-8106-7CBAA5757C4F}']
    { Methods & Properties }
    function Add(const Value: LongWord): IXMLNode;
    function Insert(const Index: Integer; const Value: LongWord): IXMLNode;
    function Get_Item(Index: Integer): LongWord;
    property Items[Index: Integer]: LongWord read Get_Item; default;
  end;

{ IXMLHolePunchTemplateReferenceTypeList }

  IXMLHolePunchTemplateReferenceTypeList = interface(IXMLNodeCollection)
    ['{2E9DB08C-2BAA-41DB-BBDB-BF5A404A9B2B}']
    { Methods & Properties }
    function Add(const Value: WideString): IXMLNode;
    function Insert(const Index: Integer; const Value: WideString): IXMLNode;
    function Get_Item(Index: Integer): WideString;
    property Items[Index: Integer]: WideString read Get_Item; default;
  end;

{ IXMLReamTypeList }

  IXMLReamTypeList = interface(IXMLNodeCollection)
    ['{F3AFD68C-900B-4138-B782-515B6FABE75A}']
    { Methods & Properties }
    function Add(const Value: WideString): IXMLNode;
    function Insert(const Index: Integer; const Value: WideString): IXMLNode;
    function Get_Item(Index: Integer): WideString;
    property Items[Index: Integer]: WideString read Get_Item; default;
  end;

{ IXMLPlywoodOSBSpeciesTypeList }

  IXMLPlywoodOSBSpeciesTypeList = interface(IXMLNodeCollection)
    ['{E9004257-8E77-478E-8E91-D3AB0A1BCF23}']
    { Methods & Properties }
    function Add(const Value: WideString): IXMLNode;
    function Insert(const Index: Integer; const Value: WideString): IXMLNode;
    function Get_Item(Index: Integer): WideString;
    property Items[Index: Integer]: WideString read Get_Item; default;
  end;

{ Forward Decls }

  TXMLDeliveryMessageWood = class;
  TXMLDeliveryMessageWoodHeader = class;
  TXMLDeliveryMessageDate = class;
  TXMLDateBasis = class;
  TXMLDeliveryMessageReference = class;
  TXMLDeliveryMessageReferenceList = class;
  TXMLDocumentReferenceInformation = class;
  TXMLDocumentReferenceInformationList = class;
  TXMLDocumentReferenceID = class;
  TXMLParty = class;
  TXMLPartyIdentifier = class;
  TXMLPartyIdentifierList = class;
  TXMLNameAddress = class;
  TXMLOrganisationUnit = class;
  TXMLPostalCode = class;
  TXMLCountry = class;
  TXMLGPSCoordinates = class;
  TXMLMeasurement = class;
  TXMLMeasurementList = class;
  TXMLValue = class;
  TXMLRangeMin = class;
  TXMLRangeMax = class;
  TXMLCommonContact = class;
  TXMLCommonContactList = class;
  TXMLTypedParty = class;
  TXMLTypedPartyList = class;
  TXMLShipToInformation = class;
  TXMLShipToInformationList = class;
  TXMLShipToCharacteristics = class;
  TXMLLocationCode = class;
  TXMLTermsOfDelivery = class;
  TXMLIncotermsLocation = class;
  TXMLShipmentMethodOfPayment = class;
  TXMLDeliveryRouteCode = class;
  TXMLDeliverySchedule = class;
  TXMLDeliveryScheduleList = class;
  TXMLProductionStatus = class;
  TXMLProductionLastDateOfChange = class;
  TXMLDeliveryStatus = class;
  TXMLDeliveryLastDateOfChange = class;
  TXMLDeliveryDateWindow = class;
  TXMLDeliveryDateWindowList = class;
  TXMLDateTimeRange = class;
  TXMLDateTimeFrom = class;
  TXMLDateTimeTo = class;
  TXMLQuantity = class;
  TXMLInformationalQuantity = class;
  TXMLInformationalQuantityList = class;
  TXMLPriceDetails = class;
  TXMLPricePerUnit = class;
  TXMLPricePerUnitList = class;
  TXMLCurrencyValue = class;
  TXMLMinCurrencyValue = class;
  TXMLMaxCurrencyValue = class;
  TXMLMonetaryAdjustment = class;
  TXMLMonetaryAdjustmentList = class;
  TXMLMonetaryAdjustmentStartAmount = class;
  TXMLPriceAdjustment = class;
  TXMLFlatAmountAdjustment = class;
  TXMLAdjustmentFixedAmount = class;
  TXMLTaxAdjustment = class;
  TXMLTaxAmount = class;
  TXMLInformationalAmount = class;
  TXMLInformationalAmountList = class;
  TXMLGeneralLedgerAccount = class;
  TXMLMonetaryAdjustmentAmount = class;
  TXMLDeliveryLeg = class;
  TXMLDeliveryLegList = class;
  TXMLDeliveryOrigin = class;
  TXMLLocationParty = class;
  TXMLTransportModeCharacteristics = class;
  TXMLTransportModeCode = class;
  TXMLTransportVehicleCharacteristics = class;
  TXMLTransportVehicleCode = class;
  TXMLTransportVehicleMeasurements = class;
  TXMLTransportVehicleIdentifier = class;
  TXMLTransportVehicleIdentifierList = class;
  TXMLTransportUnitCharacteristics = class;
  TXMLTransportUnitCharacteristicsList = class;
  TXMLTransportUnitCode = class;
  TXMLTransportUnitMeasurements = class;
  TXMLTransportUnitMeasurementsList = class;
  TXMLTransportUnitIdentifier = class;
  TXMLTransportUnitIdentifierList = class;
  TXMLTransportUnitDetail = class;
  TXMLTransportUnitDetailCode = class;
  TXMLTransportLoadingCharacteristics = class;
  TXMLTransportLoadingCharacteristicsList = class;
  TXMLTransportLoadingCode = class;
  TXMLTransportLoadingCodeDescription = class;
  TXMLEAttachment = class;
  TXMLTransportUnloadingCharacteristics = class;
  TXMLTransportUnloadingCode = class;
  TXMLTransportUnloadingCodeDescription = class;
  TXMLTransportOtherInstructions = class;
  TXMLTransportOtherInstructionsList = class;
  TXMLTransportInstructionCode = class;
  TXMLDeliveryTransitTime = class;
  TXMLDeliveryDestination = class;
  TXMLDeliveryLegReference = class;
  TXMLDeliveryLegReferenceList = class;
  TXMLTermsOfChartering = class;
  TXMLTermsOfCharteringList = class;
  TXMLDeliveryScheduleReference = class;
  TXMLDeliveryScheduleReferenceList = class;
  TXMLCountryOfOrigin = class;
  TXMLCountryOfDestination = class;
  TXMLCountryOfConsumption = class;
  TXMLInsurance = class;
  TXMLInsuredValue = class;
  TXMLDocumentInformation = class;
  TXMLDocumentInformationList = class;
  TXMLNumberOfDocuments = class;
  TXMLNumberOfDocumentsList = class;
  TXMLDeliveryMessageShipment = class;
  TXMLDeliveryMessageShipmentList = class;
  TXMLShipmentID = class;
  TXMLDeliveryMessageProductGroup = class;
  TXMLDeliveryMessageProductGroupList = class;
  TXMLProductGroupID = class;
  TXMLDeliveryShipmentLineItem = class;
  TXMLDeliveryShipmentLineItemList = class;
  TXMLPurchaseOrderInformation = class;
  TXMLDateTimeBasis = class;
  TXMLPurchaseOrderReference = class;
  TXMLPurchaseOrderReferenceList = class;
  TXMLMillProductionInformation = class;
  TXMLMillCharacteristics = class;
  TXMLQuantityOrderedInformation = class;
  TXMLSafetyAndEnvironmentalInformationClass = class;
  TXMLSafetyAndEnvironmentalInformationClassList = class;
  TXMLChainOfCustody = class;
  TXMLProductClass = class;
  TXMLProductIdentifier = class;
  TXMLProductIdentifierList = class;
  TXMLProductDescription = class;
  TXMLProductDescriptionList = class;
  TXMLClassification = class;
  TXMLClassificationList = class;
  TXMLClassificationCode = class;
  TXMLBookManufacturing = class;
  TXMLProofInformationalQuantity = class;
  TXMLProofInformationalQuantityList = class;
  TXMLProofApprovalDate = class;
  TXMLProofDueDate = class;
  TXMLPrepInformation = class;
  TXMLPrepInformationList = class;
  TXMLSuppliedComponentInformation = class;
  TXMLSuppliedComponentInformationList = class;
  TXMLComponentShipDate = class;
  TXMLComponentDueDate = class;
  TXMLComponentNeededDate = class;
  TXMLOrderStatusInformation = class;
  TXMLOrderPrimaryStatus = class;
  TXMLPackagingCharacteristics = class;
  TXMLBoxCharacteristics = class;
  TXMLDetailMeasurement = class;
  TXMLBurstIndex = class;
  TXMLBurstIndexList = class;
  TXMLLabelCharacteristics = class;
  TXMLLabelCharacteristicsList = class;
  TXMLColourCode = class;
  TXMLStencilCharacteristics = class;
  TXMLStencilCharacteristicsList = class;
  TXMLWrapCharacteristics = class;
  TXMLWrap = class;
  TXMLWrapList = class;
  TXMLBandCharacteristics = class;
  TXMLBandCharacteristicsList = class;
  TXMLPalletPackagingCharacteristics = class;
  TXMLPackagingCode = class;
  TXMLPackagingCodeList = class;
  TXMLPackagingDescription = class;
  TXMLPackagingDescriptionList = class;
  TXMLPalletCharacteristics = class;
  TXMLPalletCharacteristicsList = class;
  TXMLBookUnitPacking = class;
  TXMLUnitCharacteristics = class;
  TXMLLabelStock = class;
  TXMLLabelStockCharacteristics = class;
  TXMLLabelStockLayer = class;
  TXMLLabelStockLayerList = class;
  TXMLLayerMaterial = class;
  TXMLExtraFeature = class;
  TXMLExtraFeatureList = class;
  TXMLSingleWidthReel = class;
  TXMLSingleWidthReelConversionCharacteristics = class;
  TXMLCoreCharacteristics = class;
  TXMLCoreCharacteristicsList = class;
  TXMLCoreStrengthCode = class;
  TXMLReelPackagingCharacteristicsClass = class;
  TXMLMaximumClampingForce = class;
  TXMLTrimmedReel = class;
  TXMLTrimmedReelConversionCharacteristics = class;
  TXMLSlitReel = class;
  TXMLSlitReelList = class;
  TXMLSlitReelOrderQuantity = class;
  TXMLSlitReelReference = class;
  TXMLSlitReelReferenceList = class;
  TXMLSheet = class;
  TXMLSheetConversionCharacteristicsClass = class;
  TXMLConversionCode = class;
  TXMLSheetSize = class;
  TXMLSheetSizeList = class;
  TXMLPunchedHoleDetails = class;
  TXMLPunchedHoleDetailsList = class;
  TXMLNumberOfHoles = class;
  TXMLSizeOfHolePunch = class;
  TXMLHoleSpacing = class;
  TXMLEvenSpacing = class;
  TXMLDistanceFromEdge = class;
  TXMLDistanceFromEdgeList = class;
  TXMLCuttingDetails = class;
  TXMLCuttingDetailsList = class;
  TXMLCuttingTemplateCode = class;
  TXMLEmbossing = class;
  TXMLEmbossingList = class;
  TXMLEmbossingCode = class;
  TXMLWatermark = class;
  TXMLWatermarkList = class;
  TXMLWatermarkCode = class;
  TXMLSheetPackagingCharacteristicsClass = class;
  TXMLSheetCount = class;
  TXMLSheetCountList = class;
  TXMLPaper = class;
  TXMLPaperCharacteristics = class;
  TXMLAbrasion = class;
  TXMLAbrasionList = class;
  TXMLAbsorptionInk = class;
  TXMLAbsorptionInkList = class;
  TXMLAbsorptionLight = class;
  TXMLAbsorptionLightList = class;
  TXMLAbsorptionWater = class;
  TXMLAbsorptionWaterList = class;
  TXMLAppearance = class;
  TXMLAppearanceList = class;
  TXMLAsh = class;
  TXMLAshList = class;
  TXMLBasisWeight = class;
  TXMLBasisWeightList = class;
  TXMLBendingResistance = class;
  TXMLBendingResistanceList = class;
  TXMLBendingStiffness = class;
  TXMLBendingStiffnessList = class;
  TXMLBrightness = class;
  TXMLBrightnessList = class;
  TXMLBulk = class;
  TXMLBulkList = class;
  TXMLCaliper = class;
  TXMLCaliperList = class;
  TXMLCoatWeight = class;
  TXMLCoatWeightList = class;
  TXMLColourDetail = class;
  TXMLColourDetailList = class;
  TXMLCMYK = class;
  TXMLBurst = class;
  TXMLBurstList = class;
  TXMLDetailValue = class;
  TXMLDetailRangeMin = class;
  TXMLDetailRangeMax = class;
  TXMLStandardDeviation = class;
  TXMLTwoSigmaLower = class;
  TXMLTwoSigmaUpper = class;
  TXMLColourShade = class;
  TXMLHSB = class;
  TXMLLab = class;
  TXMLRGB = class;
  TXMLDensity = class;
  TXMLDensityList = class;
  TXMLDirt = class;
  TXMLDirtList = class;
  TXMLDominantWavelength = class;
  TXMLDominantWavelengthList = class;
  TXMLExcitationPurity = class;
  TXMLExcitationPurityList = class;
  TXMLFibreLength = class;
  TXMLFibreLengthList = class;
  TXMLFibreClassification = class;
  TXMLFibreClassificationList = class;
  TXMLFolding = class;
  TXMLFoldingList = class;
  TXMLFormation = class;
  TXMLFormationList = class;
  TXMLFreeness = class;
  TXMLFreenessList = class;
  TXMLFriction = class;
  TXMLFrictionList = class;
  TXMLGloss = class;
  TXMLGlossList = class;
  TXMLLightScattering = class;
  TXMLLightScatteringList = class;
  TXMLLuminance = class;
  TXMLLuminanceList = class;
  TXMLMoisture = class;
  TXMLMoistureList = class;
  TXMLMullen = class;
  TXMLMullenList = class;
  TXMLOpacity = class;
  TXMLOpacityList = class;
  TXMLPermeability = class;
  TXMLPermeabilityList = class;
  TXMLPH = class;
  TXMLPHList = class;
  TXMLPlyBond = class;
  TXMLPlyBondList = class;
  TXMLPorosity = class;
  TXMLPorosityList = class;
  TXMLPostConsumerWaste = class;
  TXMLPostConsumerWasteList = class;
  TXMLPreConsumerWaste = class;
  TXMLPreConsumerWasteList = class;
  TXMLRecycled = class;
  TXMLRecycledList = class;
  TXMLResistance = class;
  TXMLResistanceList = class;
  TXMLRingCrush = class;
  TXMLRingCrushList = class;
  TXMLRoughness = class;
  TXMLRoughnessList = class;
  TXMLRunnabilityIndex = class;
  TXMLRunnabilityIndexList = class;
  TXMLShowThrough = class;
  TXMLShowThroughList = class;
  TXMLSizing = class;
  TXMLSizingList = class;
  TXMLSmoothness = class;
  TXMLSmoothnessList = class;
  TXMLStiffness = class;
  TXMLStiffnessList = class;
  TXMLStretch = class;
  TXMLStretchList = class;
  TXMLSurfaceStrength = class;
  TXMLSurfaceStrengthList = class;
  TXMLTEA = class;
  TXMLTEAList = class;
  TXMLTear = class;
  TXMLTearList = class;
  TXMLTearIndex = class;
  TXMLTearIndexList = class;
  TXMLTensile = class;
  TXMLTensileList = class;
  TXMLTensileIndex = class;
  TXMLTensileIndexList = class;
  TXMLWhiteness = class;
  TXMLWhitenessList = class;
  TXMLAdditionalTest = class;
  TXMLPlyAttributes = class;
  TXMLPlyAttributesList = class;
  TXMLPlySet = class;
  TXMLPlySetList = class;
  TXMLReel = class;
  TXMLReelConversionCharacteristicsClass = class;
  TXMLPulpClass = class;
  TXMLPulpCharacteristics = class;
  TXMLDrainageResistance = class;
  TXMLDrainageResistanceList = class;
  TXMLViscosity = class;
  TXMLViscosityList = class;
  TXMLBale = class;
  TXMLBaleConversionCharacteristics = class;
  TXMLBalePackagingCharacteristics = class;
  TXMLPulpUnitCharacteristics = class;
  TXMLSlurry = class;
  TXMLNonStandardPulp = class;
  TXMLRecoveredPaper = class;
  TXMLVirginFibre = class;
  TXMLTimberCharacteristics = class;
  TXMLLumberSpeciesClass = class;
  TXMLLumberSpeciesClassList = class;
  TXMLLog = class;
  TXMLLogCharacteristics = class;
  TXMLLogPackagingCharacteristics = class;
  TXMLIdentifierS60 = class;
  TXMLIdentifierS60List = class;
  TXMLChip = class;
  TXMLChipCharacteristics = class;
  TXMLBark = class;
  TXMLSawdust = class;
  TXMLChipPackagingCharacteristics = class;
  TXMLWoodProducts = class;
  TXMLWoodTimbersDimensionalLumberBoards = class;
  TXMLSoftwoodLumber = class;
  TXMLSoftwoodLumberCharacteristicsClass = class;
  TXMLLumberGradeClass = class;
  TXMLDimensionConstructionClass = class;
  TXMLDimensionConstructionClassList = class;
  TXMLLumberSeasoningClass = class;
  TXMLLumberMoistureContentClass = class;
  TXMLHeatTreatmentClass = class;
  TXMLLumberManufacturingProcessClass = class;
  TXMLLumberManufacturingProcessClassList = class;
  TXMLLumberPatternProfileClass = class;
  TXMLLumberTrimClass = class;
  TXMLLumberJoiningClass = class;
  TXMLPressureTreatmentClass = class;
  TXMLPressureTreatmentCompoundClass = class;
  TXMLPressureTreatmentConcentration = class;
  TXMLFireTreatmentClass = class;
  TXMLOtherTreatmentClass = class;
  TXMLConstructionGradeStampClass = class;
  TXMLExLogClass = class;
  TXMLLengthCutDescription = class;
  TXMLPackaging = class;
  TXMLProductPackagingClass = class;
  TXMLUnitDimensionType = class;
  TXMLDimensionMeasurementClass = class;
  TXMLLumberPackageCodeClass = class;
  TXMLHardwoodLumber = class;
  TXMLRoofingSidingDeckingFencing = class;
  TXMLNaturalWoodSiding = class;
  TXMLNaturalWoodSidingOther = class;
  TXMLDeckAndPorchFlooringMaterialsNaturalWood = class;
  TXMLCompositeAndVeneerWoodPanels = class;
  TXMLNAPlywoodOSBCharacteristicsClass = class;
  TXMLPlywoodOSBGradeClass = class;
  TXMLPlywoodOSBSurfaceClass = class;
  TXMLPlywoodOSBOverlayClass = class;
  TXMLPlywoodOSBOverlayClassList = class;
  TXMLPlywoodOSBEdgeClass = class;
  TXMLPlywoodOSBSupplementalClass = class;
  TXMLPlywoodOSBSupplementalClassList = class;
  TXMLConstructionPackagesAndPreFabPanels = class;
  TXMLFloor = class;
  TXMLWall = class;
  TXMLRoof = class;
  TXMLPackageInformationClass = class;
  TXMLPackageInformationClassList = class;
  TXMLInventoryClass = class;
  TXMLInventoryClassCode = class;
  TXMLInventoryClassCodeList = class;
  TXMLPackageCharacteristics = class;
  TXMLBaleItem = class;
  TXMLBaleItemList = class;
  TXMLBoxItem = class;
  TXMLBoxItemList = class;
  TXMLReamItem = class;
  TXMLReamItemList = class;
  TXMLSheetItem = class;
  TXMLSheetItemList = class;
  TXMLDateSheeted = class;
  TXMLDateFinished = class;
  TXMLUnitItem = class;
  TXMLUnitItemList = class;
  TXMLReelItem = class;
  TXMLReelItemList = class;
  TXMLDeliveryMessageReelCharacteristics = class;
  TXMLMillJoinLocation = class;
  TXMLMillJoinLocationList = class;
  TXMLDateWound = class;
  TXMLWoodItem = class;
  TXMLWoodItemList = class;
  TXMLProductSummary = class;
  TXMLTotalQuantity = class;
  TXMLTotalQuantityList = class;
  TXMLTotalInformationalQuantity = class;
  TXMLTotalInformationalQuantityList = class;
  TXMLLengthSpecification = class;
  TXMLLengthSpecificationList = class;
  TXMLOtherDate = class;
  TXMLOtherDateList = class;
  TXMLTransportPackageInformation = class;
  TXMLTransportPackageInformationList = class;
  TXMLMeasurementWithText = class;
  TXMLProductGroupSummary = class;
  TXMLShipmentSummary = class;
  TXMLDeliveryMessageWoodSummary = class;
  TXMLCustomsTotals = class;
  TXMLCustomsTotalsList = class;
  TXMLCustomsStampInformation = class;
  TXMLCustomsStampInformationList = class;
  TXMLCustomsStampDate = class;
  TXMLCustomsReferenceNumber = class;
  TXMLSupplierCustomsReference = class;
  TXMLTermsAndDisclaimers = class;
  TXMLTermsAndDisclaimersList = class;
  TXMLS255List = class;
  TXMLS60List = class;
  TXMLAnyURIList = class;
  TXMLS72List = class;
  TXMLS20List = class;
  TXMLNni1List = class;
  TXMLHolePunchTemplateReferenceTypeList = class;
  TXMLReamTypeList = class;
  TXMLPlywoodOSBSpeciesTypeList = class;

{ TXMLDeliveryMessageWood }

  TXMLDeliveryMessageWood = class(TXMLNode, IXMLDeliveryMessageWood)
  private
    FDeliveryMessageShipment: IXMLDeliveryMessageShipmentList;
  protected
    { IXMLDeliveryMessageWood }
    function Get_DeliveryMessageType: WideString;
    function Get_DeliveryMessageStatusType: WideString;
    function Get_Reissued: WideString;
    function Get_Language: WideString;
    function Get_DeliveryMessageWoodHeader: IXMLDeliveryMessageWoodHeader;
    function Get_DeliveryMessageShipment: IXMLDeliveryMessageShipmentList;
    function Get_DeliveryMessageWoodSummary: IXMLDeliveryMessageWoodSummary;
    procedure Set_DeliveryMessageType(Value: WideString);
    procedure Set_DeliveryMessageStatusType(Value: WideString);
    procedure Set_Reissued(Value: WideString);
    procedure Set_Language(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryMessageWoodHeader }

  TXMLDeliveryMessageWoodHeader = class(TXMLNode, IXMLDeliveryMessageWoodHeader)
  private
    FDeliveryMessageReference: IXMLDeliveryMessageReferenceList;
    FDocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    FOtherParty: IXMLTypedPartyList;
    FReceiverParty: IXMLTypedPartyList;
    FShipToInformation: IXMLShipToInformationList;
    FAdditionalText: IXMLS255List;
    FDocumentInformation: IXMLDocumentInformationList;
  protected
    { IXMLDeliveryMessageWoodHeader }
    function Get_DeliveryMessageNumber: WideString;
    function Get_TransactionHistoryNumber: LongWord;
    function Get_DeliveryMessageDate: IXMLDeliveryMessageDate;
    function Get_DeliveryMessageReference: IXMLDeliveryMessageReferenceList;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    function Get_BuyerParty: IXMLParty;
    function Get_BillToParty: IXMLParty;
    function Get_SupplierParty: IXMLParty;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_SenderParty: IXMLTypedParty;
    function Get_ReceiverParty: IXMLTypedPartyList;
    function Get_ShipToInformation: IXMLShipToInformationList;
    function Get_CountryOfOrigin: IXMLCountryOfOrigin;
    function Get_CountryOfDestination: IXMLCountryOfDestination;
    function Get_CountryOfConsumption: IXMLCountryOfConsumption;
    function Get_Insurance: IXMLInsurance;
    function Get_AdditionalText: IXMLS255List;
    function Get_DocumentInformation: IXMLDocumentInformationList;
    procedure Set_DeliveryMessageNumber(Value: WideString);
    procedure Set_TransactionHistoryNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryMessageDate }

  TXMLDeliveryMessageDate = class(TXMLNode, IXMLDeliveryMessageDate)
  protected
    { IXMLDeliveryMessageDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDateBasis }

  TXMLDateBasis = class(TXMLNode, IXMLDateBasis)
  protected
    { IXMLDateBasis }
    function Get_Year: WideString;
    function Get_Month: LongWord;
    function Get_Day: LongWord;
    procedure Set_Year(Value: WideString);
    procedure Set_Month(Value: LongWord);
    procedure Set_Day(Value: LongWord);
  end;

{ TXMLDeliveryMessageReference }

  TXMLDeliveryMessageReference = class(TXMLNode, IXMLDeliveryMessageReference)
  protected
    { IXMLDeliveryMessageReference }
    function Get_DeliveryMessageReferenceType: WideString;
    function Get_AssignedBy: WideString;
    procedure Set_DeliveryMessageReferenceType(Value: WideString);
    procedure Set_AssignedBy(Value: WideString);
  end;

{ TXMLDeliveryMessageReferenceList }

  TXMLDeliveryMessageReferenceList = class(TXMLNodeCollection, IXMLDeliveryMessageReferenceList)
  protected
    { IXMLDeliveryMessageReferenceList }
    function Add: IXMLDeliveryMessageReference;
    function Insert(const Index: Integer): IXMLDeliveryMessageReference;
    function Get_Item(Index: Integer): IXMLDeliveryMessageReference;
  end;

{ TXMLDocumentReferenceInformation }

  TXMLDocumentReferenceInformation = class(TXMLNode, IXMLDocumentReferenceInformation)
  protected
    { IXMLDocumentReferenceInformation }
    function Get_DocumentReferenceID: IXMLDocumentReferenceID;
    function Get_DocumentReferenceIDLineItemNumber: LongWord;
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    function Get_NumberOfDocumentsRequired: LongWord;
    procedure Set_DocumentReferenceIDLineItemNumber(Value: LongWord);
    procedure Set_Time(Value: WideString);
    procedure Set_NumberOfDocumentsRequired(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDocumentReferenceInformationList }

  TXMLDocumentReferenceInformationList = class(TXMLNodeCollection, IXMLDocumentReferenceInformationList)
  protected
    { IXMLDocumentReferenceInformationList }
    function Add: IXMLDocumentReferenceInformation;
    function Insert(const Index: Integer): IXMLDocumentReferenceInformation;
    function Get_Item(Index: Integer): IXMLDocumentReferenceInformation;
  end;

{ TXMLDocumentReferenceID }

  TXMLDocumentReferenceID = class(TXMLNode, IXMLDocumentReferenceID)
  protected
    { IXMLDocumentReferenceID }
    function Get_DocumentReferenceIDType: WideString;
    function Get_AssignedBy: WideString;
    procedure Set_DocumentReferenceIDType(Value: WideString);
    procedure Set_AssignedBy(Value: WideString);
  end;

{ TXMLParty }

  TXMLParty = class(TXMLNode, IXMLParty)
  private
    FPartyIdentifier: IXMLPartyIdentifierList;
    FCommonContact: IXMLCommonContactList;
  protected
    { IXMLParty }
    function Get_LogisticsRole: WideString;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_NameAddress: IXMLNameAddress;
    function Get_URL: WideString;
    function Get_CommonContact: IXMLCommonContactList;
    procedure Set_LogisticsRole(Value: WideString);
    procedure Set_URL(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPartyIdentifier }

  TXMLPartyIdentifier = class(TXMLNode, IXMLPartyIdentifier)
  protected
    { IXMLPartyIdentifier }
    function Get_PartyIdentifierType: WideString;
    procedure Set_PartyIdentifierType(Value: WideString);
  end;

{ TXMLPartyIdentifierList }

  TXMLPartyIdentifierList = class(TXMLNodeCollection, IXMLPartyIdentifierList)
  protected
    { IXMLPartyIdentifierList }
    function Add: IXMLPartyIdentifier;
    function Insert(const Index: Integer): IXMLPartyIdentifier;
    function Get_Item(Index: Integer): IXMLPartyIdentifier;
  end;

{ TXMLNameAddress }

  TXMLNameAddress = class(TXMLNode, IXMLNameAddress)
  protected
    { IXMLNameAddress }
    function Get_CommunicationRole: WideString;
    function Get_Name1: WideString;
    function Get_Name2: WideString;
    function Get_Name3: WideString;
    function Get_OrganisationUnit: IXMLOrganisationUnit;
    function Get_Address1: WideString;
    function Get_Address2: WideString;
    function Get_Address3: WideString;
    function Get_Address4: WideString;
    function Get_City: WideString;
    function Get_County: WideString;
    function Get_StateOrProvince: WideString;
    function Get_PostalCode: IXMLPostalCode;
    function Get_Country: IXMLCountry;
    function Get_GPSCoordinates: IXMLGPSCoordinates;
    procedure Set_CommunicationRole(Value: WideString);
    procedure Set_Name1(Value: WideString);
    procedure Set_Name2(Value: WideString);
    procedure Set_Name3(Value: WideString);
    procedure Set_Address1(Value: WideString);
    procedure Set_Address2(Value: WideString);
    procedure Set_Address3(Value: WideString);
    procedure Set_Address4(Value: WideString);
    procedure Set_City(Value: WideString);
    procedure Set_County(Value: WideString);
    procedure Set_StateOrProvince(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLOrganisationUnit }

  TXMLOrganisationUnit = class(TXMLNode, IXMLOrganisationUnit)
  protected
    { IXMLOrganisationUnit }
    function Get_OrganisationUnitType: WideString;
    function Get_OrganisationUnitName: WideString;
    function Get_OrganisationUnitCode: WideString;
    procedure Set_OrganisationUnitType(Value: WideString);
    procedure Set_OrganisationUnitName(Value: WideString);
    procedure Set_OrganisationUnitCode(Value: WideString);
  end;

{ TXMLPostalCode }

  TXMLPostalCode = class(TXMLNode, IXMLPostalCode)
  protected
    { IXMLPostalCode }
  end;

{ TXMLCountry }

  TXMLCountry = class(TXMLNode, IXMLCountry)
  protected
    { IXMLCountry }
    function Get_ISOCountryCode: WideString;
    procedure Set_ISOCountryCode(Value: WideString);
  end;

{ TXMLGPSCoordinates }

  TXMLGPSCoordinates = class(TXMLNode, IXMLGPSCoordinates)
  protected
    { IXMLGPSCoordinates }
    function Get_GPSSystem: WideString;
    function Get_Latitude: WideString;
    function Get_Longitude: WideString;
    function Get_Height: IXMLMeasurement;
    procedure Set_GPSSystem(Value: WideString);
    procedure Set_Latitude(Value: WideString);
    procedure Set_Longitude(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMeasurement }

  TXMLMeasurement = class(TXMLNode, IXMLMeasurement)
  protected
    { IXMLMeasurement }
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMeasurementList }

  TXMLMeasurementList = class(TXMLNodeCollection, IXMLMeasurementList)
  protected
    { IXMLMeasurementList }
    function Add: IXMLMeasurement;
    function Insert(const Index: Integer): IXMLMeasurement;
    function Get_Item(Index: Integer): IXMLMeasurement;
  end;

{ TXMLValue }

  TXMLValue = class(TXMLNode, IXMLValue)
  protected
    { IXMLValue }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
  end;

{ TXMLRangeMin }

  TXMLRangeMin = class(TXMLNode, IXMLRangeMin)
  protected
    { IXMLRangeMin }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
  end;

{ TXMLRangeMax }

  TXMLRangeMax = class(TXMLNode, IXMLRangeMax)
  protected
    { IXMLRangeMax }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
  end;

{ TXMLCommonContact }

  TXMLCommonContact = class(TXMLNode, IXMLCommonContact)
  protected
    { IXMLCommonContact }
    function Get_ContactType: WideString;
    function Get_ContactName: WideString;
    function Get_Telephone: WideString;
    function Get_MobilePhone: WideString;
    function Get_Email: WideString;
    function Get_Fax: WideString;
    function Get_GPSCoordinates: IXMLGPSCoordinates;
    procedure Set_ContactType(Value: WideString);
    procedure Set_ContactName(Value: WideString);
    procedure Set_Telephone(Value: WideString);
    procedure Set_MobilePhone(Value: WideString);
    procedure Set_Email(Value: WideString);
    procedure Set_Fax(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCommonContactList }

  TXMLCommonContactList = class(TXMLNodeCollection, IXMLCommonContactList)
  protected
    { IXMLCommonContactList }
    function Add: IXMLCommonContact;
    function Insert(const Index: Integer): IXMLCommonContact;
    function Get_Item(Index: Integer): IXMLCommonContact;
  end;

{ TXMLTypedParty }

  TXMLTypedParty = class(TXMLParty, IXMLTypedParty)
  protected
    { IXMLTypedParty }
    function Get_PartyType: WideString;
    procedure Set_PartyType(Value: WideString);
  end;

{ TXMLTypedPartyList }

  TXMLTypedPartyList = class(TXMLNodeCollection, IXMLTypedPartyList)
  protected
    { IXMLTypedPartyList }
    function Add: IXMLTypedParty;
    function Insert(const Index: Integer): IXMLTypedParty;
    function Get_Item(Index: Integer): IXMLTypedParty;
  end;

{ TXMLShipToInformation }

  TXMLShipToInformation = class(TXMLNode, IXMLShipToInformation)
  private
    FDeliverySchedule: IXMLDeliveryScheduleList;
  protected
    { IXMLShipToInformation }
    function Get_ShipToCharacteristics: IXMLShipToCharacteristics;
    function Get_DeliverySchedule: IXMLDeliveryScheduleList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLShipToInformationList }

  TXMLShipToInformationList = class(TXMLNodeCollection, IXMLShipToInformationList)
  protected
    { IXMLShipToInformationList }
    function Add: IXMLShipToInformation;
    function Insert(const Index: Integer): IXMLShipToInformation;
    function Get_Item(Index: Integer): IXMLShipToInformation;
  end;

{ TXMLShipToCharacteristics }

  TXMLShipToCharacteristics = class(TXMLNode, IXMLShipToCharacteristics)
  protected
    { IXMLShipToCharacteristics }
    function Get_ShipToParty: IXMLTypedParty;
    function Get_LocationCode: IXMLLocationCode;
    function Get_TermsOfDelivery: IXMLTermsOfDelivery;
    function Get_DeliveryRouteCode: IXMLDeliveryRouteCode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLocationCode }

  TXMLLocationCode = class(TXMLNode, IXMLLocationCode)
  protected
    { IXMLLocationCode }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
  end;

{ TXMLTermsOfDelivery }

  TXMLTermsOfDelivery = class(TXMLNode, IXMLTermsOfDelivery)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLTermsOfDelivery }
    function Get_IncotermsLocation: IXMLIncotermsLocation;
    function Get_ShipmentMethodOfPayment: IXMLShipmentMethodOfPayment;
    function Get_FreightPayableAt: WideString;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_FreightPayableAt(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLIncotermsLocation }

  TXMLIncotermsLocation = class(TXMLNode, IXMLIncotermsLocation)
  protected
    { IXMLIncotermsLocation }
    function Get_Incoterms: WideString;
    function Get_IncotermsVersion: WideString;
    procedure Set_Incoterms(Value: WideString);
    procedure Set_IncotermsVersion(Value: WideString);
  end;

{ TXMLShipmentMethodOfPayment }

  TXMLShipmentMethodOfPayment = class(TXMLNode, IXMLShipmentMethodOfPayment)
  protected
    { IXMLShipmentMethodOfPayment }
    function Get_LocationQualifier: WideString;
    function Get_Method: WideString;
    procedure Set_LocationQualifier(Value: WideString);
    procedure Set_Method(Value: WideString);
  end;

{ TXMLDeliveryRouteCode }

  TXMLDeliveryRouteCode = class(TXMLNode, IXMLDeliveryRouteCode)
  protected
    { IXMLDeliveryRouteCode }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
  end;

{ TXMLDeliverySchedule }

  TXMLDeliverySchedule = class(TXMLNode, IXMLDeliverySchedule)
  private
    FDeliveryDateWindow: IXMLDeliveryDateWindowList;
    FInformationalQuantity: IXMLInformationalQuantityList;
    FMonetaryAdjustment: IXMLMonetaryAdjustmentList;
    FDeliveryLeg: IXMLDeliveryLegList;
    FDeliveryScheduleReference: IXMLDeliveryScheduleReferenceList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLDeliverySchedule }
    function Get_DeliveryLineNumber: LongWord;
    function Get_ProductionStatus: IXMLProductionStatus;
    function Get_DeliveryStatus: IXMLDeliveryStatus;
    function Get_DeliveryDateWindow: IXMLDeliveryDateWindowList;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_PriceDetails: IXMLPriceDetails;
    function Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
    function Get_DeliveryLeg: IXMLDeliveryLegList;
    function Get_DeliveryScheduleReference: IXMLDeliveryScheduleReferenceList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_DeliveryLineNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryScheduleList }

  TXMLDeliveryScheduleList = class(TXMLNodeCollection, IXMLDeliveryScheduleList)
  protected
    { IXMLDeliveryScheduleList }
    function Add: IXMLDeliverySchedule;
    function Insert(const Index: Integer): IXMLDeliverySchedule;
    function Get_Item(Index: Integer): IXMLDeliverySchedule;
  end;

{ TXMLProductionStatus }

  TXMLProductionStatus = class(TXMLNode, IXMLProductionStatus)
  protected
    { IXMLProductionStatus }
    function Get_ProductionStatusType: WideString;
    function Get_ProductionLastDateOfChange: IXMLProductionLastDateOfChange;
    procedure Set_ProductionStatusType(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLProductionLastDateOfChange }

  TXMLProductionLastDateOfChange = class(TXMLNode, IXMLProductionLastDateOfChange)
  protected
    { IXMLProductionLastDateOfChange }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryStatus }

  TXMLDeliveryStatus = class(TXMLNode, IXMLDeliveryStatus)
  protected
    { IXMLDeliveryStatus }
    function Get_DeliveryStatusType: WideString;
    function Get_DeliveryLastDateOfChange: IXMLDeliveryLastDateOfChange;
    procedure Set_DeliveryStatusType(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryLastDateOfChange }

  TXMLDeliveryLastDateOfChange = class(TXMLNode, IXMLDeliveryLastDateOfChange)
  protected
    { IXMLDeliveryLastDateOfChange }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryDateWindow }

  TXMLDeliveryDateWindow = class(TXMLNode, IXMLDeliveryDateWindow)
  protected
    { IXMLDeliveryDateWindow }
    function Get_DeliveryDateType: WideString;
    function Get_DateTimeRange: IXMLDateTimeRange;
    function Get_Month: LongWord;
    function Get_Week: WideString;
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_DeliveryDateType(Value: WideString);
    procedure Set_Month(Value: LongWord);
    procedure Set_Week(Value: WideString);
    procedure Set_Time(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryDateWindowList }

  TXMLDeliveryDateWindowList = class(TXMLNodeCollection, IXMLDeliveryDateWindowList)
  protected
    { IXMLDeliveryDateWindowList }
    function Add: IXMLDeliveryDateWindow;
    function Insert(const Index: Integer): IXMLDeliveryDateWindow;
    function Get_Item(Index: Integer): IXMLDeliveryDateWindow;
  end;

{ TXMLDateTimeRange }

  TXMLDateTimeRange = class(TXMLNode, IXMLDateTimeRange)
  protected
    { IXMLDateTimeRange }
    function Get_DateTimeFrom: IXMLDateTimeFrom;
    function Get_DateTimeTo: IXMLDateTimeTo;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDateTimeFrom }

  TXMLDateTimeFrom = class(TXMLNode, IXMLDateTimeFrom)
  protected
    { IXMLDateTimeFrom }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDateTimeTo }

  TXMLDateTimeTo = class(TXMLNode, IXMLDateTimeTo)
  protected
    { IXMLDateTimeTo }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLQuantity }

  TXMLQuantity = class(TXMLMeasurement, IXMLQuantity)
  protected
    { IXMLQuantity }
    function Get_QuantityType: WideString;
    function Get_QuantityTypeContext: WideString;
    function Get_AdjustmentType: WideString;
    procedure Set_QuantityType(Value: WideString);
    procedure Set_QuantityTypeContext(Value: WideString);
    procedure Set_AdjustmentType(Value: WideString);
  end;

{ TXMLInformationalQuantity }

  TXMLInformationalQuantity = class(TXMLMeasurement, IXMLInformationalQuantity)
  protected
    { IXMLInformationalQuantity }
    function Get_QuantityType: WideString;
    function Get_QuantityTypeContext: WideString;
    function Get_AdjustmentType: WideString;
    procedure Set_QuantityType(Value: WideString);
    procedure Set_QuantityTypeContext(Value: WideString);
    procedure Set_AdjustmentType(Value: WideString);
  end;

{ TXMLInformationalQuantityList }

  TXMLInformationalQuantityList = class(TXMLNodeCollection, IXMLInformationalQuantityList)
  protected
    { IXMLInformationalQuantityList }
    function Add: IXMLInformationalQuantity;
    function Insert(const Index: Integer): IXMLInformationalQuantity;
    function Get_Item(Index: Integer): IXMLInformationalQuantity;
  end;

{ TXMLPriceDetails }

  TXMLPriceDetails = class(TXMLNode, IXMLPriceDetails)
  private
    FInformationalPricePerUnit: IXMLPricePerUnitList;
    FAdditionalText: IXMLS255List;
    FMonetaryAdjustment: IXMLMonetaryAdjustmentList;
  protected
    { IXMLPriceDetails }
    function Get_PriceQuantityBasis: WideString;
    function Get_PriceTaxBasis: WideString;
    function Get_PricePerUnit: IXMLPricePerUnit;
    function Get_InformationalPricePerUnit: IXMLPricePerUnitList;
    function Get_AdditionalText: IXMLS255List;
    function Get_ExchangeRate: IXMLExchangeRate;
    function Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
    function Get_GeneralLedgerAccount: IXMLGeneralLedgerAccount;
    procedure Set_PriceQuantityBasis(Value: WideString);
    procedure Set_PriceTaxBasis(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPricePerUnit }

  TXMLPricePerUnit = class(TXMLNode, IXMLPricePerUnit)
  protected
    { IXMLPricePerUnit }
    function Get_CurrencyValue: IXMLCurrencyValue;
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPricePerUnitList }

  TXMLPricePerUnitList = class(TXMLNodeCollection, IXMLPricePerUnitList)
  protected
    { IXMLPricePerUnitList }
    function Add: IXMLPricePerUnit;
    function Insert(const Index: Integer): IXMLPricePerUnit;
    function Get_Item(Index: Integer): IXMLPricePerUnit;
  end;

{ TXMLCurrencyValue }

  TXMLCurrencyValue = class(TXMLNode, IXMLCurrencyValue)
  protected
    { IXMLCurrencyValue }
    function Get_CurrencyType: WideString;
    procedure Set_CurrencyType(Value: WideString);
  end;

{ TXMLExchangeRate }

  TXMLExchangeRate = class(TXMLNode, IXMLExchangeRate)
  protected
    { IXMLExchangeRate }
    function Get_ExchangeRateType: WideString;
    function Get_CurrencyFromType: WideString;
    function Get_CurrencyValue: IXMLCurrencyValue;
    function Get_MinCurrencyValue: IXMLMinCurrencyValue;
    function Get_MaxCurrencyValue: IXMLMaxCurrencyValue;
    function Get_Date: IXMLDateBasis;
    procedure Set_ExchangeRateType(Value: WideString);
    procedure Set_CurrencyFromType(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMinCurrencyValue }

  TXMLMinCurrencyValue = class(TXMLNode, IXMLMinCurrencyValue)
  protected
    { IXMLMinCurrencyValue }
    function Get_CurrencyType: WideString;
    procedure Set_CurrencyType(Value: WideString);
  end;

{ TXMLMaxCurrencyValue }

  TXMLMaxCurrencyValue = class(TXMLNode, IXMLMaxCurrencyValue)
  protected
    { IXMLMaxCurrencyValue }
    function Get_CurrencyType: WideString;
    procedure Set_CurrencyType(Value: WideString);
  end;

{ TXMLMonetaryAdjustment }

  TXMLMonetaryAdjustment = class(TXMLNode, IXMLMonetaryAdjustment)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLMonetaryAdjustment }
    function Get_AdjustmentType: WideString;
    function Get_MonetaryAdjustmentLine: LongWord;
    function Get_MonetaryAdjustmentStartAmount: IXMLMonetaryAdjustmentStartAmount;
    function Get_MonetaryAdjustmentStartQuantity: IXMLMeasurement;
    function Get_PriceAdjustment: IXMLPriceAdjustment;
    function Get_FlatAmountAdjustment: IXMLFlatAmountAdjustment;
    function Get_TaxAdjustment: IXMLTaxAdjustment;
    function Get_InformationalAmount: IXMLInformationalAmount;
    function Get_MonetaryAdjustmentReferenceLine: LongWord;
    function Get_AdditionalText: IXMLS255List;
    function Get_GeneralLedgerAccount: IXMLGeneralLedgerAccount;
    function Get_MonetaryAdjustmentAmount: IXMLMonetaryAdjustmentAmount;
    function Get_AdjustmentTypeReason: WideString;
    procedure Set_AdjustmentType(Value: WideString);
    procedure Set_MonetaryAdjustmentLine(Value: LongWord);
    procedure Set_MonetaryAdjustmentReferenceLine(Value: LongWord);
    procedure Set_AdjustmentTypeReason(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMonetaryAdjustmentList }

  TXMLMonetaryAdjustmentList = class(TXMLNodeCollection, IXMLMonetaryAdjustmentList)
  protected
    { IXMLMonetaryAdjustmentList }
    function Add: IXMLMonetaryAdjustment;
    function Insert(const Index: Integer): IXMLMonetaryAdjustment;
    function Get_Item(Index: Integer): IXMLMonetaryAdjustment;
  end;

{ TXMLMonetaryAdjustmentStartAmount }

  TXMLMonetaryAdjustmentStartAmount = class(TXMLNode, IXMLMonetaryAdjustmentStartAmount)
  protected
    { IXMLMonetaryAdjustmentStartAmount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPriceAdjustment }

  TXMLPriceAdjustment = class(TXMLNode, IXMLPriceAdjustment)
  protected
    { IXMLPriceAdjustment }
    function Get_AdjustmentPercentage: IXMLMeasurement;
    function Get_AdjustmentValue: IXMLPricePerUnit;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLFlatAmountAdjustment }

  TXMLFlatAmountAdjustment = class(TXMLNode, IXMLFlatAmountAdjustment)
  protected
    { IXMLFlatAmountAdjustment }
    function Get_AdjustmentPercentage: IXMLMeasurement;
    function Get_AdjustmentFixedAmount: IXMLAdjustmentFixedAmount;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLAdjustmentFixedAmount }

  TXMLAdjustmentFixedAmount = class(TXMLNode, IXMLAdjustmentFixedAmount)
  protected
    { IXMLAdjustmentFixedAmount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTaxAdjustment }

  TXMLTaxAdjustment = class(TXMLNode, IXMLTaxAdjustment)
  private
    FInformationalAmount: IXMLInformationalAmountList;
  protected
    { IXMLTaxAdjustment }
    function Get_TaxCategoryType: WideString;
    function Get_TaxType: WideString;
    function Get_TaxPercent: WideString;
    function Get_TaxAmount: IXMLTaxAmount;
    function Get_TaxLocation: WideString;
    function Get_InformationalAmount: IXMLInformationalAmountList;
    procedure Set_TaxCategoryType(Value: WideString);
    procedure Set_TaxType(Value: WideString);
    procedure Set_TaxPercent(Value: WideString);
    procedure Set_TaxLocation(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTaxAmount }

  TXMLTaxAmount = class(TXMLNode, IXMLTaxAmount)
  protected
    { IXMLTaxAmount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInformationalAmount }

  TXMLInformationalAmount = class(TXMLNode, IXMLInformationalAmount)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLInformationalAmount }
    function Get_AmountType: WideString;
    function Get_CurrencyValue: IXMLCurrencyValue;
    function Get_ExchangeRate: IXMLExchangeRate;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_AmountType(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInformationalAmountList }

  TXMLInformationalAmountList = class(TXMLNodeCollection, IXMLInformationalAmountList)
  protected
    { IXMLInformationalAmountList }
    function Add: IXMLInformationalAmount;
    function Insert(const Index: Integer): IXMLInformationalAmount;
    function Get_Item(Index: Integer): IXMLInformationalAmount;
  end;

{ TXMLGeneralLedgerAccount }

  TXMLGeneralLedgerAccount = class(TXMLNode, IXMLGeneralLedgerAccount)
  protected
    { IXMLGeneralLedgerAccount }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
  end;

{ TXMLMonetaryAdjustmentAmount }

  TXMLMonetaryAdjustmentAmount = class(TXMLNode, IXMLMonetaryAdjustmentAmount)
  protected
    { IXMLMonetaryAdjustmentAmount }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryLeg }

  TXMLDeliveryLeg = class(TXMLNode, IXMLDeliveryLeg)
  private
    FOtherParty: IXMLTypedPartyList;
    FTransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
    FTransportOtherInstructions: IXMLTransportOtherInstructionsList;
    FDeliveryDateWindow: IXMLDeliveryDateWindowList;
    FDeliveryLegReference: IXMLDeliveryLegReferenceList;
    FTermsOfChartering: IXMLTermsOfCharteringList;
  protected
    { IXMLDeliveryLeg }
    function Get_DeliveryModeType: WideString;
    function Get_DeliveryLegType: WideString;
    function Get_DeliveryLegSequenceNumber: LongWord;
    function Get_DeliveryOrigin: IXMLDeliveryOrigin;
    function Get_CarrierParty: IXMLParty;
    function Get_OtherParty: IXMLTypedPartyList;
    function Get_TransportModeCharacteristics: IXMLTransportModeCharacteristics;
    function Get_TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics;
    function Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
    function Get_TransportLoadingCharacteristics: IXMLTransportLoadingCharacteristics;
    function Get_TransportUnloadingCharacteristics: IXMLTransportUnloadingCharacteristics;
    function Get_TransportOtherInstructions: IXMLTransportOtherInstructionsList;
    function Get_DeliveryTransitTime: IXMLDeliveryTransitTime;
    function Get_DeliveryDestination: IXMLDeliveryDestination;
    function Get_DeliveryDateWindow: IXMLDeliveryDateWindowList;
    function Get_DeliveryLegReference: IXMLDeliveryLegReferenceList;
    function Get_TermsOfChartering: IXMLTermsOfCharteringList;
    procedure Set_DeliveryModeType(Value: WideString);
    procedure Set_DeliveryLegType(Value: WideString);
    procedure Set_DeliveryLegSequenceNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryLegList }

  TXMLDeliveryLegList = class(TXMLNodeCollection, IXMLDeliveryLegList)
  protected
    { IXMLDeliveryLegList }
    function Add: IXMLDeliveryLeg;
    function Insert(const Index: Integer): IXMLDeliveryLeg;
    function Get_Item(Index: Integer): IXMLDeliveryLeg;
  end;

{ TXMLDeliveryOrigin }

  TXMLDeliveryOrigin = class(TXMLNode, IXMLDeliveryOrigin)
  protected
    { IXMLDeliveryOrigin }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    function Get_LocationParty: IXMLLocationParty;
    function Get_LocationCode: IXMLLocationCode;
    function Get_GPSCoordinates: IXMLGPSCoordinates;
    procedure Set_Time(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLocationParty }

  TXMLLocationParty = class(TXMLTypedParty, IXMLLocationParty)
  protected
    { IXMLLocationParty }
    function Get_LocationType: WideString;
    procedure Set_LocationType(Value: WideString);
  end;

{ TXMLTransportModeCharacteristics }

  TXMLTransportModeCharacteristics = class(TXMLNode, IXMLTransportModeCharacteristics)
  protected
    { IXMLTransportModeCharacteristics }
    function Get_TransportModeType: WideString;
    function Get_TransportModeCode: IXMLTransportModeCode;
    function Get_TransportModeText: WideString;
    procedure Set_TransportModeType(Value: WideString);
    procedure Set_TransportModeText(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportModeCode }

  TXMLTransportModeCode = class(TXMLNode, IXMLTransportModeCode)
  protected
    { IXMLTransportModeCode }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
  end;

{ TXMLTransportVehicleCharacteristics }

  TXMLTransportVehicleCharacteristics = class(TXMLNode, IXMLTransportVehicleCharacteristics)
  private
    FTransportVehicleIdentifier: IXMLTransportVehicleIdentifierList;
  protected
    { IXMLTransportVehicleCharacteristics }
    function Get_TransportVehicleType: WideString;
    function Get_TransportVehicleCode: IXMLTransportVehicleCode;
    function Get_TransportVehicleMeasurements: IXMLTransportVehicleMeasurements;
    function Get_TransportVehicleCount: LongWord;
    function Get_TransportVehicleIdentifier: IXMLTransportVehicleIdentifierList;
    function Get_TransportVehicleText: WideString;
    procedure Set_TransportVehicleType(Value: WideString);
    procedure Set_TransportVehicleCount(Value: LongWord);
    procedure Set_TransportVehicleText(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportVehicleCode }

  TXMLTransportVehicleCode = class(TXMLNode, IXMLTransportVehicleCode)
  protected
    { IXMLTransportVehicleCode }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
  end;

{ TXMLTransportVehicleMeasurements }

  TXMLTransportVehicleMeasurements = class(TXMLNode, IXMLTransportVehicleMeasurements)
  protected
    { IXMLTransportVehicleMeasurements }
    function Get_TransportVehicleLength: IXMLMeasurement;
    function Get_TransportVehicleWidth: IXMLMeasurement;
    function Get_TransportVehicleHeight: IXMLMeasurement;
    function Get_TransportVehicleWeight: IXMLMeasurement;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportVehicleIdentifier }

  TXMLTransportVehicleIdentifier = class(TXMLNode, IXMLTransportVehicleIdentifier)
  protected
    { IXMLTransportVehicleIdentifier }
    function Get_TransportVehicleIdentifierType: WideString;
    procedure Set_TransportVehicleIdentifierType(Value: WideString);
  end;

{ TXMLTransportVehicleIdentifierList }

  TXMLTransportVehicleIdentifierList = class(TXMLNodeCollection, IXMLTransportVehicleIdentifierList)
  protected
    { IXMLTransportVehicleIdentifierList }
    function Add: IXMLTransportVehicleIdentifier;
    function Insert(const Index: Integer): IXMLTransportVehicleIdentifier;
    function Get_Item(Index: Integer): IXMLTransportVehicleIdentifier;
  end;

{ TXMLTransportUnitCharacteristics }

  TXMLTransportUnitCharacteristics = class(TXMLNode, IXMLTransportUnitCharacteristics)
  private
    FTransportUnitMeasurements: IXMLTransportUnitMeasurementsList;
    FTransportUnitIdentifier: IXMLTransportUnitIdentifierList;
  protected
    { IXMLTransportUnitCharacteristics }
    function Get_TransportUnitType: WideString;
    function Get_TransportUnitVariable: WideString;
    function Get_TransportUnitLevel: LongWord;
    function Get_TransportUnitCode: IXMLTransportUnitCode;
    function Get_TransportUnitMeasurements: IXMLTransportUnitMeasurementsList;
    function Get_TransportUnitCount: LongWord;
    function Get_TransportUnitIdentifier: IXMLTransportUnitIdentifierList;
    function Get_TransportUnitText: WideString;
    function Get_TransportUnitDetail: IXMLTransportUnitDetail;
    procedure Set_TransportUnitType(Value: WideString);
    procedure Set_TransportUnitVariable(Value: WideString);
    procedure Set_TransportUnitLevel(Value: LongWord);
    procedure Set_TransportUnitCount(Value: LongWord);
    procedure Set_TransportUnitText(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportUnitCharacteristicsList }

  TXMLTransportUnitCharacteristicsList = class(TXMLNodeCollection, IXMLTransportUnitCharacteristicsList)
  protected
    { IXMLTransportUnitCharacteristicsList }
    function Add: IXMLTransportUnitCharacteristics;
    function Insert(const Index: Integer): IXMLTransportUnitCharacteristics;
    function Get_Item(Index: Integer): IXMLTransportUnitCharacteristics;
  end;

{ TXMLTransportUnitCode }

  TXMLTransportUnitCode = class(TXMLNode, IXMLTransportUnitCode)
  protected
    { IXMLTransportUnitCode }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
  end;

{ TXMLTransportUnitMeasurements }

  TXMLTransportUnitMeasurements = class(TXMLNode, IXMLTransportUnitMeasurements)
  protected
    { IXMLTransportUnitMeasurements }
    function Get_AppliesTo: WideString;
    function Get_TransportUnitLength: IXMLMeasurement;
    function Get_TransportUnitWidth: IXMLMeasurement;
    function Get_TransportUnitHeight: IXMLMeasurement;
    function Get_TransportUnitWeight: IXMLMeasurement;
    procedure Set_AppliesTo(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportUnitMeasurementsList }

  TXMLTransportUnitMeasurementsList = class(TXMLNodeCollection, IXMLTransportUnitMeasurementsList)
  protected
    { IXMLTransportUnitMeasurementsList }
    function Add: IXMLTransportUnitMeasurements;
    function Insert(const Index: Integer): IXMLTransportUnitMeasurements;
    function Get_Item(Index: Integer): IXMLTransportUnitMeasurements;
  end;

{ TXMLTransportUnitIdentifier }

  TXMLTransportUnitIdentifier = class(TXMLNode, IXMLTransportUnitIdentifier)
  protected
    { IXMLTransportUnitIdentifier }
    function Get_TransportUnitIdentifierType: WideString;
    procedure Set_TransportUnitIdentifierType(Value: WideString);
  end;

{ TXMLTransportUnitIdentifierList }

  TXMLTransportUnitIdentifierList = class(TXMLNodeCollection, IXMLTransportUnitIdentifierList)
  protected
    { IXMLTransportUnitIdentifierList }
    function Add: IXMLTransportUnitIdentifier;
    function Insert(const Index: Integer): IXMLTransportUnitIdentifier;
    function Get_Item(Index: Integer): IXMLTransportUnitIdentifier;
  end;

{ TXMLTransportUnitDetail }

  TXMLTransportUnitDetail = class(TXMLNode, IXMLTransportUnitDetail)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLTransportUnitDetail }
    function Get_TransportUnitDetailType: WideString;
    function Get_LoadOpeningSide: WideString;
    function Get_TransportUnitDetailCode: IXMLTransportUnitDetailCode;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_TransportUnitDetailType(Value: WideString);
    procedure Set_LoadOpeningSide(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportUnitDetailCode }

  TXMLTransportUnitDetailCode = class(TXMLNode, IXMLTransportUnitDetailCode)
  protected
    { IXMLTransportUnitDetailCode }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
  end;

{ TXMLTransportLoadingCharacteristics }

  TXMLTransportLoadingCharacteristics = class(TXMLNode, IXMLTransportLoadingCharacteristics)
  private
    FTransportLoadingText: IXMLS255List;
  protected
    { IXMLTransportLoadingCharacteristics }
    function Get_MixProductIndicator: WideString;
    function Get_TransportLoadingType: WideString;
    function Get_TransportDeckOption: WideString;
    function Get_LoadingTolerance: WideString;
    function Get_DirectLoading: WideString;
    function Get_GoodsLoadingPrinciple: WideString;
    function Get_LabelOrientation: WideString;
    function Get_TransportLoadingCode: IXMLTransportLoadingCode;
    function Get_TransportLoadingCodeDescription: IXMLTransportLoadingCodeDescription;
    function Get_TransportLoadingText: IXMLS255List;
    procedure Set_MixProductIndicator(Value: WideString);
    procedure Set_TransportLoadingType(Value: WideString);
    procedure Set_TransportDeckOption(Value: WideString);
    procedure Set_LoadingTolerance(Value: WideString);
    procedure Set_DirectLoading(Value: WideString);
    procedure Set_GoodsLoadingPrinciple(Value: WideString);
    procedure Set_LabelOrientation(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportLoadingCharacteristicsList }

  TXMLTransportLoadingCharacteristicsList = class(TXMLNodeCollection, IXMLTransportLoadingCharacteristicsList)
  protected
    { IXMLTransportLoadingCharacteristicsList }
    function Add: IXMLTransportLoadingCharacteristics;
    function Insert(const Index: Integer): IXMLTransportLoadingCharacteristics;
    function Get_Item(Index: Integer): IXMLTransportLoadingCharacteristics;
  end;

{ TXMLTransportLoadingCode }

  TXMLTransportLoadingCode = class(TXMLNode, IXMLTransportLoadingCode)
  protected
    { IXMLTransportLoadingCode }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
  end;

{ TXMLTransportLoadingCodeDescription }

  TXMLTransportLoadingCodeDescription = class(TXMLNode, IXMLTransportLoadingCodeDescription)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLTransportLoadingCodeDescription }
    function Get_AdditionalText: IXMLS255List;
    function Get_EAttachment: IXMLEAttachment;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLEAttachment }

  TXMLEAttachment = class(TXMLNode, IXMLEAttachment)
  private
    FAttachmentFileName: IXMLS60List;
    FURL: IXMLAnyURIList;
  protected
    { IXMLEAttachment }
    function Get_AttachmentFileName: IXMLS60List;
    function Get_NumberOfAttachments: LongWord;
    function Get_URL: IXMLAnyURIList;
    procedure Set_NumberOfAttachments(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportUnloadingCharacteristics }

  TXMLTransportUnloadingCharacteristics = class(TXMLNode, IXMLTransportUnloadingCharacteristics)
  private
    FTransportUnloadingText: IXMLS255List;
  protected
    { IXMLTransportUnloadingCharacteristics }
    function Get_TransportUnloadingType: WideString;
    function Get_DirectUnloading: WideString;
    function Get_TransportUnloadingCode: IXMLTransportUnloadingCode;
    function Get_TransportUnloadingCodeDescription: IXMLTransportUnloadingCodeDescription;
    function Get_TransportUnloadingText: IXMLS255List;
    procedure Set_TransportUnloadingType(Value: WideString);
    procedure Set_DirectUnloading(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportUnloadingCode }

  TXMLTransportUnloadingCode = class(TXMLNode, IXMLTransportUnloadingCode)
  protected
    { IXMLTransportUnloadingCode }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
  end;

{ TXMLTransportUnloadingCodeDescription }

  TXMLTransportUnloadingCodeDescription = class(TXMLNode, IXMLTransportUnloadingCodeDescription)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLTransportUnloadingCodeDescription }
    function Get_AdditionalText: IXMLS255List;
    function Get_EAttachment: IXMLEAttachment;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportOtherInstructions }

  TXMLTransportOtherInstructions = class(TXMLNode, IXMLTransportOtherInstructions)
  private
    FTransportInstructionText: IXMLS255List;
  protected
    { IXMLTransportOtherInstructions }
    function Get_TransportInstructionType: WideString;
    function Get_TransportInstructionCode: IXMLTransportInstructionCode;
    function Get_TransportInstructionText: IXMLS255List;
    procedure Set_TransportInstructionType(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportOtherInstructionsList }

  TXMLTransportOtherInstructionsList = class(TXMLNodeCollection, IXMLTransportOtherInstructionsList)
  protected
    { IXMLTransportOtherInstructionsList }
    function Add: IXMLTransportOtherInstructions;
    function Insert(const Index: Integer): IXMLTransportOtherInstructions;
    function Get_Item(Index: Integer): IXMLTransportOtherInstructions;
  end;

{ TXMLTransportInstructionCode }

  TXMLTransportInstructionCode = class(TXMLNode, IXMLTransportInstructionCode)
  protected
    { IXMLTransportInstructionCode }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
  end;

{ TXMLDeliveryTransitTime }

  TXMLDeliveryTransitTime = class(TXMLNode, IXMLDeliveryTransitTime)
  protected
    { IXMLDeliveryTransitTime }
    function Get_Days: LongWord;
    function Get_Hours: LongWord;
    function Get_Minutes: LongWord;
    procedure Set_Days(Value: LongWord);
    procedure Set_Hours(Value: LongWord);
    procedure Set_Minutes(Value: LongWord);
  end;

{ TXMLDeliveryDestination }

  TXMLDeliveryDestination = class(TXMLNode, IXMLDeliveryDestination)
  protected
    { IXMLDeliveryDestination }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    function Get_LocationParty: IXMLLocationParty;
    function Get_LocationCode: IXMLLocationCode;
    function Get_GPSCoordinates: IXMLGPSCoordinates;
    procedure Set_Time(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryLegReference }

  TXMLDeliveryLegReference = class(TXMLNode, IXMLDeliveryLegReference)
  protected
    { IXMLDeliveryLegReference }
    function Get_DeliveryLegReferenceType: WideString;
    function Get_AssignedBy: WideString;
    procedure Set_DeliveryLegReferenceType(Value: WideString);
    procedure Set_AssignedBy(Value: WideString);
  end;

{ TXMLDeliveryLegReferenceList }

  TXMLDeliveryLegReferenceList = class(TXMLNodeCollection, IXMLDeliveryLegReferenceList)
  protected
    { IXMLDeliveryLegReferenceList }
    function Add: IXMLDeliveryLegReference;
    function Insert(const Index: Integer): IXMLDeliveryLegReference;
    function Get_Item(Index: Integer): IXMLDeliveryLegReference;
  end;

{ TXMLTermsOfChartering }

  TXMLTermsOfChartering = class(TXMLNode, IXMLTermsOfChartering)
  protected
    { IXMLTermsOfChartering }
    function Get_TermsOfCharteringType: WideString;
    procedure Set_TermsOfCharteringType(Value: WideString);
  end;

{ TXMLTermsOfCharteringList }

  TXMLTermsOfCharteringList = class(TXMLNodeCollection, IXMLTermsOfCharteringList)
  protected
    { IXMLTermsOfCharteringList }
    function Add: IXMLTermsOfChartering;
    function Insert(const Index: Integer): IXMLTermsOfChartering;
    function Get_Item(Index: Integer): IXMLTermsOfChartering;
  end;

{ TXMLDeliveryScheduleReference }

  TXMLDeliveryScheduleReference = class(TXMLNode, IXMLDeliveryScheduleReference)
  protected
    { IXMLDeliveryScheduleReference }
    function Get_DeliveryScheduleReferenceType: WideString;
    function Get_AssignedBy: WideString;
    procedure Set_DeliveryScheduleReferenceType(Value: WideString);
    procedure Set_AssignedBy(Value: WideString);
  end;

{ TXMLDeliveryScheduleReferenceList }

  TXMLDeliveryScheduleReferenceList = class(TXMLNodeCollection, IXMLDeliveryScheduleReferenceList)
  protected
    { IXMLDeliveryScheduleReferenceList }
    function Add: IXMLDeliveryScheduleReference;
    function Insert(const Index: Integer): IXMLDeliveryScheduleReference;
    function Get_Item(Index: Integer): IXMLDeliveryScheduleReference;
  end;

{ TXMLCountryOfOrigin }

  TXMLCountryOfOrigin = class(TXMLNode, IXMLCountryOfOrigin)
  protected
    { IXMLCountryOfOrigin }
    function Get_Country: IXMLCountry;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCountryOfDestination }

  TXMLCountryOfDestination = class(TXMLNode, IXMLCountryOfDestination)
  protected
    { IXMLCountryOfDestination }
    function Get_Country: IXMLCountry;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCountryOfConsumption }

  TXMLCountryOfConsumption = class(TXMLNode, IXMLCountryOfConsumption)
  protected
    { IXMLCountryOfConsumption }
    function Get_Country: IXMLCountry;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInsurance }

  TXMLInsurance = class(TXMLNode, IXMLInsurance)
  protected
    { IXMLInsurance }
    function Get_Insurer: WideString;
    function Get_InsuranceContractNo: WideString;
    function Get_InsuredValue: IXMLInsuredValue;
    function Get_InsuranceInfo: WideString;
    procedure Set_Insurer(Value: WideString);
    procedure Set_InsuranceContractNo(Value: WideString);
    procedure Set_InsuranceInfo(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInsuredValue }

  TXMLInsuredValue = class(TXMLNode, IXMLInsuredValue)
  protected
    { IXMLInsuredValue }
    function Get_CurrencyValue: IXMLCurrencyValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDocumentInformation }

  TXMLDocumentInformation = class(TXMLNode, IXMLDocumentInformation)
  private
    FNumberOfDocuments: IXMLNumberOfDocumentsList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLDocumentInformation }
    function Get_DocumentType: WideString;
    function Get_NumberOfDocuments: IXMLNumberOfDocumentsList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_DocumentType(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDocumentInformationList }

  TXMLDocumentInformationList = class(TXMLNodeCollection, IXMLDocumentInformationList)
  protected
    { IXMLDocumentInformationList }
    function Add: IXMLDocumentInformation;
    function Insert(const Index: Integer): IXMLDocumentInformation;
    function Get_Item(Index: Integer): IXMLDocumentInformation;
  end;

{ TXMLNumberOfDocuments }

  TXMLNumberOfDocuments = class(TXMLNode, IXMLNumberOfDocuments)
  protected
    { IXMLNumberOfDocuments }
    function Get_Original: WideString;
    procedure Set_Original(Value: WideString);
  end;

{ TXMLNumberOfDocumentsList }

  TXMLNumberOfDocumentsList = class(TXMLNodeCollection, IXMLNumberOfDocumentsList)
  protected
    { IXMLNumberOfDocumentsList }
    function Add: IXMLNumberOfDocuments;
    function Insert(const Index: Integer): IXMLNumberOfDocuments;
    function Get_Item(Index: Integer): IXMLNumberOfDocuments;
  end;

{ TXMLDeliveryMessageShipment }

  TXMLDeliveryMessageShipment = class(TXMLNode, IXMLDeliveryMessageShipment)
  private
    FDeliveryMessageProductGroup: IXMLDeliveryMessageProductGroupList;
  protected
    { IXMLDeliveryMessageShipment }
    function Get_ShipmentID: IXMLShipmentID;
    function Get_DeliveryMessageProductGroup: IXMLDeliveryMessageProductGroupList;
    function Get_ShipmentSummary: IXMLShipmentSummary;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryMessageShipmentList }

  TXMLDeliveryMessageShipmentList = class(TXMLNodeCollection, IXMLDeliveryMessageShipmentList)
  protected
    { IXMLDeliveryMessageShipmentList }
    function Add: IXMLDeliveryMessageShipment;
    function Insert(const Index: Integer): IXMLDeliveryMessageShipment;
    function Get_Item(Index: Integer): IXMLDeliveryMessageShipment;
  end;

{ TXMLShipmentID }


  TXMLShipmentID = class(TXMLNode, IXMLShipmentID)
  protected
    { IXMLShipmentID }
    function Get_ShipmentIDType: WideString;
    procedure Set_ShipmentIDType(Value: WideString);
  end;


{ TXMLDeliveryMessageProductGroup }

  TXMLDeliveryMessageProductGroup = class(TXMLNode, IXMLDeliveryMessageProductGroup)
  private
    FDeliveryShipmentLineItem: IXMLDeliveryShipmentLineItemList;
  protected
    { IXMLDeliveryMessageProductGroup }
    function Get_ProductGroupID: IXMLProductGroupID;
    function Get_DeliveryShipmentLineItem: IXMLDeliveryShipmentLineItemList;
    function Get_ProductGroupSummary: IXMLProductGroupSummary;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryMessageProductGroupList }

  TXMLDeliveryMessageProductGroupList = class(TXMLNodeCollection, IXMLDeliveryMessageProductGroupList)
  protected
    { IXMLDeliveryMessageProductGroupList }
    function Add: IXMLDeliveryMessageProductGroup;
    function Insert(const Index: Integer): IXMLDeliveryMessageProductGroup;
    function Get_Item(Index: Integer): IXMLDeliveryMessageProductGroup;
  end;

{ TXMLProductGroupID }


  TXMLProductGroupID = class(TXMLNode, IXMLProductGroupID)
  protected
    { IXMLProductGroupID }
    function Get_ProductGroupIDType: WideString;
    procedure Set_ProductGroupIDType(Value: WideString);
  end;

{ TXMLDeliveryShipmentLineItem }

  TXMLDeliveryShipmentLineItem = class(TXMLNode, IXMLDeliveryShipmentLineItem)
  private
    FDeliveryMessageReference: IXMLDeliveryMessageReferenceList;
    FDocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    FDeliveryDateWindow: IXMLDeliveryDateWindowList;
    FTransportLoadingCharacteristics: IXMLTransportLoadingCharacteristicsList;
    FTransportOtherInstructions: IXMLTransportOtherInstructionsList;
    FSafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    FPackageInformation: IXMLPackageInformationClassList;
    FTransportPackageInformation: IXMLTransportPackageInformationList;
    FLengthSpecification: IXMLLengthSpecificationList;
  protected
    { IXMLDeliveryShipmentLineItem }
    function Get_DeliveryShipmentLineItemNumber: LongWord;
    function Get_PurchaseOrderInformation: IXMLPurchaseOrderInformation;
    function Get_PurchaseOrderLineItemNumber: LongWord;
    function Get_DeliveryMessageReference: IXMLDeliveryMessageReferenceList;
    function Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
    function Get_CountryOfOrigin: IXMLCountryOfOrigin;
    function Get_CountryOfDestination: IXMLCountryOfDestination;
    function Get_CountryOfConsumption: IXMLCountryOfConsumption;
    function Get_TotalNumberOfUnits: IXMLMeasurement;
    function Get_DeliveryDateWindow: IXMLDeliveryDateWindowList;
    function Get_MillProductionInformation: IXMLMillProductionInformation;
    function Get_QuantityOrderedInformation: IXMLQuantityOrderedInformation;
    function Get_TransportLoadingCharacteristics: IXMLTransportLoadingCharacteristicsList;
    function Get_TransportUnloadingCharacteristics: IXMLTransportUnloadingCharacteristics;
    function Get_TransportOtherInstructions: IXMLTransportOtherInstructionsList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    function Get_BillToParty: IXMLParty;
    function Get_Product: IXMLProductClass;
    function Get_PackageInformation: IXMLPackageInformationClassList;
    function Get_TransportPackageInformation: IXMLTransportPackageInformationList;
    function Get_ProductSummary: IXMLProductSummary;
    function Get_LengthSpecification: IXMLLengthSpecificationList;
    function Get_QuantityDeviation: IXMLMeasurementWithText;
    procedure Set_DeliveryShipmentLineItemNumber(Value: LongWord);
    procedure Set_PurchaseOrderLineItemNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryShipmentLineItemList }

  TXMLDeliveryShipmentLineItemList = class(TXMLNodeCollection, IXMLDeliveryShipmentLineItemList)
  protected
    { IXMLDeliveryShipmentLineItemList }
    function Add: IXMLDeliveryShipmentLineItem;
    function Insert(const Index: Integer): IXMLDeliveryShipmentLineItem;
    function Get_Item(Index: Integer): IXMLDeliveryShipmentLineItem;
  end;

{ TXMLPurchaseOrderInformation }

  TXMLPurchaseOrderInformation = class(TXMLNode, IXMLPurchaseOrderInformation)
  private
    FPurchaseOrderReference: IXMLPurchaseOrderReferenceList;
  protected
    { IXMLPurchaseOrderInformation }
    function Get_PurchaseOrderNumber: WideString;
    function Get_PurchaseOrderReleaseNumber: WideString;
    function Get_PurchaseOrderIssuedDate: IXMLDateTimeBasis;
    function Get_PurchaseOrderReference: IXMLPurchaseOrderReferenceList;
    procedure Set_PurchaseOrderNumber(Value: WideString);
    procedure Set_PurchaseOrderReleaseNumber(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDateTimeBasis }

  TXMLDateTimeBasis = class(TXMLNode, IXMLDateTimeBasis)
  protected
    { IXMLDateTimeBasis }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPurchaseOrderReference }

  TXMLPurchaseOrderReference = class(TXMLNode, IXMLPurchaseOrderReference)
  protected
    { IXMLPurchaseOrderReference }
    function Get_PurchaseOrderReferenceType: WideString;
    function Get_AssignedBy: WideString;
    procedure Set_PurchaseOrderReferenceType(Value: WideString);
    procedure Set_AssignedBy(Value: WideString);
  end;

{ TXMLPurchaseOrderReferenceList }

  TXMLPurchaseOrderReferenceList = class(TXMLNodeCollection, IXMLPurchaseOrderReferenceList)
  protected
    { IXMLPurchaseOrderReferenceList }
    function Add: IXMLPurchaseOrderReference;
    function Insert(const Index: Integer): IXMLPurchaseOrderReference;
    function Get_Item(Index: Integer): IXMLPurchaseOrderReference;
  end;

{ TXMLMillProductionInformation }

  TXMLMillProductionInformation = class(TXMLNode, IXMLMillProductionInformation)
  protected
    { IXMLMillProductionInformation }
    function Get_MillCharacteristics: IXMLMillCharacteristics;
    function Get_MillOrderNumber: WideString;
    function Get_Quantity: IXMLQuantity;
    procedure Set_MillOrderNumber(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMillCharacteristics }

  TXMLMillCharacteristics = class(TXMLNode, IXMLMillCharacteristics)
  protected
    { IXMLMillCharacteristics }
    function Get_MillParty: IXMLParty;
    function Get_MachineID: WideString;
    procedure Set_MachineID(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLQuantityOrderedInformation }

  TXMLQuantityOrderedInformation = class(TXMLNode, IXMLQuantityOrderedInformation)
  private
    FInformationalQuantity: IXMLInformationalQuantityList;
    FAdditionalText: IXMLS255List;
    FLength: IXMLMeasurementList;
  protected
    { IXMLQuantityOrderedInformation }
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_AdditionalText: IXMLS255List;
    function Get_Length: IXMLMeasurementList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSafetyAndEnvironmentalInformationClass }

  TXMLSafetyAndEnvironmentalInformationClass = class(TXMLNode, IXMLSafetyAndEnvironmentalInformationClass)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLSafetyAndEnvironmentalInformationClass }
    function Get_SafetyAndEnvironmentalType: WideString;
    function Get_Agency: WideString;
    function Get_LicenceNumber: WideString;
    function Get_ChainOfCustody: IXMLChainOfCustody;
    function Get_SafetyAndEnvironmentalCertification: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_SafetyAndEnvironmentalType(Value: WideString);
    procedure Set_Agency(Value: WideString);
    procedure Set_LicenceNumber(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSafetyAndEnvironmentalInformationClassList }

  TXMLSafetyAndEnvironmentalInformationClassList = class(TXMLNodeCollection, IXMLSafetyAndEnvironmentalInformationClassList)
  protected
    { IXMLSafetyAndEnvironmentalInformationClassList }
    function Add: IXMLSafetyAndEnvironmentalInformationClass;
    function Insert(const Index: Integer): IXMLSafetyAndEnvironmentalInformationClass;
    function Get_Item(Index: Integer): IXMLSafetyAndEnvironmentalInformationClass;
  end;

{ TXMLChainOfCustody }

  TXMLChainOfCustody = class(TXMLNode, IXMLChainOfCustody)
  protected
    { IXMLChainOfCustody }
    function Get_CertificationBody: WideString;
    procedure Set_CertificationBody(Value: WideString);
  end;

{ TXMLProductClass }

  TXMLProductClass = class(TXMLNode, IXMLProductClass)
  private
    FProductIdentifier: IXMLProductIdentifierList;
    FProductDescription: IXMLProductDescriptionList;
    FClassification: IXMLClassificationList;
  protected
    { IXMLProductClass }
    function Get_ProductIdentifier: IXMLProductIdentifierList;
    function Get_ProductDescription: IXMLProductDescriptionList;
    function Get_Classification: IXMLClassificationList;
    function Get_BookManufacturing: IXMLBookManufacturing;
    function Get_LabelStock: IXMLLabelStock;
    function Get_Paper: IXMLPaper;
    function Get_Pulp: IXMLPulpClass;
    function Get_RecoveredPaper: IXMLRecoveredPaper;
    function Get_VirginFibre: IXMLVirginFibre;
    function Get_WoodProducts: IXMLWoodProducts;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLProductIdentifier }

  TXMLProductIdentifier = class(TXMLNode, IXMLProductIdentifier)
  protected
    { IXMLProductIdentifier }
    function Get_Agency: WideString;
    function Get_ProductIdentifierType: WideString;
    procedure Set_Agency(Value: WideString);
    procedure Set_ProductIdentifierType(Value: WideString);
  end;

{ TXMLProductIdentifierList }

  TXMLProductIdentifierList = class(TXMLNodeCollection, IXMLProductIdentifierList)
  protected
    { IXMLProductIdentifierList }
    function Add: IXMLProductIdentifier;
    function Insert(const Index: Integer): IXMLProductIdentifier;
    function Get_Item(Index: Integer): IXMLProductIdentifier;
  end;

{ TXMLProductDescription }

  TXMLProductDescription = class(TXMLNode, IXMLProductDescription)
  protected
    { IXMLProductDescription }
    function Get_Language: WideString;
    procedure Set_Language(Value: WideString);
  end;

{ TXMLProductDescriptionList }

  TXMLProductDescriptionList = class(TXMLNodeCollection, IXMLProductDescriptionList)
  protected
    { IXMLProductDescriptionList }
    function Add: IXMLProductDescription;
    function Insert(const Index: Integer): IXMLProductDescription;
    function Get_Item(Index: Integer): IXMLProductDescription;
  end;

{ TXMLClassification }

  TXMLClassification = class(TXMLNode, IXMLClassification)
  private
    FClassificationDescription: IXMLS72List;
  protected
    { IXMLClassification }
    function Get_ClassificationCode: IXMLClassificationCode;
    function Get_ClassificationDescription: IXMLS72List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLClassificationList }

  TXMLClassificationList = class(TXMLNodeCollection, IXMLClassificationList)
  protected
    { IXMLClassificationList }
    function Add: IXMLClassification;
    function Insert(const Index: Integer): IXMLClassification;
    function Get_Item(Index: Integer): IXMLClassification;
  end;

{ TXMLClassificationCode }

  TXMLClassificationCode = class(TXMLNode, IXMLClassificationCode)
  protected
    { IXMLClassificationCode }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
  end;

{ TXMLBookManufacturing }

  TXMLBookManufacturing = class(TXMLNode, IXMLBookManufacturing)
  private
    FProofInformationalQuantity: IXMLProofInformationalQuantityList;
    FPrepInformation: IXMLPrepInformationList;
    FSuppliedComponentInformation: IXMLSuppliedComponentInformationList;
  protected
    { IXMLBookManufacturing }
    function Get_ProofInformationalQuantity: IXMLProofInformationalQuantityList;
    function Get_PrepInformation: IXMLPrepInformationList;
    function Get_SuppliedComponentInformation: IXMLSuppliedComponentInformationList;
    function Get_PackagingCharacteristics: IXMLPackagingCharacteristics;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLProofInformationalQuantity }

  TXMLProofInformationalQuantity = class(TXMLNode, IXMLProofInformationalQuantity)
  private
    FInformationalQuantity: IXMLInformationalQuantityList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLProofInformationalQuantity }
    function Get_ProofType: WideString;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_OtherParty: IXMLTypedParty;
    function Get_ProofApprovalDate: IXMLProofApprovalDate;
    function Get_ProofDueDate: IXMLProofDueDate;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ProofType(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLProofInformationalQuantityList }

  TXMLProofInformationalQuantityList = class(TXMLNodeCollection, IXMLProofInformationalQuantityList)
  protected
    { IXMLProofInformationalQuantityList }
    function Add: IXMLProofInformationalQuantity;
    function Insert(const Index: Integer): IXMLProofInformationalQuantity;
    function Get_Item(Index: Integer): IXMLProofInformationalQuantity;
  end;

{ TXMLProofApprovalDate }

  TXMLProofApprovalDate = class(TXMLNode, IXMLProofApprovalDate)
  protected
    { IXMLProofApprovalDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLProofDueDate }

  TXMLProofDueDate = class(TXMLNode, IXMLProofDueDate)
  protected
    { IXMLProofDueDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPrepInformation }

  TXMLPrepInformation = class(TXMLNode, IXMLPrepInformation)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLPrepInformation }
    function Get_PrepType: WideString;
    function Get_SupplierParty: IXMLParty;
    function Get_PrepShipDate: IXMLDateTimeBasis;
    function Get_PrepDueDate: IXMLDateTimeBasis;
    function Get_PrepNeededDate: IXMLDateTimeBasis;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_PrepType(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPrepInformationList }

  TXMLPrepInformationList = class(TXMLNodeCollection, IXMLPrepInformationList)
  protected
    { IXMLPrepInformationList }
    function Add: IXMLPrepInformation;
    function Insert(const Index: Integer): IXMLPrepInformation;
    function Get_Item(Index: Integer): IXMLPrepInformation;
  end;

{ TXMLSuppliedComponentInformation }

  TXMLSuppliedComponentInformation = class(TXMLNode, IXMLSuppliedComponentInformation)
  private
    FProductIdentifier: IXMLProductIdentifierList;
    FProductDescription: IXMLProductDescriptionList;
    FClassification: IXMLClassificationList;
    FSuppliedComponentReference: IXMLS255List;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLSuppliedComponentInformation }
    function Get_SuppliedComponentType: WideString;
    function Get_SupplierParty: IXMLParty;
    function Get_ProductIdentifier: IXMLProductIdentifierList;
    function Get_ProductDescription: IXMLProductDescriptionList;
    function Get_Classification: IXMLClassificationList;
    function Get_SuppliedComponentReference: IXMLS255List;
    function Get_Quantity: IXMLQuantity;
    function Get_ComponentShipDate: IXMLComponentShipDate;
    function Get_ComponentDueDate: IXMLComponentDueDate;
    function Get_ComponentNeededDate: IXMLComponentNeededDate;
    function Get_OrderStatusInformation: IXMLOrderStatusInformation;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_SuppliedComponentType(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSuppliedComponentInformationList }

  TXMLSuppliedComponentInformationList = class(TXMLNodeCollection, IXMLSuppliedComponentInformationList)
  protected
    { IXMLSuppliedComponentInformationList }
    function Add: IXMLSuppliedComponentInformation;
    function Insert(const Index: Integer): IXMLSuppliedComponentInformation;
    function Get_Item(Index: Integer): IXMLSuppliedComponentInformation;
  end;

{ TXMLComponentShipDate }

  TXMLComponentShipDate = class(TXMLNode, IXMLComponentShipDate)
  protected
    { IXMLComponentShipDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLComponentDueDate }

  TXMLComponentDueDate = class(TXMLNode, IXMLComponentDueDate)
  protected
    { IXMLComponentDueDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLComponentNeededDate }

  TXMLComponentNeededDate = class(TXMLNode, IXMLComponentNeededDate)
  protected
    { IXMLComponentNeededDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLOrderStatusInformation }

  TXMLOrderStatusInformation = class(TXMLNode, IXMLOrderStatusInformation)
  protected
    { IXMLOrderStatusInformation }
    function Get_OrderPrimaryStatus: IXMLOrderPrimaryStatus;
    function Get_OrderSecondaryStatus: WideString;
    procedure Set_OrderSecondaryStatus(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLOrderPrimaryStatus }

  TXMLOrderPrimaryStatus = class(TXMLNode, IXMLOrderPrimaryStatus)
  protected
    { IXMLOrderPrimaryStatus }
    function Get_OrderStatusCode: WideString;
    procedure Set_OrderStatusCode(Value: WideString);
  end;

{ TXMLPackagingCharacteristics }

  TXMLPackagingCharacteristics = class(TXMLNode, IXMLPackagingCharacteristics)
  protected
    { IXMLPackagingCharacteristics }
    function Get_BoxCharacteristics: IXMLBoxCharacteristics;
    function Get_PalletPackagingCharacteristics: IXMLPalletPackagingCharacteristics;
    function Get_BookUnitPacking: IXMLBookUnitPacking;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBoxCharacteristics }

  TXMLBoxCharacteristics = class(TXMLNode, IXMLBoxCharacteristics)
  private
    FLabelCharacteristics: IXMLLabelCharacteristicsList;
    FStencilCharacteristics: IXMLStencilCharacteristicsList;
  protected
    { IXMLBoxCharacteristics }
    function Get_BoxType: WideString;
    function Get_Height: IXMLMeasurement;
    function Get_Length: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_Weight: IXMLMeasurement;
    function Get_Burst: IXMLBurst;
    function Get_BurstIndex: IXMLBurstIndex;
    function Get_UnitsPerCarton: IXMLMeasurement;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_WrapCharacteristics: IXMLWrapCharacteristics;
    function Get_BandCharacteristics: IXMLBandCharacteristics;
    procedure Set_BoxType(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDetailMeasurement }

  TXMLDetailMeasurement = class(TXMLNode, IXMLDetailMeasurement)
  protected
    { IXMLDetailMeasurement }
    function Get_DetailValue: IXMLDetailValue;
    function Get_DetailRangeMin: IXMLDetailRangeMin;
    function Get_DetailRangeMax: IXMLDetailRangeMax;
    function Get_StandardDeviation: IXMLStandardDeviation;
    function Get_SampleSize: LongWord;
    function Get_TwoSigmaLower: IXMLTwoSigmaLower;
    function Get_TwoSigmaUpper: IXMLTwoSigmaUpper;
    procedure Set_SampleSize(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBurstIndex }

  TXMLBurstIndex = class(TXMLDetailMeasurement, IXMLBurstIndex)
  protected
    { IXMLBurstIndex }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLBurstIndexList }

  TXMLBurstIndexList = class(TXMLNodeCollection, IXMLBurstIndexList)
  protected
    { IXMLBurstIndexList }
    function Add: IXMLBurstIndex;
    function Insert(const Index: Integer): IXMLBurstIndex;
    function Get_Item(Index: Integer): IXMLBurstIndex;
  end;

{ TXMLLabelCharacteristics }

  TXMLLabelCharacteristics = class(TXMLNode, IXMLLabelCharacteristics)
  private
    FCustomerMarks: IXMLS255List;
  protected
    { IXMLLabelCharacteristics }
    function Get_CustomerMarks: IXMLS255List;
    function Get_LabelStyle: WideString;
    function Get_LabelBrandName: WideString;
    function Get_LabelPosition: WideString;
    function Get_NumberOfLabels: LongWord;
    function Get_Length: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_ColourCode: IXMLColourCode;
    function Get_ColourDescription: WideString;
    procedure Set_LabelStyle(Value: WideString);
    procedure Set_LabelBrandName(Value: WideString);
    procedure Set_LabelPosition(Value: WideString);
    procedure Set_NumberOfLabels(Value: LongWord);
    procedure Set_ColourDescription(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLabelCharacteristicsList }

  TXMLLabelCharacteristicsList = class(TXMLNodeCollection, IXMLLabelCharacteristicsList)
  protected
    { IXMLLabelCharacteristicsList }
    function Add: IXMLLabelCharacteristics;
    function Insert(const Index: Integer): IXMLLabelCharacteristics;
    function Get_Item(Index: Integer): IXMLLabelCharacteristics;
  end;

{ TXMLColourCode }

  TXMLColourCode = class(TXMLNode, IXMLColourCode)
  protected
    { IXMLColourCode }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
  end;

{ TXMLStencilCharacteristics }

  TXMLStencilCharacteristics = class(TXMLNodeCollection, IXMLStencilCharacteristics)
  protected
    { IXMLStencilCharacteristics }
    function Get_StencilType: WideString;
    function Get_StencilInkType: WideString;
    function Get_StencilLocation: WideString;
    function Get_StencilContent: WideString;
    function Get_StencilFormat: WideString;
    function Get_StencilText(Index: Integer): WideString;
    procedure Set_StencilType(Value: WideString);
    procedure Set_StencilInkType(Value: WideString);
    procedure Set_StencilLocation(Value: WideString);
    procedure Set_StencilContent(Value: WideString);
    procedure Set_StencilFormat(Value: WideString);
    function Add(const StencilText: WideString): IXMLNode;
    function Insert(const Index: Integer; const StencilText: WideString): IXMLNode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLStencilCharacteristicsList }

  TXMLStencilCharacteristicsList = class(TXMLNodeCollection, IXMLStencilCharacteristicsList)
  protected
    { IXMLStencilCharacteristicsList }
    function Add: IXMLStencilCharacteristics;
    function Insert(const Index: Integer): IXMLStencilCharacteristics;
    function Get_Item(Index: Integer): IXMLStencilCharacteristics;
  end;

{ TXMLWrapCharacteristics }

  TXMLWrapCharacteristics = class(TXMLNode, IXMLWrapCharacteristics)
  private
    FWrap: IXMLWrapList;
  protected
    { IXMLWrapCharacteristics }
    function Get_PackagesPerWrap: LongWord;
    function Get_Wrap: IXMLWrapList;
    procedure Set_PackagesPerWrap(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLWrap }

  TXMLWrap = class(TXMLNode, IXMLWrap)
  protected
    { IXMLWrap }
    function Get_WrapType: WideString;
    function Get_WrapProperties: WideString;
    function Get_WrapLocation: WideString;
    function Get_NumberOfWraps: WideString;
    function Get_Brand: WideString;
    procedure Set_WrapType(Value: WideString);
    procedure Set_WrapProperties(Value: WideString);
    procedure Set_WrapLocation(Value: WideString);
    procedure Set_NumberOfWraps(Value: WideString);
    procedure Set_Brand(Value: WideString);
  end;

{ TXMLWrapList }

  TXMLWrapList = class(TXMLNodeCollection, IXMLWrapList)
  protected
    { IXMLWrapList }
    function Add: IXMLWrap;
    function Insert(const Index: Integer): IXMLWrap;
    function Get_Item(Index: Integer): IXMLWrap;
  end;

{ TXMLBandCharacteristics }

  TXMLBandCharacteristics = class(TXMLNode, IXMLBandCharacteristics)
  private
    FBandColour: IXMLS20List;
  protected
    { IXMLBandCharacteristics }
    function Get_BandType: WideString;
    function Get_BandsRequired: WideString;
    function Get_BandDirection: WideString;
    function Get_NumberOfBands: LongWord;
    function Get_BandColour: IXMLS20List;
    procedure Set_BandType(Value: WideString);
    procedure Set_BandsRequired(Value: WideString);
    procedure Set_BandDirection(Value: WideString);
    procedure Set_NumberOfBands(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBandCharacteristicsList }

  TXMLBandCharacteristicsList = class(TXMLNodeCollection, IXMLBandCharacteristicsList)
  protected
    { IXMLBandCharacteristicsList }
    function Add: IXMLBandCharacteristics;
    function Insert(const Index: Integer): IXMLBandCharacteristics;
    function Get_Item(Index: Integer): IXMLBandCharacteristics;
  end;

{ TXMLPalletPackagingCharacteristics }

  TXMLPalletPackagingCharacteristics = class(TXMLNode, IXMLPalletPackagingCharacteristics)
  private
    FLabelCharacteristics: IXMLLabelCharacteristicsList;
    FStencilCharacteristics: IXMLStencilCharacteristicsList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLPalletPackagingCharacteristics }
    function Get_PackagingCode: IXMLPackagingCode;
    function Get_PackagingDescription: IXMLPackagingDescription;
    function Get_WrapCharacteristics: IXMLWrapCharacteristics;
    function Get_PalletCharacteristics: IXMLPalletCharacteristics;
    function Get_BandCharacteristics: IXMLBandCharacteristics;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_MaximumHeight: IXMLMeasurement;
    function Get_MaximumGrossWeight: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPackagingCode }

  TXMLPackagingCode = class(TXMLNode, IXMLPackagingCode)
  protected
    { IXMLPackagingCode }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
  end;

{ TXMLPackagingCodeList }

  TXMLPackagingCodeList = class(TXMLNodeCollection, IXMLPackagingCodeList)
  protected
    { IXMLPackagingCodeList }
    function Add: IXMLPackagingCode;
    function Insert(const Index: Integer): IXMLPackagingCode;
    function Get_Item(Index: Integer): IXMLPackagingCode;
  end;

{ TXMLPackagingDescription }

  TXMLPackagingDescription = class(TXMLNode, IXMLPackagingDescription)
  protected
    { IXMLPackagingDescription }
    function Get_Language: WideString;
    procedure Set_Language(Value: WideString);
  end;

{ TXMLPackagingDescriptionList }

  TXMLPackagingDescriptionList = class(TXMLNodeCollection, IXMLPackagingDescriptionList)
  protected
    { IXMLPackagingDescriptionList }
    function Add: IXMLPackagingDescription;
    function Insert(const Index: Integer): IXMLPackagingDescription;
    function Get_Item(Index: Integer): IXMLPackagingDescription;
  end;

{ TXMLPalletCharacteristics }

  TXMLPalletCharacteristics = class(TXMLNode, IXMLPalletCharacteristics)
  protected
    { IXMLPalletCharacteristics }
    function Get_MixedProductPalletIndicator: WideString;
    function Get_PalletType: WideString;
    function Get_PalletLedgeType: WideString;
    function Get_PalletCoverType: WideString;
    function Get_PalletAdditionsType: WideString;
    function Get_PalletTopType: WideString;
    function Get_PalletLength: IXMLMeasurement;
    function Get_PalletWidth: IXMLMeasurement;
    function Get_ItemsPerPallet: LongWord;
    function Get_StacksPerPallet: LongWord;
    function Get_TiersPerPallet: LongWord;
    function Get_MaximumHeight: IXMLMeasurement;
    function Get_StackingMethod: WideString;
    function Get_LabelCharacteristics: IXMLLabelCharacteristics;
    procedure Set_MixedProductPalletIndicator(Value: WideString);
    procedure Set_PalletType(Value: WideString);
    procedure Set_PalletLedgeType(Value: WideString);
    procedure Set_PalletCoverType(Value: WideString);
    procedure Set_PalletAdditionsType(Value: WideString);
    procedure Set_PalletTopType(Value: WideString);
    procedure Set_ItemsPerPallet(Value: LongWord);
    procedure Set_StacksPerPallet(Value: LongWord);
    procedure Set_TiersPerPallet(Value: LongWord);
    procedure Set_StackingMethod(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPalletCharacteristicsList }

  TXMLPalletCharacteristicsList = class(TXMLNodeCollection, IXMLPalletCharacteristicsList)
  protected
    { IXMLPalletCharacteristicsList }
    function Add: IXMLPalletCharacteristics;
    function Insert(const Index: Integer): IXMLPalletCharacteristics;
    function Get_Item(Index: Integer): IXMLPalletCharacteristics;
  end;

{ TXMLBookUnitPacking }

  TXMLBookUnitPacking = class(TXMLNode, IXMLBookUnitPacking)
  private
    FLabelCharacteristics: IXMLLabelCharacteristicsList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLBookUnitPacking }
    function Get_BookUnitType: WideString;
    function Get_UnitCharacteristics: IXMLUnitCharacteristics;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristics;
    function Get_WrapCharacteristics: IXMLWrapCharacteristics;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_BookUnitType(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLUnitCharacteristics }

  TXMLUnitCharacteristics = class(TXMLNode, IXMLUnitCharacteristics)
  protected
    { IXMLUnitCharacteristics }
    function Get_Height: IXMLMeasurement;
    function Get_Thickness: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_Weight: IXMLMeasurement;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLabelStock }

  TXMLLabelStock = class(TXMLNode, IXMLLabelStock)
  protected
    { IXMLLabelStock }
    function Get_LabelStockCharacteristics: IXMLLabelStockCharacteristics;
    function Get_SingleWidthReel: IXMLSingleWidthReel;
    function Get_TrimmedReel: IXMLTrimmedReel;
    function Get_Sheet: IXMLSheet;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLabelStockCharacteristics }

  TXMLLabelStockCharacteristics = class(TXMLNode, IXMLLabelStockCharacteristics)
  private
    FLabelStockLayer: IXMLLabelStockLayerList;
    FExtraFeature: IXMLExtraFeatureList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLLabelStockCharacteristics }
    function Get_LabelStockLayer: IXMLLabelStockLayerList;
    function Get_ExtraFeature: IXMLExtraFeatureList;
    function Get_AdditionalText: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLabelStockLayer }

  TXMLLabelStockLayer = class(TXMLNode, IXMLLabelStockLayer)
  protected
    { IXMLLabelStockLayer }
    function Get_LabelStockLayerType: WideString;
    function Get_LabelStockLayerNumber: LongWord;
    function Get_LayerMaterial: IXMLLayerMaterial;
    procedure Set_LabelStockLayerType(Value: WideString);
    procedure Set_LabelStockLayerNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLabelStockLayerList }

  TXMLLabelStockLayerList = class(TXMLNodeCollection, IXMLLabelStockLayerList)
  protected
    { IXMLLabelStockLayerList }
    function Add: IXMLLabelStockLayer;
    function Insert(const Index: Integer): IXMLLabelStockLayer;
    function Get_Item(Index: Integer): IXMLLabelStockLayer;
  end;

{ TXMLLayerMaterial }

  TXMLLayerMaterial = class(TXMLNode, IXMLLayerMaterial)
  protected
    { IXMLLayerMaterial }
    function Get_ProductIdentifier: IXMLProductIdentifier;
    function Get_LayerMaterialName: WideString;
    procedure Set_LayerMaterialName(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLExtraFeature }

  TXMLExtraFeature = class(TXMLNode, IXMLExtraFeature)
  protected
    { IXMLExtraFeature }
    function Get_ProductIdentifier: IXMLProductIdentifier;
    function Get_ExtraFeatureDescription: WideString;
    procedure Set_ExtraFeatureDescription(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLExtraFeatureList }

  TXMLExtraFeatureList = class(TXMLNodeCollection, IXMLExtraFeatureList)
  protected
    { IXMLExtraFeatureList }
    function Add: IXMLExtraFeature;
    function Insert(const Index: Integer): IXMLExtraFeature;
    function Get_Item(Index: Integer): IXMLExtraFeature;
  end;

{ TXMLSingleWidthReel }

  TXMLSingleWidthReel = class(TXMLNode, IXMLSingleWidthReel)
  protected
    { IXMLSingleWidthReel }
    function Get_SingleWidthReelConversionCharacteristics: IXMLSingleWidthReelConversionCharacteristics;
    function Get_ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSingleWidthReelConversionCharacteristics }

  TXMLSingleWidthReelConversionCharacteristics = class(TXMLNode, IXMLSingleWidthReelConversionCharacteristics)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLSingleWidthReelConversionCharacteristics }
    function Get_WindingDirection: WideString;
    function Get_TrimmedOrderType: WideString;
    function Get_ReelWidth: IXMLMeasurement;
    function Get_ReelDiameter: IXMLMeasurement;
    function Get_ReelLength: IXMLMeasurement;
    function Get_CoreCharacteristics: IXMLCoreCharacteristics;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_WindingDirection(Value: WideString);
    procedure Set_TrimmedOrderType(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCoreCharacteristics }

  TXMLCoreCharacteristics = class(TXMLNode, IXMLCoreCharacteristics)
  protected
    { IXMLCoreCharacteristics }
    function Get_CoreEndType: WideString;
    function Get_CoreMaterialType: WideString;
    function Get_CoreDiameterInside: IXMLMeasurement;
    function Get_CoreDiameterOutside: IXMLMeasurement;
    function Get_CoreStrengthCode: IXMLCoreStrengthCode;
    procedure Set_CoreEndType(Value: WideString);
    procedure Set_CoreMaterialType(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCoreCharacteristicsList }

  TXMLCoreCharacteristicsList = class(TXMLNodeCollection, IXMLCoreCharacteristicsList)
  protected
    { IXMLCoreCharacteristicsList }
    function Add: IXMLCoreCharacteristics;
    function Insert(const Index: Integer): IXMLCoreCharacteristics;
    function Get_Item(Index: Integer): IXMLCoreCharacteristics;
  end;

{ TXMLCoreStrengthCode }

  TXMLCoreStrengthCode = class(TXMLNode, IXMLCoreStrengthCode)
  protected
    { IXMLCoreStrengthCode }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
  end;

{ TXMLReelPackagingCharacteristicsClass }

  TXMLReelPackagingCharacteristicsClass = class(TXMLNode, IXMLReelPackagingCharacteristicsClass)
  private
    FWrap: IXMLWrapList;
    FEndCaps: IXMLS20List;
    FCorePlugs: IXMLNni1List;
    FBandCharacteristics: IXMLBandCharacteristicsList;
    FPalletCharacteristics: IXMLPalletCharacteristicsList;
    FLabelCharacteristics: IXMLLabelCharacteristicsList;
    FStencilCharacteristics: IXMLStencilCharacteristicsList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLReelPackagingCharacteristicsClass }
    function Get_ActionType: WideString;
    function Get_PackagingCode: IXMLPackagingCode;
    function Get_PackagingDescription: IXMLPackagingDescription;
    function Get_ReelsPerPack: LongWord;
    function Get_Wrap: IXMLWrapList;
    function Get_EndCaps: IXMLS20List;
    function Get_CorePlugs: IXMLNni1List;
    function Get_BandCharacteristics: IXMLBandCharacteristicsList;
    function Get_PalletCharacteristics: IXMLPalletCharacteristicsList;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_MaximumHeight: IXMLMeasurement;
    function Get_MaximumGrossWeight: IXMLMeasurement;
    function Get_MaximumClampingForce: IXMLMaximumClampingForce;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ActionType(Value: WideString);
    procedure Set_ReelsPerPack(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMaximumClampingForce }

  TXMLMaximumClampingForce = class(TXMLNode, IXMLMaximumClampingForce)
  protected
    { IXMLMaximumClampingForce }
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTrimmedReel }

  TXMLTrimmedReel = class(TXMLNode, IXMLTrimmedReel)
  protected
    { IXMLTrimmedReel }
    function Get_TrimmedReelConversionCharacteristics: IXMLTrimmedReelConversionCharacteristics;
    function Get_ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTrimmedReelConversionCharacteristics }

  TXMLTrimmedReelConversionCharacteristics = class(TXMLNode, IXMLTrimmedReelConversionCharacteristics)
  private
    FSlitReel: IXMLSlitReelList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLTrimmedReelConversionCharacteristics }
    function Get_WindingDirection: WideString;
    function Get_TrimmedOrderType: WideString;
    function Get_MasterReelWidth: IXMLMeasurement;
    function Get_ReelDiameter: IXMLMeasurement;
    function Get_ReelLength: IXMLMeasurement;
    function Get_MaximumOffcut: IXMLMeasurement;
    function Get_CoreCharacteristics: IXMLCoreCharacteristics;
    function Get_SlitReel: IXMLSlitReelList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_WindingDirection(Value: WideString);
    procedure Set_TrimmedOrderType(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSlitReel }

  TXMLSlitReel = class(TXMLNode, IXMLSlitReel)
  private
    FSlitReelReference: IXMLSlitReelReferenceList;
  protected
    { IXMLSlitReel }
    function Get_DeliveryIndicator: WideString;
    function Get_SlitReelLineNumber: LongWord;
    function Get_SlitReelWidth: IXMLMeasurement;
    function Get_SlitReelOrderQuantity: IXMLSlitReelOrderQuantity;
    function Get_SlitReelsInSet: LongWord;
    function Get_SlitReelReference: IXMLSlitReelReferenceList;
    procedure Set_DeliveryIndicator(Value: WideString);
    procedure Set_SlitReelLineNumber(Value: LongWord);
    procedure Set_SlitReelsInSet(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSlitReelList }

  TXMLSlitReelList = class(TXMLNodeCollection, IXMLSlitReelList)
  protected
    { IXMLSlitReelList }
    function Add: IXMLSlitReel;
    function Insert(const Index: Integer): IXMLSlitReel;
    function Get_Item(Index: Integer): IXMLSlitReel;
  end;

{ TXMLSlitReelOrderQuantity }

  TXMLSlitReelOrderQuantity = class(TXMLMeasurement, IXMLSlitReelOrderQuantity)
  protected
    { IXMLSlitReelOrderQuantity }
    function Get_QuantityType: WideString;
    function Get_QuantityTypeContext: WideString;
    function Get_AdjustmentType: WideString;
    procedure Set_QuantityType(Value: WideString);
    procedure Set_QuantityTypeContext(Value: WideString);
    procedure Set_AdjustmentType(Value: WideString);
  end;

{ TXMLSlitReelReference }

  TXMLSlitReelReference = class(TXMLNode, IXMLSlitReelReference)
  protected
    { IXMLSlitReelReference }
    function Get_SlitReelReferenceType: WideString;
    function Get_AssignedBy: WideString;
    procedure Set_SlitReelReferenceType(Value: WideString);
    procedure Set_AssignedBy(Value: WideString);
  end;

{ TXMLSlitReelReferenceList }

  TXMLSlitReelReferenceList = class(TXMLNodeCollection, IXMLSlitReelReferenceList)
  protected
    { IXMLSlitReelReferenceList }
    function Add: IXMLSlitReelReference;
    function Insert(const Index: Integer): IXMLSlitReelReference;
    function Get_Item(Index: Integer): IXMLSlitReelReference;
  end;

{ TXMLSheet }

  TXMLSheet = class(TXMLNode, IXMLSheet)
  protected
    { IXMLSheet }
    function Get_SheetConversionCharacteristics: IXMLSheetConversionCharacteristicsClass;
    function Get_SheetPackagingCharacteristics: IXMLSheetPackagingCharacteristicsClass;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSheetConversionCharacteristicsClass }

  TXMLSheetConversionCharacteristicsClass = class(TXMLNode, IXMLSheetConversionCharacteristicsClass)
  private
    FSheetSize: IXMLSheetSizeList;
    FPunchedHoleDetails: IXMLPunchedHoleDetailsList;
    FCuttingDetails: IXMLCuttingDetailsList;
    FEmbossing: IXMLEmbossingList;
    FWatermark: IXMLWatermarkList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLSheetConversionCharacteristicsClass }
    function Get_ConversionCode: IXMLConversionCode;
    function Get_GrainDirection: WideString;
    function Get_WindingDirection: WideString;
    function Get_SheetSize: IXMLSheetSizeList;
    function Get_TargetProductWeight: IXMLMeasurement;
    function Get_PunchedHoleDetails: IXMLPunchedHoleDetailsList;
    function Get_CuttingDetails: IXMLCuttingDetailsList;
    function Get_Embossing: IXMLEmbossingList;
    function Get_Watermark: IXMLWatermarkList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_GrainDirection(Value: WideString);
    procedure Set_WindingDirection(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLConversionCode }

  TXMLConversionCode = class(TXMLNode, IXMLConversionCode)
  protected
    { IXMLConversionCode }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
  end;

{ TXMLSheetSize }

  TXMLSheetSize = class(TXMLNode, IXMLSheetSize)
  protected
    { IXMLSheetSize }
    function Get_Length: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_PaperSizeType: WideString;
    procedure Set_PaperSizeType(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSheetSizeList }

  TXMLSheetSizeList = class(TXMLNodeCollection, IXMLSheetSizeList)
  protected
    { IXMLSheetSizeList }
    function Add: IXMLSheetSize;
    function Insert(const Index: Integer): IXMLSheetSize;
    function Get_Item(Index: Integer): IXMLSheetSize;
  end;

{ TXMLPunchedHoleDetails }

  TXMLPunchedHoleDetails = class(TXMLNode, IXMLPunchedHoleDetails)
  private
    FDistanceFromEdge: IXMLDistanceFromEdgeList;
    FHolePunchTemplateReference: IXMLHolePunchTemplateReferenceTypeList;
  protected
    { IXMLPunchedHoleDetails }
    function Get_NumberOfHoles: IXMLNumberOfHoles;
    function Get_HoleReinforcement: WideString;
    function Get_HolePunchType: WideString;
    function Get_StandardSpacing: WideString;
    function Get_SizeOfHolePunch: IXMLSizeOfHolePunch;
    function Get_HoleSpacing: IXMLHoleSpacing;
    function Get_DistanceFromEdge: IXMLDistanceFromEdgeList;
    function Get_HolePunchTemplateReference: IXMLHolePunchTemplateReferenceTypeList;
    procedure Set_HoleReinforcement(Value: WideString);
    procedure Set_HolePunchType(Value: WideString);
    procedure Set_StandardSpacing(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPunchedHoleDetailsList }

  TXMLPunchedHoleDetailsList = class(TXMLNodeCollection, IXMLPunchedHoleDetailsList)
  protected
    { IXMLPunchedHoleDetailsList }
    function Add: IXMLPunchedHoleDetails;
    function Insert(const Index: Integer): IXMLPunchedHoleDetails;
    function Get_Item(Index: Integer): IXMLPunchedHoleDetails;
  end;

{ TXMLNumberOfHoles }

  TXMLNumberOfHoles = class(TXMLNode, IXMLNumberOfHoles)
  protected
    { IXMLNumberOfHoles }
  end;

{ TXMLSizeOfHolePunch }

  TXMLSizeOfHolePunch = class(TXMLMeasurement, IXMLSizeOfHolePunch)
  protected
    { IXMLSizeOfHolePunch }
    function Get_ShapeOfHole: WideString;
    procedure Set_ShapeOfHole(Value: WideString);
  end;

{ TXMLHoleSpacing }

  TXMLHoleSpacing = class(TXMLNode, IXMLHoleSpacing)
  protected
    { IXMLHoleSpacing }
    function Get_EvenSpacing: IXMLEvenSpacing;
    function Get_UnevenSpacing: WideString;
    procedure Set_UnevenSpacing(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLEvenSpacing }

  TXMLEvenSpacing = class(TXMLNode, IXMLEvenSpacing)
  protected
    { IXMLEvenSpacing }
    function Get_Value: IXMLValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDistanceFromEdge }

  TXMLDistanceFromEdge = class(TXMLMeasurement, IXMLDistanceFromEdge)
  protected
    { IXMLDistanceFromEdge }
    function Get_EdgeType: WideString;
    procedure Set_EdgeType(Value: WideString);
  end;

{ TXMLDistanceFromEdgeList }

  TXMLDistanceFromEdgeList = class(TXMLNodeCollection, IXMLDistanceFromEdgeList)
  protected
    { IXMLDistanceFromEdgeList }
    function Add: IXMLDistanceFromEdge;
    function Insert(const Index: Integer): IXMLDistanceFromEdge;
    function Get_Item(Index: Integer): IXMLDistanceFromEdge;
  end;

{ TXMLCuttingDetails }

  TXMLCuttingDetails = class(TXMLNode, IXMLCuttingDetails)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLCuttingDetails }
    function Get_CuttingTemplateCode: IXMLCuttingTemplateCode;
    function Get_AdditionalText: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCuttingDetailsList }

  TXMLCuttingDetailsList = class(TXMLNodeCollection, IXMLCuttingDetailsList)
  protected
    { IXMLCuttingDetailsList }
    function Add: IXMLCuttingDetails;
    function Insert(const Index: Integer): IXMLCuttingDetails;
    function Get_Item(Index: Integer): IXMLCuttingDetails;
  end;

{ TXMLCuttingTemplateCode }

  TXMLCuttingTemplateCode = class(TXMLNode, IXMLCuttingTemplateCode)
  protected
    { IXMLCuttingTemplateCode }
    function Get_AssignedBy: WideString;
    function Get_Agency: WideString;
    procedure Set_AssignedBy(Value: WideString);
    procedure Set_Agency(Value: WideString);
  end;

{ TXMLEmbossing }

  TXMLEmbossing = class(TXMLNode, IXMLEmbossing)
  private
    FEmbossingDescription: IXMLS60List;
  protected
    { IXMLEmbossing }
    function Get_EmbossingCode: IXMLEmbossingCode;
    function Get_EmbossingDescription: IXMLS60List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLEmbossingList }

  TXMLEmbossingList = class(TXMLNodeCollection, IXMLEmbossingList)
  protected
    { IXMLEmbossingList }
    function Add: IXMLEmbossing;
    function Insert(const Index: Integer): IXMLEmbossing;
    function Get_Item(Index: Integer): IXMLEmbossing;
  end;

{ TXMLEmbossingCode }

  TXMLEmbossingCode = class(TXMLNode, IXMLEmbossingCode)
  protected
    { IXMLEmbossingCode }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
  end;

{ TXMLWatermark }

  TXMLWatermark = class(TXMLNode, IXMLWatermark)
  private
    FWatermarkDescription: IXMLS60List;
  protected
    { IXMLWatermark }
    function Get_WatermarkCode: IXMLWatermarkCode;
    function Get_WatermarkDescription: IXMLS60List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLWatermarkList }

  TXMLWatermarkList = class(TXMLNodeCollection, IXMLWatermarkList)
  protected
    { IXMLWatermarkList }
    function Add: IXMLWatermark;
    function Insert(const Index: Integer): IXMLWatermark;
    function Get_Item(Index: Integer): IXMLWatermark;
  end;

{ TXMLWatermarkCode }

  TXMLWatermarkCode = class(TXMLNode, IXMLWatermarkCode)
  protected
    { IXMLWatermarkCode }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
  end;

{ TXMLSheetPackagingCharacteristicsClass }

  TXMLSheetPackagingCharacteristicsClass = class(TXMLNode, IXMLSheetPackagingCharacteristicsClass)
  private
    FPackagingCode: IXMLPackagingCodeList;
    FPackagingDescription: IXMLPackagingDescriptionList;
    FReamType: IXMLReamTypeList;
    FReamWeight: IXMLMeasurementList;
    FSheetCount: IXMLSheetCountList;
    FWrap: IXMLWrapList;
    FBandCharacteristics: IXMLBandCharacteristicsList;
    FPalletCharacteristics: IXMLPalletCharacteristicsList;
    FLabelCharacteristics: IXMLLabelCharacteristicsList;
    FStencilCharacteristics: IXMLStencilCharacteristicsList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLSheetPackagingCharacteristicsClass }
    function Get_ActionType: WideString;
    function Get_PackagingCode: IXMLPackagingCodeList;
    function Get_PackagingDescription: IXMLPackagingDescriptionList;
    function Get_ReamType: IXMLReamTypeList;
    function Get_ReamWeight: IXMLMeasurementList;
    function Get_SheetCount: IXMLSheetCountList;
    function Get_Wrap: IXMLWrapList;
    function Get_BandCharacteristics: IXMLBandCharacteristicsList;
    function Get_PalletCharacteristics: IXMLPalletCharacteristicsList;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_MaximumHeight: IXMLMeasurement;
    function Get_MaximumGrossWeight: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ActionType(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSheetCount }

  TXMLSheetCount = class(TXMLNode, IXMLSheetCount)
  protected
    { IXMLSheetCount }
    function Get_SheetCountMethodType: WideString;
    function Get_PerCarton: LongWord;
    function Get_PerReam: LongWord;
    function Get_PerPallet: LongWord;
    function Get_PerTab: LongWord;
    procedure Set_SheetCountMethodType(Value: WideString);
    procedure Set_PerCarton(Value: LongWord);
    procedure Set_PerReam(Value: LongWord);
    procedure Set_PerPallet(Value: LongWord);
    procedure Set_PerTab(Value: LongWord);
  end;

{ TXMLSheetCountList }

  TXMLSheetCountList = class(TXMLNodeCollection, IXMLSheetCountList)
  protected
    { IXMLSheetCountList }
    function Add: IXMLSheetCount;
    function Insert(const Index: Integer): IXMLSheetCount;
    function Get_Item(Index: Integer): IXMLSheetCount;
  end;

{ TXMLPaper }

  TXMLPaper = class(TXMLNode, IXMLPaper)
  protected
    { IXMLPaper }
    function Get_PaperCharacteristics: IXMLPaperCharacteristics;
    function Get_Reel: IXMLReel;
    function Get_Sheet: IXMLSheet;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPaperCharacteristics }

  TXMLPaperCharacteristics = class(TXMLNode, IXMLPaperCharacteristics)
  private
    FAbrasion: IXMLAbrasionList;
    FAbsorptionInk: IXMLAbsorptionInkList;
    FAbsorptionLight: IXMLAbsorptionLightList;
    FAbsorptionWater: IXMLAbsorptionWaterList;
    FAppearance: IXMLAppearanceList;
    FAsh: IXMLAshList;
    FBasisWeight: IXMLBasisWeightList;
    FBendingResistance: IXMLBendingResistanceList;
    FBendingStiffness: IXMLBendingStiffnessList;
    FBrightness: IXMLBrightnessList;
    FBulk: IXMLBulkList;
    FBurst: IXMLBurstList;
    FBurstIndex: IXMLBurstIndexList;
    FCaliper: IXMLCaliperList;
    FCoatWeight: IXMLCoatWeightList;
    FColourDetail: IXMLColourDetailList;
    FDensity: IXMLDensityList;
    FDirt: IXMLDirtList;
    FDominantWavelength: IXMLDominantWavelengthList;
    FExcitationPurity: IXMLExcitationPurityList;
    FFibreLength: IXMLFibreLengthList;
    FFibreClassification: IXMLFibreClassificationList;
    FFolding: IXMLFoldingList;
    FFormation: IXMLFormationList;
    FFreeness: IXMLFreenessList;
    FFriction: IXMLFrictionList;
    FGloss: IXMLGlossList;
    FLightScattering: IXMLLightScatteringList;
    FLuminance: IXMLLuminanceList;
    FMoisture: IXMLMoistureList;
    FMullen: IXMLMullenList;
    FOpacity: IXMLOpacityList;
    FPermeability: IXMLPermeabilityList;
    FPH: IXMLPHList;
    FPlyBond: IXMLPlyBondList;
    FPorosity: IXMLPorosityList;
    FPostConsumerWaste: IXMLPostConsumerWasteList;
    FPPI: IXMLMeasurementList;
    FPreConsumerWaste: IXMLPreConsumerWasteList;
    FRecycled: IXMLRecycledList;
    FResistance: IXMLResistanceList;
    FRingCrush: IXMLRingCrushList;
    FRoughness: IXMLRoughnessList;
    FRunnabilityIndex: IXMLRunnabilityIndexList;
    FShowThrough: IXMLShowThroughList;
    FSizing: IXMLSizingList;
    FSmoothness: IXMLSmoothnessList;
    FStiffness: IXMLStiffnessList;
    FStretch: IXMLStretchList;
    FSurfaceStrength: IXMLSurfaceStrengthList;
    FTEA: IXMLTEAList;
    FTear: IXMLTearList;
    FTearIndex: IXMLTearIndexList;
    FTensile: IXMLTensileList;
    FTensileIndex: IXMLTensileIndexList;
    FWhiteness: IXMLWhitenessList;
    FNumberOfPlies: IXMLNni1List;
    FPlyAttributes: IXMLPlyAttributesList;
    FPlySet: IXMLPlySetList;
  protected
    { IXMLPaperCharacteristics }
    function Get_CoatingTop: WideString;
    function Get_CoatingBottom: WideString;
    function Get_FinishType: WideString;
    function Get_PrintType: WideString;
    function Get_Abrasion: IXMLAbrasionList;
    function Get_AbsorptionInk: IXMLAbsorptionInkList;
    function Get_AbsorptionLight: IXMLAbsorptionLightList;
    function Get_AbsorptionWater: IXMLAbsorptionWaterList;
    function Get_Appearance: IXMLAppearanceList;
    function Get_Ash: IXMLAshList;
    function Get_BasisWeight: IXMLBasisWeightList;
    function Get_BendingResistance: IXMLBendingResistanceList;
    function Get_BendingStiffness: IXMLBendingStiffnessList;
    function Get_Brightness: IXMLBrightnessList;
    function Get_Bulk: IXMLBulkList;
    function Get_Burst: IXMLBurstList;
    function Get_BurstIndex: IXMLBurstIndexList;
    function Get_Caliper: IXMLCaliperList;
    function Get_CoatWeight: IXMLCoatWeightList;
    function Get_ColourDetail: IXMLColourDetailList;
    function Get_Density: IXMLDensityList;
    function Get_Dirt: IXMLDirtList;
    function Get_DominantWavelength: IXMLDominantWavelengthList;
    function Get_ExcitationPurity: IXMLExcitationPurityList;
    function Get_FibreLength: IXMLFibreLengthList;
    function Get_FibreClassification: IXMLFibreClassificationList;
    function Get_Folding: IXMLFoldingList;
    function Get_Formation: IXMLFormationList;
    function Get_Freeness: IXMLFreenessList;
    function Get_Friction: IXMLFrictionList;
    function Get_Gloss: IXMLGlossList;
    function Get_LightScattering: IXMLLightScatteringList;
    function Get_Luminance: IXMLLuminanceList;
    function Get_Moisture: IXMLMoistureList;
    function Get_Mullen: IXMLMullenList;
    function Get_Opacity: IXMLOpacityList;
    function Get_Permeability: IXMLPermeabilityList;
    function Get_PH: IXMLPHList;
    function Get_PlyBond: IXMLPlyBondList;
    function Get_Porosity: IXMLPorosityList;
    function Get_PostConsumerWaste: IXMLPostConsumerWasteList;
    function Get_PPI: IXMLMeasurementList;
    function Get_PreConsumerWaste: IXMLPreConsumerWasteList;
    function Get_Recycled: IXMLRecycledList;
    function Get_Resistance: IXMLResistanceList;
    function Get_RingCrush: IXMLRingCrushList;
    function Get_Roughness: IXMLRoughnessList;
    function Get_RunnabilityIndex: IXMLRunnabilityIndexList;
    function Get_ShowThrough: IXMLShowThroughList;
    function Get_Sizing: IXMLSizingList;
    function Get_Smoothness: IXMLSmoothnessList;
    function Get_Stiffness: IXMLStiffnessList;
    function Get_Stretch: IXMLStretchList;
    function Get_SurfaceStrength: IXMLSurfaceStrengthList;
    function Get_TEA: IXMLTEAList;
    function Get_Tear: IXMLTearList;
    function Get_TearIndex: IXMLTearIndexList;
    function Get_Tensile: IXMLTensileList;
    function Get_TensileIndex: IXMLTensileIndexList;
    function Get_Whiteness: IXMLWhitenessList;
    function Get_AdditionalTest: IXMLAdditionalTest;
    function Get_NumberOfPlies: IXMLNni1List;
    function Get_PlyAttributes: IXMLPlyAttributesList;
    function Get_PlySet: IXMLPlySetList;
    procedure Set_CoatingTop(Value: WideString);
    procedure Set_CoatingBottom(Value: WideString);
    procedure Set_FinishType(Value: WideString);
    procedure Set_PrintType(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLAbrasion }

  TXMLAbrasion = class(TXMLDetailMeasurement, IXMLAbrasion)
  protected
    { IXMLAbrasion }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLAbrasionList }

  TXMLAbrasionList = class(TXMLNodeCollection, IXMLAbrasionList)
  protected
    { IXMLAbrasionList }
    function Add: IXMLAbrasion;
    function Insert(const Index: Integer): IXMLAbrasion;
    function Get_Item(Index: Integer): IXMLAbrasion;
  end;

{ TXMLAbsorptionInk }

  TXMLAbsorptionInk = class(TXMLDetailMeasurement, IXMLAbsorptionInk)
  protected
    { IXMLAbsorptionInk }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLAbsorptionInkList }

  TXMLAbsorptionInkList = class(TXMLNodeCollection, IXMLAbsorptionInkList)
  protected
    { IXMLAbsorptionInkList }
    function Add: IXMLAbsorptionInk;
    function Insert(const Index: Integer): IXMLAbsorptionInk;
    function Get_Item(Index: Integer): IXMLAbsorptionInk;
  end;

{ TXMLAbsorptionLight }

  TXMLAbsorptionLight = class(TXMLDetailMeasurement, IXMLAbsorptionLight)
  protected
    { IXMLAbsorptionLight }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLAbsorptionLightList }

  TXMLAbsorptionLightList = class(TXMLNodeCollection, IXMLAbsorptionLightList)
  protected
    { IXMLAbsorptionLightList }
    function Add: IXMLAbsorptionLight;
    function Insert(const Index: Integer): IXMLAbsorptionLight;
    function Get_Item(Index: Integer): IXMLAbsorptionLight;
  end;

{ TXMLAbsorptionWater }

  TXMLAbsorptionWater = class(TXMLDetailMeasurement, IXMLAbsorptionWater)
  protected
    { IXMLAbsorptionWater }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLAbsorptionWaterList }

  TXMLAbsorptionWaterList = class(TXMLNodeCollection, IXMLAbsorptionWaterList)
  protected
    { IXMLAbsorptionWaterList }
    function Add: IXMLAbsorptionWater;
    function Insert(const Index: Integer): IXMLAbsorptionWater;
    function Get_Item(Index: Integer): IXMLAbsorptionWater;
  end;

{ TXMLAppearance }

  TXMLAppearance = class(TXMLDetailMeasurement, IXMLAppearance)
  protected
    { IXMLAppearance }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLAppearanceList }

  TXMLAppearanceList = class(TXMLNodeCollection, IXMLAppearanceList)
  protected
    { IXMLAppearanceList }
    function Add: IXMLAppearance;
    function Insert(const Index: Integer): IXMLAppearance;
    function Get_Item(Index: Integer): IXMLAppearance;
  end;

{ TXMLAsh }

  TXMLAsh = class(TXMLDetailMeasurement, IXMLAsh)
  protected
    { IXMLAsh }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLAshList }

  TXMLAshList = class(TXMLNodeCollection, IXMLAshList)
  protected
    { IXMLAshList }
    function Add: IXMLAsh;
    function Insert(const Index: Integer): IXMLAsh;
    function Get_Item(Index: Integer): IXMLAsh;
  end;

{ TXMLBasisWeight }

  TXMLBasisWeight = class(TXMLNode, IXMLBasisWeight)
  protected
    { IXMLBasisWeight }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLBasisWeightList }

  TXMLBasisWeightList = class(TXMLNodeCollection, IXMLBasisWeightList)
  protected
    { IXMLBasisWeightList }
    function Add: IXMLBasisWeight;
    function Insert(const Index: Integer): IXMLBasisWeight;
    function Get_Item(Index: Integer): IXMLBasisWeight;
  end;

{ TXMLBendingResistance }

  TXMLBendingResistance = class(TXMLDetailMeasurement, IXMLBendingResistance)
  protected
    { IXMLBendingResistance }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLBendingResistanceList }

  TXMLBendingResistanceList = class(TXMLNodeCollection, IXMLBendingResistanceList)
  protected
    { IXMLBendingResistanceList }
    function Add: IXMLBendingResistance;
    function Insert(const Index: Integer): IXMLBendingResistance;
    function Get_Item(Index: Integer): IXMLBendingResistance;
  end;

{ TXMLBendingStiffness }

  TXMLBendingStiffness = class(TXMLDetailMeasurement, IXMLBendingStiffness)
  protected
    { IXMLBendingStiffness }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLBendingStiffnessList }

  TXMLBendingStiffnessList = class(TXMLNodeCollection, IXMLBendingStiffnessList)
  protected
    { IXMLBendingStiffnessList }
    function Add: IXMLBendingStiffness;
    function Insert(const Index: Integer): IXMLBendingStiffness;
    function Get_Item(Index: Integer): IXMLBendingStiffness;
  end;

{ TXMLBrightness }

  TXMLBrightness = class(TXMLDetailMeasurement, IXMLBrightness)
  protected
    { IXMLBrightness }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLBrightnessList }

  TXMLBrightnessList = class(TXMLNodeCollection, IXMLBrightnessList)
  protected
    { IXMLBrightnessList }
    function Add: IXMLBrightness;
    function Insert(const Index: Integer): IXMLBrightness;
    function Get_Item(Index: Integer): IXMLBrightness;
  end;

{ TXMLBulk }

  TXMLBulk = class(TXMLDetailMeasurement, IXMLBulk)
  protected
    { IXMLBulk }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLBulkList }

  TXMLBulkList = class(TXMLNodeCollection, IXMLBulkList)
  protected
    { IXMLBulkList }
    function Add: IXMLBulk;
    function Insert(const Index: Integer): IXMLBulk;
    function Get_Item(Index: Integer): IXMLBulk;
  end;

{ TXMLCaliper }

  TXMLCaliper = class(TXMLDetailMeasurement, IXMLCaliper)
  protected
    { IXMLCaliper }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLCaliperList }

  TXMLCaliperList = class(TXMLNodeCollection, IXMLCaliperList)
  protected
    { IXMLCaliperList }
    function Add: IXMLCaliper;
    function Insert(const Index: Integer): IXMLCaliper;
    function Get_Item(Index: Integer): IXMLCaliper;
  end;

{ TXMLCoatWeight }

  TXMLCoatWeight = class(TXMLDetailMeasurement, IXMLCoatWeight)
  protected
    { IXMLCoatWeight }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLCoatWeightList }

  TXMLCoatWeightList = class(TXMLNodeCollection, IXMLCoatWeightList)
  protected
    { IXMLCoatWeightList }
    function Add: IXMLCoatWeight;
    function Insert(const Index: Integer): IXMLCoatWeight;
    function Get_Item(Index: Integer): IXMLCoatWeight;
  end;

{ TXMLColourDetail }

  TXMLColourDetail = class(TXMLNode, IXMLColourDetail)
  private
    FColourDescription: IXMLS72List;
  protected
    { IXMLColourDetail }
    function Get_CMYK: IXMLCMYK;
    function Get_ColourShade: IXMLColourShade;
    function Get_HSB: IXMLHSB;
    function Get_Lab: IXMLLab;
    function Get_RGB: IXMLRGB;
    function Get_ColourDescription: IXMLS72List;
    function Get_ColourCode: IXMLColourCode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLColourDetailList }

  TXMLColourDetailList = class(TXMLNodeCollection, IXMLColourDetailList)
  protected
    { IXMLColourDetailList }
    function Add: IXMLColourDetail;
    function Insert(const Index: Integer): IXMLColourDetail;
    function Get_Item(Index: Integer): IXMLColourDetail;
  end;

{ TXMLCMYK }

  TXMLCMYK = class(TXMLNode, IXMLCMYK)
  protected
    { IXMLCMYK }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    function Get_Cyan: IXMLDetailMeasurement;
    function Get_Magenta: IXMLDetailMeasurement;
    function Get_Yellow: IXMLDetailMeasurement;
    function Get_Black: IXMLDetailMeasurement;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBurst }

  TXMLBurst = class(TXMLDetailMeasurement, IXMLBurst)
  protected
    { IXMLBurst }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLBurstList }

  TXMLBurstList = class(TXMLNodeCollection, IXMLBurstList)
  protected
    { IXMLBurstList }
    function Add: IXMLBurst;
    function Insert(const Index: Integer): IXMLBurst;
    function Get_Item(Index: Integer): IXMLBurst;
  end;

{ TXMLDetailValue }

  TXMLDetailValue = class(TXMLNode, IXMLDetailValue)
  protected
    { IXMLDetailValue }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
  end;

{ TXMLDetailRangeMin }

  TXMLDetailRangeMin = class(TXMLNode, IXMLDetailRangeMin)
  protected
    { IXMLDetailRangeMin }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
  end;

{ TXMLDetailRangeMax }

  TXMLDetailRangeMax = class(TXMLNode, IXMLDetailRangeMax)
  protected
    { IXMLDetailRangeMax }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
  end;

{ TXMLStandardDeviation }

  TXMLStandardDeviation = class(TXMLNode, IXMLStandardDeviation)
  protected
    { IXMLStandardDeviation }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
  end;

{ TXMLTwoSigmaLower }

  TXMLTwoSigmaLower = class(TXMLNode, IXMLTwoSigmaLower)
  protected
    { IXMLTwoSigmaLower }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
  end;

{ TXMLTwoSigmaUpper }

  TXMLTwoSigmaUpper = class(TXMLNode, IXMLTwoSigmaUpper)
  protected
    { IXMLTwoSigmaUpper }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
  end;

{ TXMLColourShade }

  TXMLColourShade = class(TXMLNode, IXMLColourShade)
  protected
    { IXMLColourShade }
    function Get_Agency: WideString;
    procedure Set_Agency(Value: WideString);
  end;

{ TXMLHSB }

  TXMLHSB = class(TXMLNode, IXMLHSB)
  protected
    { IXMLHSB }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    function Get_Hue: IXMLDetailMeasurement;
    function Get_Saturation: IXMLDetailMeasurement;
    function Get_Brilliance: IXMLDetailMeasurement;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLab }

  TXMLLab = class(TXMLNode, IXMLLab)
  protected
    { IXMLLab }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    function Get_L: IXMLDetailMeasurement;
    function Get_A: IXMLDetailMeasurement;
    function Get_B: IXMLDetailMeasurement;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLRGB }

  TXMLRGB = class(TXMLNode, IXMLRGB)
  protected
    { IXMLRGB }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    function Get_Red: IXMLDetailMeasurement;
    function Get_Green: IXMLDetailMeasurement;
    function Get_Blue: IXMLDetailMeasurement;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDensity }

  TXMLDensity = class(TXMLDetailMeasurement, IXMLDensity)
  protected
    { IXMLDensity }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLDensityList }

  TXMLDensityList = class(TXMLNodeCollection, IXMLDensityList)
  protected
    { IXMLDensityList }
    function Add: IXMLDensity;
    function Insert(const Index: Integer): IXMLDensity;
    function Get_Item(Index: Integer): IXMLDensity;
  end;

{ TXMLDirt }

  TXMLDirt = class(TXMLDetailMeasurement, IXMLDirt)
  protected
    { IXMLDirt }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLDirtList }

  TXMLDirtList = class(TXMLNodeCollection, IXMLDirtList)
  protected
    { IXMLDirtList }
    function Add: IXMLDirt;
    function Insert(const Index: Integer): IXMLDirt;
    function Get_Item(Index: Integer): IXMLDirt;
  end;

{ TXMLDominantWavelength }

  TXMLDominantWavelength = class(TXMLDetailMeasurement, IXMLDominantWavelength)
  protected
    { IXMLDominantWavelength }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLDominantWavelengthList }

  TXMLDominantWavelengthList = class(TXMLNodeCollection, IXMLDominantWavelengthList)
  protected
    { IXMLDominantWavelengthList }
    function Add: IXMLDominantWavelength;
    function Insert(const Index: Integer): IXMLDominantWavelength;
    function Get_Item(Index: Integer): IXMLDominantWavelength;
  end;

{ TXMLExcitationPurity }

  TXMLExcitationPurity = class(TXMLDetailMeasurement, IXMLExcitationPurity)
  protected
    { IXMLExcitationPurity }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLExcitationPurityList }

  TXMLExcitationPurityList = class(TXMLNodeCollection, IXMLExcitationPurityList)
  protected
    { IXMLExcitationPurityList }
    function Add: IXMLExcitationPurity;
    function Insert(const Index: Integer): IXMLExcitationPurity;
    function Get_Item(Index: Integer): IXMLExcitationPurity;
  end;

{ TXMLFibreLength }

  TXMLFibreLength = class(TXMLDetailMeasurement, IXMLFibreLength)
  protected
    { IXMLFibreLength }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLFibreLengthList }

  TXMLFibreLengthList = class(TXMLNodeCollection, IXMLFibreLengthList)
  protected
    { IXMLFibreLengthList }
    function Add: IXMLFibreLength;
    function Insert(const Index: Integer): IXMLFibreLength;
    function Get_Item(Index: Integer): IXMLFibreLength;
  end;

{ TXMLFibreClassification }

  TXMLFibreClassification = class(TXMLDetailMeasurement, IXMLFibreClassification)
  protected
    { IXMLFibreClassification }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLFibreClassificationList }

  TXMLFibreClassificationList = class(TXMLNodeCollection, IXMLFibreClassificationList)
  protected
    { IXMLFibreClassificationList }
    function Add: IXMLFibreClassification;
    function Insert(const Index: Integer): IXMLFibreClassification;
    function Get_Item(Index: Integer): IXMLFibreClassification;
  end;

{ TXMLFolding }

  TXMLFolding = class(TXMLDetailMeasurement, IXMLFolding)
  protected
    { IXMLFolding }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLFoldingList }

  TXMLFoldingList = class(TXMLNodeCollection, IXMLFoldingList)
  protected
    { IXMLFoldingList }
    function Add: IXMLFolding;
    function Insert(const Index: Integer): IXMLFolding;
    function Get_Item(Index: Integer): IXMLFolding;
  end;

{ TXMLFormation }

  TXMLFormation = class(TXMLDetailMeasurement, IXMLFormation)
  protected
    { IXMLFormation }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLFormationList }

  TXMLFormationList = class(TXMLNodeCollection, IXMLFormationList)
  protected
    { IXMLFormationList }
    function Add: IXMLFormation;
    function Insert(const Index: Integer): IXMLFormation;
    function Get_Item(Index: Integer): IXMLFormation;
  end;

{ TXMLFreeness }

  TXMLFreeness = class(TXMLDetailMeasurement, IXMLFreeness)
  protected
    { IXMLFreeness }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLFreenessList }

  TXMLFreenessList = class(TXMLNodeCollection, IXMLFreenessList)
  protected
    { IXMLFreenessList }
    function Add: IXMLFreeness;
    function Insert(const Index: Integer): IXMLFreeness;
    function Get_Item(Index: Integer): IXMLFreeness;
  end;

{ TXMLFriction }

  TXMLFriction = class(TXMLDetailMeasurement, IXMLFriction)
  protected
    { IXMLFriction }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLFrictionList }

  TXMLFrictionList = class(TXMLNodeCollection, IXMLFrictionList)
  protected
    { IXMLFrictionList }
    function Add: IXMLFriction;
    function Insert(const Index: Integer): IXMLFriction;
    function Get_Item(Index: Integer): IXMLFriction;
  end;

{ TXMLGloss }

  TXMLGloss = class(TXMLDetailMeasurement, IXMLGloss)
  protected
    { IXMLGloss }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLGlossList }

  TXMLGlossList = class(TXMLNodeCollection, IXMLGlossList)
  protected
    { IXMLGlossList }
    function Add: IXMLGloss;
    function Insert(const Index: Integer): IXMLGloss;
    function Get_Item(Index: Integer): IXMLGloss;
  end;

{ TXMLLightScattering }

  TXMLLightScattering = class(TXMLDetailMeasurement, IXMLLightScattering)
  protected
    { IXMLLightScattering }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLLightScatteringList }

  TXMLLightScatteringList = class(TXMLNodeCollection, IXMLLightScatteringList)
  protected
    { IXMLLightScatteringList }
    function Add: IXMLLightScattering;
    function Insert(const Index: Integer): IXMLLightScattering;
    function Get_Item(Index: Integer): IXMLLightScattering;
  end;

{ TXMLLuminance }

  TXMLLuminance = class(TXMLDetailMeasurement, IXMLLuminance)
  protected
    { IXMLLuminance }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLLuminanceList }

  TXMLLuminanceList = class(TXMLNodeCollection, IXMLLuminanceList)
  protected
    { IXMLLuminanceList }
    function Add: IXMLLuminance;
    function Insert(const Index: Integer): IXMLLuminance;
    function Get_Item(Index: Integer): IXMLLuminance;
  end;

{ TXMLMoisture }

  TXMLMoisture = class(TXMLDetailMeasurement, IXMLMoisture)
  protected
    { IXMLMoisture }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLMoistureList }

  TXMLMoistureList = class(TXMLNodeCollection, IXMLMoistureList)
  protected
    { IXMLMoistureList }
    function Add: IXMLMoisture;
    function Insert(const Index: Integer): IXMLMoisture;
    function Get_Item(Index: Integer): IXMLMoisture;
  end;

{ TXMLMullen }

  TXMLMullen = class(TXMLDetailMeasurement, IXMLMullen)
  protected
    { IXMLMullen }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLMullenList }

  TXMLMullenList = class(TXMLNodeCollection, IXMLMullenList)
  protected
    { IXMLMullenList }
    function Add: IXMLMullen;
    function Insert(const Index: Integer): IXMLMullen;
    function Get_Item(Index: Integer): IXMLMullen;
  end;

{ TXMLOpacity }

  TXMLOpacity = class(TXMLDetailMeasurement, IXMLOpacity)
  protected
    { IXMLOpacity }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLOpacityList }

  TXMLOpacityList = class(TXMLNodeCollection, IXMLOpacityList)
  protected
    { IXMLOpacityList }
    function Add: IXMLOpacity;
    function Insert(const Index: Integer): IXMLOpacity;
    function Get_Item(Index: Integer): IXMLOpacity;
  end;

{ TXMLPermeability }

  TXMLPermeability = class(TXMLDetailMeasurement, IXMLPermeability)
  protected
    { IXMLPermeability }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLPermeabilityList }

  TXMLPermeabilityList = class(TXMLNodeCollection, IXMLPermeabilityList)
  protected
    { IXMLPermeabilityList }
    function Add: IXMLPermeability;
    function Insert(const Index: Integer): IXMLPermeability;
    function Get_Item(Index: Integer): IXMLPermeability;
  end;

{ TXMLPH }

  TXMLPH = class(TXMLDetailMeasurement, IXMLPH)
  protected
    { IXMLPH }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLPHList }

  TXMLPHList = class(TXMLNodeCollection, IXMLPHList)
  protected
    { IXMLPHList }
    function Add: IXMLPH;
    function Insert(const Index: Integer): IXMLPH;
    function Get_Item(Index: Integer): IXMLPH;
  end;

{ TXMLPlyBond }

  TXMLPlyBond = class(TXMLDetailMeasurement, IXMLPlyBond)
  protected
    { IXMLPlyBond }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLPlyBondList }

  TXMLPlyBondList = class(TXMLNodeCollection, IXMLPlyBondList)
  protected
    { IXMLPlyBondList }
    function Add: IXMLPlyBond;
    function Insert(const Index: Integer): IXMLPlyBond;
    function Get_Item(Index: Integer): IXMLPlyBond;
  end;

{ TXMLPorosity }

  TXMLPorosity = class(TXMLDetailMeasurement, IXMLPorosity)
  protected
    { IXMLPorosity }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLPorosityList }

  TXMLPorosityList = class(TXMLNodeCollection, IXMLPorosityList)
  protected
    { IXMLPorosityList }
    function Add: IXMLPorosity;
    function Insert(const Index: Integer): IXMLPorosity;
    function Get_Item(Index: Integer): IXMLPorosity;
  end;

{ TXMLPostConsumerWaste }

  TXMLPostConsumerWaste = class(TXMLDetailMeasurement, IXMLPostConsumerWaste)
  protected
    { IXMLPostConsumerWaste }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLPostConsumerWasteList }

  TXMLPostConsumerWasteList = class(TXMLNodeCollection, IXMLPostConsumerWasteList)
  protected
    { IXMLPostConsumerWasteList }
    function Add: IXMLPostConsumerWaste;
    function Insert(const Index: Integer): IXMLPostConsumerWaste;
    function Get_Item(Index: Integer): IXMLPostConsumerWaste;
  end;

{ TXMLPreConsumerWaste }

  TXMLPreConsumerWaste = class(TXMLDetailMeasurement, IXMLPreConsumerWaste)
  protected
    { IXMLPreConsumerWaste }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLPreConsumerWasteList }

  TXMLPreConsumerWasteList = class(TXMLNodeCollection, IXMLPreConsumerWasteList)
  protected
    { IXMLPreConsumerWasteList }
    function Add: IXMLPreConsumerWaste;
    function Insert(const Index: Integer): IXMLPreConsumerWaste;
    function Get_Item(Index: Integer): IXMLPreConsumerWaste;
  end;

{ TXMLRecycled }

  TXMLRecycled = class(TXMLDetailMeasurement, IXMLRecycled)
  protected
    { IXMLRecycled }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLRecycledList }

  TXMLRecycledList = class(TXMLNodeCollection, IXMLRecycledList)
  protected
    { IXMLRecycledList }
    function Add: IXMLRecycled;
    function Insert(const Index: Integer): IXMLRecycled;
    function Get_Item(Index: Integer): IXMLRecycled;
  end;

{ TXMLResistance }

  TXMLResistance = class(TXMLDetailMeasurement, IXMLResistance)
  protected
    { IXMLResistance }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLResistanceList }

  TXMLResistanceList = class(TXMLNodeCollection, IXMLResistanceList)
  protected
    { IXMLResistanceList }
    function Add: IXMLResistance;
    function Insert(const Index: Integer): IXMLResistance;
    function Get_Item(Index: Integer): IXMLResistance;
  end;

{ TXMLRingCrush }

  TXMLRingCrush = class(TXMLDetailMeasurement, IXMLRingCrush)
  protected
    { IXMLRingCrush }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLRingCrushList }

  TXMLRingCrushList = class(TXMLNodeCollection, IXMLRingCrushList)
  protected
    { IXMLRingCrushList }
    function Add: IXMLRingCrush;
    function Insert(const Index: Integer): IXMLRingCrush;
    function Get_Item(Index: Integer): IXMLRingCrush;
  end;

{ TXMLRoughness }

  TXMLRoughness = class(TXMLDetailMeasurement, IXMLRoughness)
  protected
    { IXMLRoughness }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLRoughnessList }

  TXMLRoughnessList = class(TXMLNodeCollection, IXMLRoughnessList)
  protected
    { IXMLRoughnessList }
    function Add: IXMLRoughness;
    function Insert(const Index: Integer): IXMLRoughness;
    function Get_Item(Index: Integer): IXMLRoughness;
  end;

{ TXMLRunnabilityIndex }

  TXMLRunnabilityIndex = class(TXMLDetailMeasurement, IXMLRunnabilityIndex)
  protected
    { IXMLRunnabilityIndex }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLRunnabilityIndexList }

  TXMLRunnabilityIndexList = class(TXMLNodeCollection, IXMLRunnabilityIndexList)
  protected
    { IXMLRunnabilityIndexList }
    function Add: IXMLRunnabilityIndex;
    function Insert(const Index: Integer): IXMLRunnabilityIndex;
    function Get_Item(Index: Integer): IXMLRunnabilityIndex;
  end;

{ TXMLShowThrough }

  TXMLShowThrough = class(TXMLDetailMeasurement, IXMLShowThrough)
  protected
    { IXMLShowThrough }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLShowThroughList }

  TXMLShowThroughList = class(TXMLNodeCollection, IXMLShowThroughList)
  protected
    { IXMLShowThroughList }
    function Add: IXMLShowThrough;
    function Insert(const Index: Integer): IXMLShowThrough;
    function Get_Item(Index: Integer): IXMLShowThrough;
  end;

{ TXMLSizing }

  TXMLSizing = class(TXMLDetailMeasurement, IXMLSizing)
  protected
    { IXMLSizing }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLSizingList }

  TXMLSizingList = class(TXMLNodeCollection, IXMLSizingList)
  protected
    { IXMLSizingList }
    function Add: IXMLSizing;
    function Insert(const Index: Integer): IXMLSizing;
    function Get_Item(Index: Integer): IXMLSizing;
  end;

{ TXMLSmoothness }

  TXMLSmoothness = class(TXMLDetailMeasurement, IXMLSmoothness)
  protected
    { IXMLSmoothness }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLSmoothnessList }

  TXMLSmoothnessList = class(TXMLNodeCollection, IXMLSmoothnessList)
  protected
    { IXMLSmoothnessList }
    function Add: IXMLSmoothness;
    function Insert(const Index: Integer): IXMLSmoothness;
    function Get_Item(Index: Integer): IXMLSmoothness;
  end;

{ TXMLStiffness }

  TXMLStiffness = class(TXMLDetailMeasurement, IXMLStiffness)
  protected
    { IXMLStiffness }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLStiffnessList }

  TXMLStiffnessList = class(TXMLNodeCollection, IXMLStiffnessList)
  protected
    { IXMLStiffnessList }
    function Add: IXMLStiffness;
    function Insert(const Index: Integer): IXMLStiffness;
    function Get_Item(Index: Integer): IXMLStiffness;
  end;

{ TXMLStretch }

  TXMLStretch = class(TXMLDetailMeasurement, IXMLStretch)
  protected
    { IXMLStretch }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLStretchList }

  TXMLStretchList = class(TXMLNodeCollection, IXMLStretchList)
  protected
    { IXMLStretchList }
    function Add: IXMLStretch;
    function Insert(const Index: Integer): IXMLStretch;
    function Get_Item(Index: Integer): IXMLStretch;
  end;

{ TXMLSurfaceStrength }

  TXMLSurfaceStrength = class(TXMLDetailMeasurement, IXMLSurfaceStrength)
  protected
    { IXMLSurfaceStrength }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLSurfaceStrengthList }

  TXMLSurfaceStrengthList = class(TXMLNodeCollection, IXMLSurfaceStrengthList)
  protected
    { IXMLSurfaceStrengthList }
    function Add: IXMLSurfaceStrength;
    function Insert(const Index: Integer): IXMLSurfaceStrength;
    function Get_Item(Index: Integer): IXMLSurfaceStrength;
  end;

{ TXMLTEA }

  TXMLTEA = class(TXMLDetailMeasurement, IXMLTEA)
  protected
    { IXMLTEA }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLTEAList }

  TXMLTEAList = class(TXMLNodeCollection, IXMLTEAList)
  protected
    { IXMLTEAList }
    function Add: IXMLTEA;
    function Insert(const Index: Integer): IXMLTEA;
    function Get_Item(Index: Integer): IXMLTEA;
  end;

{ TXMLTear }

  TXMLTear = class(TXMLDetailMeasurement, IXMLTear)
  protected
    { IXMLTear }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLTearList }

  TXMLTearList = class(TXMLNodeCollection, IXMLTearList)
  protected
    { IXMLTearList }
    function Add: IXMLTear;
    function Insert(const Index: Integer): IXMLTear;
    function Get_Item(Index: Integer): IXMLTear;
  end;

{ TXMLTearIndex }

  TXMLTearIndex = class(TXMLDetailMeasurement, IXMLTearIndex)
  protected
    { IXMLTearIndex }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLTearIndexList }

  TXMLTearIndexList = class(TXMLNodeCollection, IXMLTearIndexList)
  protected
    { IXMLTearIndexList }
    function Add: IXMLTearIndex;
    function Insert(const Index: Integer): IXMLTearIndex;
    function Get_Item(Index: Integer): IXMLTearIndex;
  end;

{ TXMLTensile }

  TXMLTensile = class(TXMLDetailMeasurement, IXMLTensile)
  protected
    { IXMLTensile }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLTensileList }

  TXMLTensileList = class(TXMLNodeCollection, IXMLTensileList)
  protected
    { IXMLTensileList }
    function Add: IXMLTensile;
    function Insert(const Index: Integer): IXMLTensile;
    function Get_Item(Index: Integer): IXMLTensile;
  end;

{ TXMLTensileIndex }

  TXMLTensileIndex = class(TXMLDetailMeasurement, IXMLTensileIndex)
  protected
    { IXMLTensileIndex }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLTensileIndexList }

  TXMLTensileIndexList = class(TXMLNodeCollection, IXMLTensileIndexList)
  protected
    { IXMLTensileIndexList }
    function Add: IXMLTensileIndex;
    function Insert(const Index: Integer): IXMLTensileIndex;
    function Get_Item(Index: Integer): IXMLTensileIndex;
  end;

{ TXMLWhiteness }

  TXMLWhiteness = class(TXMLDetailMeasurement, IXMLWhiteness)
  protected
    { IXMLWhiteness }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLWhitenessList }

  TXMLWhitenessList = class(TXMLNodeCollection, IXMLWhitenessList)
  protected
    { IXMLWhitenessList }
    function Add: IXMLWhiteness;
    function Insert(const Index: Integer): IXMLWhiteness;
    function Get_Item(Index: Integer): IXMLWhiteness;
  end;

{ TXMLAdditionalTest }

  TXMLAdditionalTest = class(TXMLNode, IXMLAdditionalTest)
  protected
    { IXMLAdditionalTest }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    function Get_AdditionalTestName: WideString;
    function Get_DetailValue: IXMLDetailValue;
    function Get_DetailRangeMin: IXMLDetailRangeMin;
    function Get_DetailRangeMax: IXMLDetailRangeMax;
    function Get_StandardDeviation: IXMLStandardDeviation;
    function Get_SampleSize: LongWord;
    function Get_TwoSigmaLower: IXMLTwoSigmaLower;
    function Get_TwoSigmaUpper: IXMLTwoSigmaUpper;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
    procedure Set_AdditionalTestName(Value: WideString);
    procedure Set_SampleSize(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlyAttributes }

  TXMLPlyAttributes = class(TXMLNode, IXMLPlyAttributes)
  private
    FAbrasion: IXMLAbrasionList;
    FAbsorptionInk: IXMLAbsorptionInkList;
    FAbsorptionLight: IXMLAbsorptionLightList;
    FAbsorptionWater: IXMLAbsorptionWaterList;
    FAppearance: IXMLAppearanceList;
    FAsh: IXMLAshList;
    FBasisWeight: IXMLBasisWeightList;
    FBendingResistance: IXMLBendingResistanceList;
    FBendingStiffness: IXMLBendingStiffnessList;
    FBrightness: IXMLBrightnessList;
    FBulk: IXMLBulkList;
    FBurst: IXMLBurstList;
    FBurstIndex: IXMLBurstIndexList;
    FCaliper: IXMLCaliperList;
    FCoatWeight: IXMLCoatWeightList;
    FColourDetail: IXMLColourDetailList;
    FDensity: IXMLDensityList;
    FDirt: IXMLDirtList;
    FDominantWavelength: IXMLDominantWavelengthList;
    FFibreLength: IXMLFibreLengthList;
    FFibreClassification: IXMLFibreClassificationList;
    FFolding: IXMLFoldingList;
    FFormation: IXMLFormationList;
    FFreeness: IXMLFreenessList;
    FFriction: IXMLFrictionList;
    FGloss: IXMLGlossList;
    FLightScattering: IXMLLightScatteringList;
    FMoisture: IXMLMoistureList;
    FOpacity: IXMLOpacityList;
    FPermeability: IXMLPermeabilityList;
    FPH: IXMLPHList;
    FPlyBond: IXMLPlyBondList;
    FPorosity: IXMLPorosityList;
    FPostConsumerWaste: IXMLPostConsumerWasteList;
    FPPI: IXMLMeasurementList;
    FPreConsumerWaste: IXMLPreConsumerWasteList;
    FRecycled: IXMLRecycledList;
    FResistance: IXMLResistanceList;
    FRingCrush: IXMLRingCrushList;
    FRoughness: IXMLRoughnessList;
    FRunnabilityIndex: IXMLRunnabilityIndexList;
    FShowThrough: IXMLShowThroughList;
    FSizing: IXMLSizingList;
    FSmoothness: IXMLSmoothnessList;
    FStiffness: IXMLStiffnessList;
    FStretch: IXMLStretchList;
    FSurfaceStrength: IXMLSurfaceStrengthList;
    FTEA: IXMLTEAList;
    FTear: IXMLTearList;
    FTearIndex: IXMLTearIndexList;
    FTensile: IXMLTensileList;
    FTensileIndex: IXMLTensileIndexList;
    FWhiteness: IXMLWhitenessList;
  protected
    { IXMLPlyAttributes }
    function Get_CoatingLocation: WideString;
    function Get_PlyNumber: LongWord;
    function Get_Abrasion: IXMLAbrasionList;
    function Get_AbsorptionInk: IXMLAbsorptionInkList;
    function Get_AbsorptionLight: IXMLAbsorptionLightList;
    function Get_AbsorptionWater: IXMLAbsorptionWaterList;
    function Get_Appearance: IXMLAppearanceList;
    function Get_Ash: IXMLAshList;
    function Get_BasisWeight: IXMLBasisWeightList;
    function Get_BendingResistance: IXMLBendingResistanceList;
    function Get_BendingStiffness: IXMLBendingStiffnessList;
    function Get_Brightness: IXMLBrightnessList;
    function Get_Bulk: IXMLBulkList;
    function Get_Burst: IXMLBurstList;
    function Get_BurstIndex: IXMLBurstIndexList;
    function Get_Caliper: IXMLCaliperList;
    function Get_CoatWeight: IXMLCoatWeightList;
    function Get_ColourDetail: IXMLColourDetailList;
    function Get_Density: IXMLDensityList;
    function Get_Dirt: IXMLDirtList;
    function Get_DominantWavelength: IXMLDominantWavelengthList;
    function Get_FibreLength: IXMLFibreLengthList;
    function Get_FibreClassification: IXMLFibreClassificationList;
    function Get_Folding: IXMLFoldingList;
    function Get_Formation: IXMLFormationList;
    function Get_Freeness: IXMLFreenessList;
    function Get_Friction: IXMLFrictionList;
    function Get_Gloss: IXMLGlossList;
    function Get_LightScattering: IXMLLightScatteringList;
    function Get_Moisture: IXMLMoistureList;
    function Get_Opacity: IXMLOpacityList;
    function Get_Permeability: IXMLPermeabilityList;
    function Get_PH: IXMLPHList;
    function Get_PlyBond: IXMLPlyBondList;
    function Get_Porosity: IXMLPorosityList;
    function Get_PostConsumerWaste: IXMLPostConsumerWasteList;
    function Get_PPI: IXMLMeasurementList;
    function Get_PreConsumerWaste: IXMLPreConsumerWasteList;
    function Get_Recycled: IXMLRecycledList;
    function Get_Resistance: IXMLResistanceList;
    function Get_RingCrush: IXMLRingCrushList;
    function Get_Roughness: IXMLRoughnessList;
    function Get_RunnabilityIndex: IXMLRunnabilityIndexList;
    function Get_ShowThrough: IXMLShowThroughList;
    function Get_Sizing: IXMLSizingList;
    function Get_Smoothness: IXMLSmoothnessList;
    function Get_Stiffness: IXMLStiffnessList;
    function Get_Stretch: IXMLStretchList;
    function Get_SurfaceStrength: IXMLSurfaceStrengthList;
    function Get_TEA: IXMLTEAList;
    function Get_Tear: IXMLTearList;
    function Get_TearIndex: IXMLTearIndexList;
    function Get_Tensile: IXMLTensileList;
    function Get_TensileIndex: IXMLTensileIndexList;
    function Get_Whiteness: IXMLWhitenessList;
    function Get_AdditionalTest: IXMLAdditionalTest;
    procedure Set_CoatingLocation(Value: WideString);
    procedure Set_PlyNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlyAttributesList }

  TXMLPlyAttributesList = class(TXMLNodeCollection, IXMLPlyAttributesList)
  protected
    { IXMLPlyAttributesList }
    function Add: IXMLPlyAttributes;
    function Insert(const Index: Integer): IXMLPlyAttributes;
    function Get_Item(Index: Integer): IXMLPlyAttributes;
  end;

{ TXMLPlySet }

  TXMLPlySet = class(TXMLNode, IXMLPlySet)
  private
    FNumberOfPlies: IXMLNni1List;
    FPlyAttributes: IXMLPlyAttributesList;
  protected
    { IXMLPlySet }
    function Get_EdgePaddable: WideString;
    function Get_NumberOfPlies: IXMLNni1List;
    function Get_PlyAttributes: IXMLPlyAttributesList;
    procedure Set_EdgePaddable(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlySetList }

  TXMLPlySetList = class(TXMLNodeCollection, IXMLPlySetList)
  protected
    { IXMLPlySetList }
    function Add: IXMLPlySet;
    function Insert(const Index: Integer): IXMLPlySet;
    function Get_Item(Index: Integer): IXMLPlySet;
  end;

{ TXMLReel }

  TXMLReel = class(TXMLNode, IXMLReel)
  protected
    { IXMLReel }
    function Get_ReelConversionCharacteristics: IXMLReelConversionCharacteristicsClass;
    function Get_ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLReelConversionCharacteristicsClass }

  TXMLReelConversionCharacteristicsClass = class(TXMLNode, IXMLReelConversionCharacteristicsClass)
  private
    FReelWidth: IXMLMeasurementList;
    FReelDiameter: IXMLMeasurementList;
    FReelLength: IXMLMeasurementList;
    FCoreCharacteristics: IXMLCoreCharacteristicsList;
    FEmbossing: IXMLEmbossingList;
    FWatermark: IXMLWatermarkList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLReelConversionCharacteristicsClass }
    function Get_ConversionCode: IXMLConversionCode;
    function Get_WindingDirection: WideString;
    function Get_MakeTo: WideString;
    function Get_ReelWidth: IXMLMeasurementList;
    function Get_ReelDiameter: IXMLMeasurementList;
    function Get_ReelLength: IXMLMeasurementList;
    function Get_TargetProductWeight: IXMLMeasurement;
    function Get_CoreCharacteristics: IXMLCoreCharacteristicsList;
    function Get_Embossing: IXMLEmbossingList;
    function Get_Watermark: IXMLWatermarkList;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_WindingDirection(Value: WideString);
    procedure Set_MakeTo(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPulpClass }

  TXMLPulpClass = class(TXMLNode, IXMLPulpClass)
  protected
    { IXMLPulpClass }
    function Get_PulpCharacteristics: IXMLPulpCharacteristics;
    function Get_Bale: IXMLBale;
    function Get_Reel: IXMLReel;
    function Get_Slurry: IXMLSlurry;
    function Get_NonStandardPulp: IXMLNonStandardPulp;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPulpCharacteristics }

  TXMLPulpCharacteristics = class(TXMLNode, IXMLPulpCharacteristics)
  private
    FAsh: IXMLAshList;
    FBasisWeight: IXMLBasisWeightList;
    FBrightness: IXMLBrightnessList;
    FBurst: IXMLBurstList;
    FBurstIndex: IXMLBurstIndexList;
    FColourDetail: IXMLColourDetailList;
    FDensity: IXMLDensityList;
    FDirt: IXMLDirtList;
    FDrainageResistance: IXMLDrainageResistanceList;
    FFibreLength: IXMLFibreLengthList;
    FFibreClassification: IXMLFibreClassificationList;
    FFreeness: IXMLFreenessList;
    FLightScattering: IXMLLightScatteringList;
    FMoisture: IXMLMoistureList;
    FOpacity: IXMLOpacityList;
    FPH: IXMLPHList;
    FPostConsumerWaste: IXMLPostConsumerWasteList;
    FPreConsumerWaste: IXMLPreConsumerWasteList;
    FRecycled: IXMLRecycledList;
    FTear: IXMLTearList;
    FTearIndex: IXMLTearIndexList;
    FTensile: IXMLTensileList;
    FTensileIndex: IXMLTensileIndexList;
    FViscosity: IXMLViscosityList;
    FWhiteness: IXMLWhitenessList;
  protected
    { IXMLPulpCharacteristics }
    function Get_PulpingProcess: WideString;
    function Get_BleachingProcess: WideString;
    function Get_FibreSource: WideString;
    function Get_Ash: IXMLAshList;
    function Get_BasisWeight: IXMLBasisWeightList;
    function Get_Brightness: IXMLBrightnessList;
    function Get_Burst: IXMLBurstList;
    function Get_BurstIndex: IXMLBurstIndexList;
    function Get_ColourDetail: IXMLColourDetailList;
    function Get_Density: IXMLDensityList;
    function Get_Dirt: IXMLDirtList;
    function Get_DrainageResistance: IXMLDrainageResistanceList;
    function Get_FibreLength: IXMLFibreLengthList;
    function Get_FibreClassification: IXMLFibreClassificationList;
    function Get_Freeness: IXMLFreenessList;
    function Get_LightScattering: IXMLLightScatteringList;
    function Get_Moisture: IXMLMoistureList;
    function Get_Opacity: IXMLOpacityList;
    function Get_PH: IXMLPHList;
    function Get_PostConsumerWaste: IXMLPostConsumerWasteList;
    function Get_PreConsumerWaste: IXMLPreConsumerWasteList;
    function Get_Recycled: IXMLRecycledList;
    function Get_Tear: IXMLTearList;
    function Get_TearIndex: IXMLTearIndexList;
    function Get_Tensile: IXMLTensileList;
    function Get_TensileIndex: IXMLTensileIndexList;
    function Get_Viscosity: IXMLViscosityList;
    function Get_Whiteness: IXMLWhitenessList;
    function Get_AdditionalTest: IXMLAdditionalTest;
    procedure Set_PulpingProcess(Value: WideString);
    procedure Set_BleachingProcess(Value: WideString);
    procedure Set_FibreSource(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDrainageResistance }

  TXMLDrainageResistance = class(TXMLDetailMeasurement, IXMLDrainageResistance)
  protected
    { IXMLDrainageResistance }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLDrainageResistanceList }

  TXMLDrainageResistanceList = class(TXMLNodeCollection, IXMLDrainageResistanceList)
  protected
    { IXMLDrainageResistanceList }
    function Add: IXMLDrainageResistance;
    function Insert(const Index: Integer): IXMLDrainageResistance;
    function Get_Item(Index: Integer): IXMLDrainageResistance;
  end;

{ TXMLViscosity }

  TXMLViscosity = class(TXMLDetailMeasurement, IXMLViscosity)
  protected
    { IXMLViscosity }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLViscosityList }

  TXMLViscosityList = class(TXMLNodeCollection, IXMLViscosityList)
  protected
    { IXMLViscosityList }
    function Add: IXMLViscosity;
    function Insert(const Index: Integer): IXMLViscosity;
    function Get_Item(Index: Integer): IXMLViscosity;
  end;

{ TXMLBale }

  TXMLBale = class(TXMLNode, IXMLBale)
  protected
    { IXMLBale }
    function Get_BaleType: WideString;
    function Get_BaleConversionCharacteristics: IXMLBaleConversionCharacteristics;
    function Get_BalePackagingCharacteristics: IXMLBalePackagingCharacteristics;
    procedure Set_BaleType(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBaleConversionCharacteristics }

  TXMLBaleConversionCharacteristics = class(TXMLNode, IXMLBaleConversionCharacteristics)
  protected
    { IXMLBaleConversionCharacteristics }
    function Get_ConversionCode: IXMLConversionCode;
    function Get_BaleHeight: IXMLMeasurement;
    function Get_BaleWidth: IXMLMeasurement;
    function Get_BaleDepth: IXMLMeasurement;
    function Get_BaleStandardWeight: IXMLMeasurement;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBalePackagingCharacteristics }

  TXMLBalePackagingCharacteristics = class(TXMLNode, IXMLBalePackagingCharacteristics)
  private
    FStencilCharacteristics: IXMLStencilCharacteristicsList;
  protected
    { IXMLBalePackagingCharacteristics }
    function Get_PackagingCode: IXMLPackagingCode;
    function Get_CustomerMarks: WideString;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_PulpUnitCharacteristics: IXMLPulpUnitCharacteristics;
    procedure Set_CustomerMarks(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPulpUnitCharacteristics }

  TXMLPulpUnitCharacteristics = class(TXMLNode, IXMLPulpUnitCharacteristics)
  private
    FStencilCharacteristics: IXMLStencilCharacteristicsList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLPulpUnitCharacteristics }
    function Get_PackagingDescription: IXMLPackagingDescription;
    function Get_Wrap: IXMLWrap;
    function Get_PalletCharacteristics: IXMLPalletCharacteristics;
    function Get_BalesPerUnit: LongWord;
    function Get_LayersPerUnit: LongWord;
    function Get_LabelCharacteristics: IXMLLabelCharacteristics;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_MaximumGrossWeight: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_BalesPerUnit(Value: LongWord);
    procedure Set_LayersPerUnit(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSlurry }

  TXMLSlurry = class(TXMLNode, IXMLSlurry)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLSlurry }
    function Get_TargetSolidsContent: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLNonStandardPulp }

  TXMLNonStandardPulp = class(TXMLNode, IXMLNonStandardPulp)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLNonStandardPulp }
    function Get_TargetMoisture: IXMLMeasurement;
    function Get_AdditionalText: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLRecoveredPaper }

  TXMLRecoveredPaper = class(TXMLNode, IXMLRecoveredPaper)
  protected
    { IXMLRecoveredPaper }
    function Get_RecoveredPaperAttributes: WideString;
    procedure Set_RecoveredPaperAttributes(Value: WideString);
  end;

{ TXMLVirginFibre }

  TXMLVirginFibre = class(TXMLNode, IXMLVirginFibre)
  protected
    { IXMLVirginFibre }
    function Get_TimberCharacteristics: IXMLTimberCharacteristics;
    function Get_Log: IXMLLog;
    function Get_Chip: IXMLChip;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTimberCharacteristics }

  TXMLTimberCharacteristics = class(TXMLNode, IXMLTimberCharacteristics)
  private
    FLumberSpecies: IXMLLumberSpeciesClassList;
  protected
    { IXMLTimberCharacteristics }
    function Get_LumberSpecies: IXMLLumberSpeciesClassList;
    function Get_Age: IXMLMeasurement;
    function Get_Grade: WideString;
    procedure Set_Grade(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLumberSpeciesClass }

  TXMLLumberSpeciesClass = class(TXMLNode, IXMLLumberSpeciesClass)
  protected
    { IXMLLumberSpeciesClass }
    function Get_SpeciesType: WideString;
    function Get_SpeciesOrigin: WideString;
    function Get_SpeciesAgency: WideString;
    function Get_SpeciesCode: WideString;
    function Get_AdditionalText: WideString;
    procedure Set_SpeciesType(Value: WideString);
    procedure Set_SpeciesOrigin(Value: WideString);
    procedure Set_SpeciesAgency(Value: WideString);
    procedure Set_SpeciesCode(Value: WideString);
    procedure Set_AdditionalText(Value: WideString);
  end;

{ TXMLLumberSpeciesClassList }

  TXMLLumberSpeciesClassList = class(TXMLNodeCollection, IXMLLumberSpeciesClassList)
  protected
    { IXMLLumberSpeciesClassList }
    function Add: IXMLLumberSpeciesClass;
    function Insert(const Index: Integer): IXMLLumberSpeciesClass;
    function Get_Item(Index: Integer): IXMLLumberSpeciesClass;
  end;

{ TXMLLog }

  TXMLLog = class(TXMLNode, IXMLLog)
  protected
    { IXMLLog }
    function Get_LogCharacteristics: IXMLLogCharacteristics;
    function Get_LogPackagingCharacteristics: IXMLLogPackagingCharacteristics;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLogCharacteristics }

  TXMLLogCharacteristics = class(TXMLNode, IXMLLogCharacteristics)
  protected
    { IXMLLogCharacteristics }
    function Get_LogLengthType: WideString;
    function Get_Debarked: WideString;
    function Get_LogConversionRule: WideString;
    function Get_Length: IXMLMeasurement;
    function Get_SmallEndDiameter: IXMLMeasurement;
    function Get_LargeEndDiameter: IXMLMeasurement;
    function Get_DiameterBreastHeight: IXMLMeasurement;
    procedure Set_LogLengthType(Value: WideString);
    procedure Set_Debarked(Value: WideString);
    procedure Set_LogConversionRule(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLogPackagingCharacteristics }

  TXMLLogPackagingCharacteristics = class(TXMLNode, IXMLLogPackagingCharacteristics)
  private
    FIdentifier: IXMLIdentifierS60List;
    FInformationalQuantity: IXMLInformationalQuantityList;
  protected
    { IXMLLogPackagingCharacteristics }
    function Get_DoubleBunked: WideString;
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_ItemCount: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    procedure Set_DoubleBunked(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLIdentifierS60 }

  TXMLIdentifierS60 = class(TXMLNode, IXMLIdentifierS60)
  protected
    { IXMLIdentifierS60 }
    function Get_IdentifierCodeType: WideString;
    function Get_IdentifierType: WideString;
    function Get_IdentifierFormatType: WideString;
    procedure Set_IdentifierCodeType(Value: WideString);
    procedure Set_IdentifierType(Value: WideString);
    procedure Set_IdentifierFormatType(Value: WideString);
  end;

{ TXMLIdentifierS60List }

  TXMLIdentifierS60List = class(TXMLNodeCollection, IXMLIdentifierS60List)
  protected
    { IXMLIdentifierS60List }
    function Add: IXMLIdentifierS60;
    function Insert(const Index: Integer): IXMLIdentifierS60;
    function Get_Item(Index: Integer): IXMLIdentifierS60;
  end;

{ TXMLChip }

  TXMLChip = class(TXMLNode, IXMLChip)
  protected
    { IXMLChip }
    function Get_ChipCharacteristics: IXMLChipCharacteristics;
    function Get_ChipPackagingCharacteristics: IXMLChipPackagingCharacteristics;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLChipCharacteristics }

  TXMLChipCharacteristics = class(TXMLNode, IXMLChipCharacteristics)
  protected
    { IXMLChipCharacteristics }
    function Get_Screened: WideString;
    function Get_Debarked: WideString;
    function Get_Thickness: IXMLMeasurement;
    function Get_Moisture: IXMLMoisture;
    function Get_Dirt: IXMLDirt;
    function Get_Bark: IXMLBark;
    function Get_Sawdust: IXMLSawdust;
    procedure Set_Screened(Value: WideString);
    procedure Set_Debarked(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBark }

  TXMLBark = class(TXMLDetailMeasurement, IXMLBark)
  protected
    { IXMLBark }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLSawdust }

  TXMLSawdust = class(TXMLDetailMeasurement, IXMLSawdust)
  protected
    { IXMLSawdust }
    function Get_TestMethod: WideString;
    function Get_TestAgency: WideString;
    function Get_SampleType: WideString;
    function Get_ResultSource: WideString;
    procedure Set_TestMethod(Value: WideString);
    procedure Set_TestAgency(Value: WideString);
    procedure Set_SampleType(Value: WideString);
    procedure Set_ResultSource(Value: WideString);
  end;

{ TXMLChipPackagingCharacteristics }

  TXMLChipPackagingCharacteristics = class(TXMLNode, IXMLChipPackagingCharacteristics)
  protected
    { IXMLChipPackagingCharacteristics }
    function Get_Identifier: IXMLIdentifierS60;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantity;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLWoodProducts }

  TXMLWoodProducts = class(TXMLNode, IXMLWoodProducts)
  private
    FProofInformationalQuantity: IXMLProofInformationalQuantityList;
    FSuppliedComponentInformation: IXMLSuppliedComponentInformationList;
    FSafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
  protected
    { IXMLWoodProducts }
    function Get_WoodTimbersDimensionalLumberBoards: IXMLWoodTimbersDimensionalLumberBoards;
    function Get_RoofingSidingDeckingFencing: IXMLRoofingSidingDeckingFencing;
    function Get_CompositeAndVeneerWoodPanels: IXMLCompositeAndVeneerWoodPanels;
    function Get_ConstructionPackagesAndPreFabPanels: IXMLConstructionPackagesAndPreFabPanels;
    function Get_Millwork: WideString;
    function Get_Gypsum: WideString;
    function Get_ProofInformationalQuantity: IXMLProofInformationalQuantityList;
    function Get_SuppliedComponentInformation: IXMLSuppliedComponentInformationList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_Millwork(Value: WideString);
    procedure Set_Gypsum(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLWoodTimbersDimensionalLumberBoards }

  TXMLWoodTimbersDimensionalLumberBoards = class(TXMLNode, IXMLWoodTimbersDimensionalLumberBoards)
  protected
    { IXMLWoodTimbersDimensionalLumberBoards }
    function Get_SoftwoodLumber: IXMLSoftwoodLumber;
    function Get_HardwoodLumber: IXMLHardwoodLumber;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSoftwoodLumber }

  TXMLSoftwoodLumber = class(TXMLNode, IXMLSoftwoodLumber)
  protected
    { IXMLSoftwoodLumber }
    function Get_SoftwoodLumberCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
    function Get_Packaging: IXMLPackaging;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSoftwoodLumberCharacteristicsClass }

  TXMLSoftwoodLumberCharacteristicsClass = class(TXMLNode, IXMLSoftwoodLumberCharacteristicsClass)
  private
    FLumberSpecies: IXMLLumberSpeciesClassList;
    FLength: IXMLDimensionConstructionClassList;
    FWidth: IXMLDimensionConstructionClassList;
    FThickness: IXMLDimensionConstructionClassList;
    FManufacturingProcess: IXMLLumberManufacturingProcessClassList;
    FClassIdentifier: IXMLIdentifierS60List;
    FSafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLSoftwoodLumberCharacteristicsClass }
    function Get_LumberSpecies: IXMLLumberSpeciesClassList;
    function Get_LumberGrade: IXMLLumberGradeClass;
    function Get_Length: IXMLDimensionConstructionClassList;
    function Get_Width: IXMLDimensionConstructionClassList;
    function Get_Thickness: IXMLDimensionConstructionClassList;
    function Get_Seasoning: IXMLLumberSeasoningClass;
    function Get_MoistureContent: IXMLLumberMoistureContentClass;
    function Get_HeatTreatment: IXMLHeatTreatmentClass;
    function Get_ManufacturingProcess: IXMLLumberManufacturingProcessClassList;
    function Get_PatternProfile: IXMLLumberPatternProfileClass;
    function Get_Trim: IXMLLumberTrimClass;
    function Get_Joining: IXMLLumberJoiningClass;
    function Get_PressureTreatment: IXMLPressureTreatmentClass;
    function Get_FireTreatment: IXMLFireTreatmentClass;
    function Get_OtherTreatment: IXMLOtherTreatmentClass;
    function Get_GradeStamp: IXMLConstructionGradeStampClass;
    function Get_ExLog: IXMLExLogClass;
    function Get_ClassIdentifier: IXMLIdentifierS60List;
    function Get_Weight: IXMLMeasurement;
    function Get_LabelCharacteristics: IXMLLabelCharacteristics;
    function Get_StencilCharacteristics: IXMLStencilCharacteristics;
    function Get_Wrap: IXMLWrap;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    function Get_AdditionalText: IXMLS255List;
    function Get_LengthCutDescription: IXMLLengthCutDescription;
    function Get_ShippingMark: WideString;
    procedure Set_ShippingMark(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLumberGradeClass }

  TXMLLumberGradeClass = class(TXMLNode, IXMLLumberGradeClass)
  protected
    { IXMLLumberGradeClass }
    function Get_GradeType: WideString;
    function Get_GradingRule: WideString;
    function Get_GradeAgency: WideString;
    function Get_ModulusElasticity: WideString;
    function Get_Face: WideString;
    function Get_GradeName: WideString;
    function Get_GradeCode: WideString;
    function Get_AdditionalText: WideString;
    procedure Set_GradeType(Value: WideString);
    procedure Set_GradingRule(Value: WideString);
    procedure Set_GradeAgency(Value: WideString);
    procedure Set_ModulusElasticity(Value: WideString);
    procedure Set_Face(Value: WideString);
    procedure Set_GradeName(Value: WideString);
    procedure Set_GradeCode(Value: WideString);
    procedure Set_AdditionalText(Value: WideString);
  end;

{ TXMLDimensionConstructionClass }

  TXMLDimensionConstructionClass = class(TXMLNode, IXMLDimensionConstructionClass)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLDimensionConstructionClass }
    function Get_ActualNominal: WideString;
    function Get_WithGrain: WideString;
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_ActualNominal(Value: WideString);
    procedure Set_WithGrain(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDimensionConstructionClassList }

  TXMLDimensionConstructionClassList = class(TXMLNodeCollection, IXMLDimensionConstructionClassList)
  protected
    { IXMLDimensionConstructionClassList }
    function Add: IXMLDimensionConstructionClass;
    function Insert(const Index: Integer): IXMLDimensionConstructionClass;
    function Get_Item(Index: Integer): IXMLDimensionConstructionClass;
  end;

{ TXMLLumberSeasoningClass }

  TXMLLumberSeasoningClass = class(TXMLNode, IXMLLumberSeasoningClass)
  protected
    { IXMLLumberSeasoningClass }
    function Get_SeasoningType: WideString;
    function Get_AdditionalText: WideString;
    procedure Set_SeasoningType(Value: WideString);
    procedure Set_AdditionalText(Value: WideString);
  end;

{ TXMLLumberMoistureContentClass }

  TXMLLumberMoistureContentClass = class(TXMLNode, IXMLLumberMoistureContentClass)
  protected
    { IXMLLumberMoistureContentClass }
    function Get_MoistureContentPercentage: WideString;
    function Get_AdditionalText: WideString;
    procedure Set_MoistureContentPercentage(Value: WideString);
    procedure Set_AdditionalText(Value: WideString);
  end;

{ TXMLHeatTreatmentClass }

  TXMLHeatTreatmentClass = class(TXMLNodeCollection, IXMLHeatTreatmentClass)
  protected
    { IXMLHeatTreatmentClass }
    function Get_HeatTreatmentType: WideString;
    function Get_AdditionalText(Index: Integer): WideString;
    procedure Set_HeatTreatmentType(Value: WideString);
    function Add(const AdditionalText: WideString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: WideString): IXMLNode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLumberManufacturingProcessClass }

  TXMLLumberManufacturingProcessClass = class(TXMLNode, IXMLLumberManufacturingProcessClass)
  protected
    { IXMLLumberManufacturingProcessClass }
    function Get_ManufacturingProcessType: WideString;
    function Get_ManufacturingProcessAgency: WideString;
    function Get_Value: Variant;
    function Get_AdditionalText: WideString;
    procedure Set_ManufacturingProcessType(Value: WideString);
    procedure Set_ManufacturingProcessAgency(Value: WideString);
    procedure Set_Value(Value: Variant);
    procedure Set_AdditionalText(Value: WideString);
  end;

{ TXMLLumberManufacturingProcessClassList }

  TXMLLumberManufacturingProcessClassList = class(TXMLNodeCollection, IXMLLumberManufacturingProcessClassList)
  protected
    { IXMLLumberManufacturingProcessClassList }
    function Add: IXMLLumberManufacturingProcessClass;
    function Insert(const Index: Integer): IXMLLumberManufacturingProcessClass;
    function Get_Item(Index: Integer): IXMLLumberManufacturingProcessClass;
  end;

{ TXMLLumberPatternProfileClass }

  TXMLLumberPatternProfileClass = class(TXMLNode, IXMLLumberPatternProfileClass)
  protected
    { IXMLLumberPatternProfileClass }
    function Get_PatternProfileType: WideString;
    function Get_PatternProfileAgency: WideString;
    function Get_PatternProfileCode: WideString;
    function Get_AdditionalText: WideString;
    procedure Set_PatternProfileType(Value: WideString);
    procedure Set_PatternProfileAgency(Value: WideString);
    procedure Set_PatternProfileCode(Value: WideString);
    procedure Set_AdditionalText(Value: WideString);
  end;

{ TXMLLumberTrimClass }

  TXMLLumberTrimClass = class(TXMLNode, IXMLLumberTrimClass)
  protected
    { IXMLLumberTrimClass }
    function Get_TrimType: WideString;
    function Get_AdditionalText: WideString;
    procedure Set_TrimType(Value: WideString);
    procedure Set_AdditionalText(Value: WideString);
  end;

{ TXMLLumberJoiningClass }

  TXMLLumberJoiningClass = class(TXMLNode, IXMLLumberJoiningClass)
  protected
    { IXMLLumberJoiningClass }
    function Get_JoiningType: WideString;
    function Get_AdditionalText: WideString;
    procedure Set_JoiningType(Value: WideString);
    procedure Set_AdditionalText(Value: WideString);
  end;

{ TXMLPressureTreatmentClass }

  TXMLPressureTreatmentClass = class(TXMLNode, IXMLPressureTreatmentClass)
  protected
    { IXMLPressureTreatmentClass }
    function Get_PressureTreatmentCompound: IXMLPressureTreatmentCompoundClass;
    function Get_PressureTreatmentConcentration: IXMLPressureTreatmentConcentration;
    function Get_PressureTreatmentComStdorUseCategory: WideString;
    procedure Set_PressureTreatmentComStdorUseCategory(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPressureTreatmentCompoundClass }

  TXMLPressureTreatmentCompoundClass = class(TXMLNode, IXMLPressureTreatmentCompoundClass)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLPressureTreatmentCompoundClass }
    function Get_CompoundType: WideString;
    function Get_CompoundAgency: WideString;
    function Get_Value: Variant;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_CompoundType(Value: WideString);
    procedure Set_CompoundAgency(Value: WideString);
    procedure Set_Value(Value: Variant);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPressureTreatmentConcentration }

  TXMLPressureTreatmentConcentration = class(TXMLNode, IXMLPressureTreatmentConcentration)
  protected
    { IXMLPressureTreatmentConcentration }
    function Get_UOM: WideString;
    procedure Set_UOM(Value: WideString);
  end;

{ TXMLFireTreatmentClass }

  TXMLFireTreatmentClass = class(TXMLNodeCollection, IXMLFireTreatmentClass)
  protected
    { IXMLFireTreatmentClass }
    function Get_FireTreatmentType: WideString;
    function Get_AdditionalText(Index: Integer): WideString;
    procedure Set_FireTreatmentType(Value: WideString);
    function Add(const AdditionalText: WideString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: WideString): IXMLNode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLOtherTreatmentClass }

  TXMLOtherTreatmentClass = class(TXMLNodeCollection, IXMLOtherTreatmentClass)
  protected
    { IXMLOtherTreatmentClass }
    function Get_AdditionalText(Index: Integer): WideString;
    function Add(const AdditionalText: WideString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: WideString): IXMLNode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLConstructionGradeStampClass }

  TXMLConstructionGradeStampClass = class(TXMLNode, IXMLConstructionGradeStampClass)
  protected
    { IXMLConstructionGradeStampClass }
    function Get_GradeStamped: WideString;
    function Get_GradeStampMillNumber: WideString;
    function Get_GradeStampLocation: WideString;
    procedure Set_GradeStamped(Value: WideString);
    procedure Set_GradeStampMillNumber(Value: WideString);
    procedure Set_GradeStampLocation(Value: WideString);
  end;

{ TXMLExLogClass }

  TXMLExLogClass = class(TXMLNode, IXMLExLogClass)
  protected
    { IXMLExLogClass }
    function Get_Value: IXMLValue;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLengthCutDescription }

  TXMLLengthCutDescription = class(TXMLNode, IXMLLengthCutDescription)
  protected
    { IXMLLengthCutDescription }
    function Get_LengthCutType: WideString;
    procedure Set_LengthCutType(Value: WideString);
  end;

{ TXMLPackaging }

  TXMLPackaging = class(TXMLNode, IXMLPackaging)
  protected
    { IXMLPackaging }
    function Get_ProductPackaging: IXMLProductPackagingClass;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLProductPackagingClass }

  TXMLProductPackagingClass = class(TXMLNode, IXMLProductPackagingClass)
  private
    FLabelCharacteristics: IXMLLabelCharacteristicsList;
    FStencilCharacteristics: IXMLStencilCharacteristicsList;
    FBandCharacteristics: IXMLBandCharacteristicsList;
    FPalletCharacteristics: IXMLPalletCharacteristicsList;
    FWrap: IXMLWrapList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLProductPackagingClass }
    function Get_QuantityInUnit: IXMLMeasurement;
    function Get_UnitDimension: IXMLUnitDimensionType;
    function Get_Weight: IXMLMeasurement;
    function Get_PackageIDInformation: IXMLLumberPackageCodeClass;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_BandCharacteristics: IXMLBandCharacteristicsList;
    function Get_PalletCharacteristics: IXMLPalletCharacteristicsList;
    function Get_Wrap: IXMLWrapList;
    function Get_AdditionalText: IXMLS255List;
    function Get_PackageType: WideString;
    procedure Set_PackageType(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLUnitDimensionType }

  TXMLUnitDimensionType = class(TXMLNode, IXMLUnitDimensionType)
  protected
    { IXMLUnitDimensionType }
    function Get_Length: IXMLDimensionMeasurementClass;
    function Get_Width: IXMLDimensionMeasurementClass;
    function Get_Height: IXMLDimensionMeasurementClass;
    function Get_PiecesPerRow: LongWord;
    function Get_RowsPerUnit: LongWord;
    procedure Set_PiecesPerRow(Value: LongWord);
    procedure Set_RowsPerUnit(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDimensionMeasurementClass }

  TXMLDimensionMeasurementClass = class(TXMLNode, IXMLDimensionMeasurementClass)
  protected
    { IXMLDimensionMeasurementClass }
    function Get_ActualNominal: WideString;
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    procedure Set_ActualNominal(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLumberPackageCodeClass }

  TXMLLumberPackageCodeClass = class(TXMLNode, IXMLLumberPackageCodeClass)
  protected
    { IXMLLumberPackageCodeClass }
    function Get_PackageAgency: WideString;
    function Get_PackageCode: WideString;
    function Get_PackageName: WideString;
    procedure Set_PackageAgency(Value: WideString);
    procedure Set_PackageCode(Value: WideString);
    procedure Set_PackageName(Value: WideString);
  end;

{ TXMLHardwoodLumber }

  TXMLHardwoodLumber = class(TXMLNode, IXMLHardwoodLumber)
  protected
    { IXMLHardwoodLumber }
    function Get_HardwoodLumberCharacteristics: WideString;
    function Get_Packaging: IXMLPackaging;
    procedure Set_HardwoodLumberCharacteristics(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLRoofingSidingDeckingFencing }

  TXMLRoofingSidingDeckingFencing = class(TXMLNode, IXMLRoofingSidingDeckingFencing)
  protected
    { IXMLRoofingSidingDeckingFencing }
    function Get_NaturalWoodSiding: IXMLNaturalWoodSiding;
    function Get_NaturalWoodSidingOther: IXMLNaturalWoodSidingOther;
    function Get_DeckAndPorchFlooringMaterialsNaturalWood: IXMLDeckAndPorchFlooringMaterialsNaturalWood;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLNaturalWoodSiding }

  TXMLNaturalWoodSiding = class(TXMLNode, IXMLNaturalWoodSiding)
  protected
    { IXMLNaturalWoodSiding }
    function Get_NaturalWoodSidingCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
    function Get_Packaging: IXMLPackaging;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLNaturalWoodSidingOther }

  TXMLNaturalWoodSidingOther = class(TXMLNode, IXMLNaturalWoodSidingOther)
  protected
    { IXMLNaturalWoodSidingOther }
    function Get_NaturalWoodSidingOtherCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
    function Get_Packaging: IXMLPackaging;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeckAndPorchFlooringMaterialsNaturalWood }

  TXMLDeckAndPorchFlooringMaterialsNaturalWood = class(TXMLNode, IXMLDeckAndPorchFlooringMaterialsNaturalWood)
  protected
    { IXMLDeckAndPorchFlooringMaterialsNaturalWood }
    function Get_DeckAndPorchFlooringMaterialsNaturalWoodCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
    function Get_Packaging: IXMLPackaging;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCompositeAndVeneerWoodPanels }

  TXMLCompositeAndVeneerWoodPanels = class(TXMLNode, IXMLCompositeAndVeneerWoodPanels)
  protected
    { IXMLCompositeAndVeneerWoodPanels }
    function Get_SoftwoodPlywood: IXMLNAPlywoodOSBCharacteristicsClass;
    function Get_Packaging: IXMLPackaging;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLNAPlywoodOSBCharacteristicsClass }

  TXMLNAPlywoodOSBCharacteristicsClass = class(TXMLNode, IXMLNAPlywoodOSBCharacteristicsClass)
  private
    FThickness: IXMLDimensionConstructionClassList;
    FWidth: IXMLDimensionConstructionClassList;
    FLength: IXMLDimensionConstructionClassList;
    FPlywoodOSBSpecies: IXMLPlywoodOSBSpeciesTypeList;
    FOverlay: IXMLPlywoodOSBOverlayClassList;
    FSupplemental: IXMLPlywoodOSBSupplementalClassList;
    FLabelCharacteristics: IXMLLabelCharacteristicsList;
    FStencilCharacteristics: IXMLStencilCharacteristicsList;
    FSafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
  protected
    { IXMLNAPlywoodOSBCharacteristicsClass }
    function Get_PlywoodOSBGrade: IXMLPlywoodOSBGradeClass;
    function Get_Thickness: IXMLDimensionConstructionClassList;
    function Get_Width: IXMLDimensionConstructionClassList;
    function Get_Length: IXMLDimensionConstructionClassList;
    function Get_PlywoodOSBSpecies: IXMLPlywoodOSBSpeciesTypeList;
    function Get_PlyNumber: LongWord;
    function Get_Surface: IXMLPlywoodOSBSurfaceClass;
    function Get_Overlay: IXMLPlywoodOSBOverlayClassList;
    function Get_GlueExposure: WideString;
    function Get_Edge: IXMLPlywoodOSBEdgeClass;
    function Get_PressureTreatment: IXMLPressureTreatmentClass;
    function Get_FireTreatment: IXMLFireTreatmentClass;
    function Get_Supplemental: IXMLPlywoodOSBSupplementalClassList;
    function Get_Brand: WideString;
    function Get_GradeAgency: WideString;
    function Get_GradeStamp: IXMLConstructionGradeStampClass;
    function Get_ClassIdentifier: IXMLIdentifierS60;
    function Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
    function Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
    function Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
    procedure Set_PlyNumber(Value: LongWord);
    procedure Set_GlueExposure(Value: WideString);
    procedure Set_Brand(Value: WideString);
    procedure Set_GradeAgency(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlywoodOSBGradeClass }

  TXMLPlywoodOSBGradeClass = class(TXMLNode, IXMLPlywoodOSBGradeClass)
  protected
    { IXMLPlywoodOSBGradeClass }
    function Get_Face: WideString;
    function Get_SpanRating: WideString;
    function Get_StrengthGroup: WideString;
    procedure Set_Face(Value: WideString);
    procedure Set_SpanRating(Value: WideString);
    procedure Set_StrengthGroup(Value: WideString);
  end;

{ TXMLPlywoodOSBSurfaceClass }

  TXMLPlywoodOSBSurfaceClass = class(TXMLNodeCollection, IXMLPlywoodOSBSurfaceClass)
  protected
    { IXMLPlywoodOSBSurfaceClass }
    function Get_SurfaceType: WideString;
    function Get_AdditionalText(Index: Integer): WideString;
    procedure Set_SurfaceType(Value: WideString);
    function Add(const AdditionalText: WideString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: WideString): IXMLNode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlywoodOSBOverlayClass }

  TXMLPlywoodOSBOverlayClass = class(TXMLNodeCollection, IXMLPlywoodOSBOverlayClass)
  protected
    { IXMLPlywoodOSBOverlayClass }
    function Get_OverlaySide: WideString;
    function Get_AdditionalText(Index: Integer): WideString;
    procedure Set_OverlaySide(Value: WideString);
    function Add(const AdditionalText: WideString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: WideString): IXMLNode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlywoodOSBOverlayClassList }

  TXMLPlywoodOSBOverlayClassList = class(TXMLNodeCollection, IXMLPlywoodOSBOverlayClassList)
  protected
    { IXMLPlywoodOSBOverlayClassList }
    function Add: IXMLPlywoodOSBOverlayClass;
    function Insert(const Index: Integer): IXMLPlywoodOSBOverlayClass;
    function Get_Item(Index: Integer): IXMLPlywoodOSBOverlayClass;
  end;

{ TXMLPlywoodOSBEdgeClass }

  TXMLPlywoodOSBEdgeClass = class(TXMLNode, IXMLPlywoodOSBEdgeClass)
  private
    FAdditionalText: IXMLS255List;
  protected
    { IXMLPlywoodOSBEdgeClass }
    function Get_EdgeType: WideString;
    function Get_EdgeLocation: WideString;
    function Get_EdgeMachiningProfile: WideString;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_EdgeType(Value: WideString);
    procedure Set_EdgeLocation(Value: WideString);
    procedure Set_EdgeMachiningProfile(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlywoodOSBSupplementalClass }

  TXMLPlywoodOSBSupplementalClass = class(TXMLNodeCollection, IXMLPlywoodOSBSupplementalClass)
  protected
    { IXMLPlywoodOSBSupplementalClass }
    function Get_SupplementalSpecification: WideString;
    function Get_AdditionalText(Index: Integer): WideString;
    procedure Set_SupplementalSpecification(Value: WideString);
    function Add(const AdditionalText: WideString): IXMLNode;
    function Insert(const Index: Integer; const AdditionalText: WideString): IXMLNode;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPlywoodOSBSupplementalClassList }

  TXMLPlywoodOSBSupplementalClassList = class(TXMLNodeCollection, IXMLPlywoodOSBSupplementalClassList)
  protected
    { IXMLPlywoodOSBSupplementalClassList }
    function Add: IXMLPlywoodOSBSupplementalClass;
    function Insert(const Index: Integer): IXMLPlywoodOSBSupplementalClass;
    function Get_Item(Index: Integer): IXMLPlywoodOSBSupplementalClass;
  end;

{ TXMLConstructionPackagesAndPreFabPanels }

  TXMLConstructionPackagesAndPreFabPanels = class(TXMLNode, IXMLConstructionPackagesAndPreFabPanels)
  protected
    { IXMLConstructionPackagesAndPreFabPanels }
    function Get_Floor: IXMLFloor;
    function Get_Wall: IXMLWall;
    function Get_Roof: IXMLRoof;
    function Get_Packaging: IXMLPackaging;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLFloor }

  TXMLFloor = class(TXMLNode, IXMLFloor)
  protected
    { IXMLFloor }
    function Get_FloorPanel: WideString;
    function Get_FloorPackage: WideString;
    function Get_FloorTruss: WideString;
    procedure Set_FloorPanel(Value: WideString);
    procedure Set_FloorPackage(Value: WideString);
    procedure Set_FloorTruss(Value: WideString);
  end;

{ TXMLWall }

  TXMLWall = class(TXMLNode, IXMLWall)
  protected
    { IXMLWall }
    function Get_WallPanel: WideString;
    function Get_WallPackage: WideString;
    procedure Set_WallPanel(Value: WideString);
    procedure Set_WallPackage(Value: WideString);
  end;

{ TXMLRoof }

  TXMLRoof = class(TXMLNode, IXMLRoof)
  protected
    { IXMLRoof }
    function Get_RoofPanel: WideString;
    function Get_RoofPackage: WideString;
    function Get_RoofTruss: WideString;
    procedure Set_RoofPanel(Value: WideString);
    procedure Set_RoofPackage(Value: WideString);
    procedure Set_RoofTruss(Value: WideString);
  end;

{ TXMLPackageInformationClass }

  TXMLPackageInformationClass = class(TXMLNode, IXMLPackageInformationClass)
  private
    FIdentifier: IXMLIdentifierS60List;
    FRawMaterialSet: IXMLIdentifierS60List;
    FPartyIdentifier: IXMLPartyIdentifierList;
    FInformationalQuantity: IXMLInformationalQuantityList;
    FBaleItem: IXMLBaleItemList;
    FBoxItem: IXMLBoxItemList;
    FReelItem: IXMLReelItemList;
    FReamItem: IXMLReamItemList;
    FSheetItem: IXMLSheetItemList;
    FUnitItem: IXMLUnitItemList;
    FWoodItem: IXMLWoodItemList;
    FOtherDate: IXMLOtherDateList;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLPackageInformationClass }
    function Get_PackageType: WideString;
    function Get_MixedProductPalletIndicator: WideString;
    function Get_PackageLevel: WideString;
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_RawMaterialSet: IXMLIdentifierS60List;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_MachineID: WideString;
    function Get_ItemCount: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_InventoryClass: IXMLInventoryClass;
    function Get_PackageCharacteristics: IXMLPackageCharacteristics;
    function Get_BaleItem: IXMLBaleItemList;
    function Get_BoxItem: IXMLBoxItemList;
    function Get_ReelItem: IXMLReelItemList;
    function Get_ReamItem: IXMLReamItemList;
    function Get_SheetItem: IXMLSheetItemList;
    function Get_UnitItem: IXMLUnitItemList;
    function Get_WoodItem: IXMLWoodItemList;
    function Get_OtherDate: IXMLOtherDateList;
    function Get_EAttachment: IXMLEAttachment;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_PackageType(Value: WideString);
    procedure Set_MixedProductPalletIndicator(Value: WideString);
    procedure Set_PackageLevel(Value: WideString);
    procedure Set_MachineID(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLPackageInformationClassList }

  TXMLPackageInformationClassList = class(TXMLNodeCollection, IXMLPackageInformationClassList)
  protected
    { IXMLPackageInformationClassList }
    function Add: IXMLPackageInformationClass;
    function Insert(const Index: Integer): IXMLPackageInformationClass;
    function Get_Item(Index: Integer): IXMLPackageInformationClass;
  end;

{ TXMLInventoryClass }

  TXMLInventoryClass = class(TXMLNode, IXMLInventoryClass)
  private
    FInventoryClassCode: IXMLInventoryClassCodeList;
    FInventoryClassDescription: IXMLS72List;
    FAdditionalText: IXMLS255List;
  protected
    { IXMLInventoryClass }
    function Get_InventoryStatusType: WideString;
    function Get_InventoryOwnedBy: WideString;
    function Get_InventoryClassCode: IXMLInventoryClassCodeList;
    function Get_InventoryClassDescription: IXMLS72List;
    function Get_AdditionalText: IXMLS255List;
    procedure Set_InventoryStatusType(Value: WideString);
    procedure Set_InventoryOwnedBy(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLInventoryClassCode }

  TXMLInventoryClassCode = class(TXMLNode, IXMLInventoryClassCode)
  protected
    { IXMLInventoryClassCode }
    function Get_Agency: WideString;
    function Get_InventoryClassLevel: LongWord;
    procedure Set_Agency(Value: WideString);
    procedure Set_InventoryClassLevel(Value: LongWord);
  end;

{ TXMLInventoryClassCodeList }

  TXMLInventoryClassCodeList = class(TXMLNodeCollection, IXMLInventoryClassCodeList)
  protected
    { IXMLInventoryClassCodeList }
    function Add: IXMLInventoryClassCode;
    function Insert(const Index: Integer): IXMLInventoryClassCode;
    function Get_Item(Index: Integer): IXMLInventoryClassCode;
  end;

{ TXMLPackageCharacteristics }

  TXMLPackageCharacteristics = class(TXMLNode, IXMLPackageCharacteristics)
  protected
    { IXMLPackageCharacteristics }
    function Get_Height: IXMLMeasurement;
    function Get_Width: IXMLMeasurement;
    function Get_Length: IXMLMeasurement;
    function Get_LengthCutDescription: IXMLLengthCutDescription;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBaleItem }

  TXMLBaleItem = class(TXMLNode, IXMLBaleItem)
  private
    FIdentifier: IXMLIdentifierS60List;
    FPartyIdentifier: IXMLPartyIdentifierList;
    FInformationalQuantity: IXMLInformationalQuantityList;
  protected
    { IXMLBaleItem }
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_MachineID: WideString;
    function Get_Product: IXMLProductClass;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_InventoryClass: IXMLInventoryClass;
    procedure Set_MachineID(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBaleItemList }

  TXMLBaleItemList = class(TXMLNodeCollection, IXMLBaleItemList)
  protected
    { IXMLBaleItemList }
    function Add: IXMLBaleItem;
    function Insert(const Index: Integer): IXMLBaleItem;
    function Get_Item(Index: Integer): IXMLBaleItem;
  end;

{ TXMLBoxItem }

  TXMLBoxItem = class(TXMLNode, IXMLBoxItem)
  private
    FIdentifier: IXMLIdentifierS60List;
    FPartyIdentifier: IXMLPartyIdentifierList;
    FInformationalQuantity: IXMLInformationalQuantityList;
    FReamItem: IXMLReamItemList;
    FUnitItem: IXMLUnitItemList;
  protected
    { IXMLBoxItem }
    function Get_MixProductIndicator: WideString;
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_MachineID: WideString;
    function Get_ItemCount: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_ReamItem: IXMLReamItemList;
    function Get_SheetItem: IXMLSheetItem;
    function Get_UnitItem: IXMLUnitItemList;
    function Get_BoxCharacteristics: IXMLBoxCharacteristics;
    function Get_InventoryClass: IXMLInventoryClass;
    procedure Set_MixProductIndicator(Value: WideString);
    procedure Set_MachineID(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLBoxItemList }

  TXMLBoxItemList = class(TXMLNodeCollection, IXMLBoxItemList)
  protected
    { IXMLBoxItemList }
    function Add: IXMLBoxItem;
    function Insert(const Index: Integer): IXMLBoxItem;
    function Get_Item(Index: Integer): IXMLBoxItem;
  end;

{ TXMLReamItem }

  TXMLReamItem = class(TXMLNode, IXMLReamItem)
  private
    FIdentifier: IXMLIdentifierS60List;
    FInformationalQuantity: IXMLInformationalQuantityList;
  protected
    { IXMLReamItem }
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_ItemCount: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_SheetItem: IXMLSheetItem;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLReamItemList }

  TXMLReamItemList = class(TXMLNodeCollection, IXMLReamItemList)
  protected
    { IXMLReamItemList }
    function Add: IXMLReamItem;
    function Insert(const Index: Integer): IXMLReamItem;
    function Get_Item(Index: Integer): IXMLReamItem;
  end;

{ TXMLSheetItem }

  TXMLSheetItem = class(TXMLNode, IXMLSheetItem)
  protected
    { IXMLSheetItem }
    function Get_DateSheeted: IXMLDateSheeted;
    function Get_DateFinished: IXMLDateFinished;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLSheetItemList }

  TXMLSheetItemList = class(TXMLNodeCollection, IXMLSheetItemList)
  protected
    { IXMLSheetItemList }
    function Add: IXMLSheetItem;
    function Insert(const Index: Integer): IXMLSheetItem;
    function Get_Item(Index: Integer): IXMLSheetItem;
  end;

{ TXMLDateSheeted }

  TXMLDateSheeted = class(TXMLNode, IXMLDateSheeted)
  protected
    { IXMLDateSheeted }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDateFinished }

  TXMLDateFinished = class(TXMLNode, IXMLDateFinished)
  protected
    { IXMLDateFinished }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLUnitItem }

  TXMLUnitItem = class(TXMLNode, IXMLUnitItem)
  private
    FInformationalQuantity: IXMLInformationalQuantityList;
  protected
    { IXMLUnitItem }
    function Get_Product: IXMLProductClass;
    function Get_UnitCharacteristics: IXMLUnitCharacteristics;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLUnitItemList }

  TXMLUnitItemList = class(TXMLNodeCollection, IXMLUnitItemList)
  protected
    { IXMLUnitItemList }
    function Add: IXMLUnitItem;
    function Insert(const Index: Integer): IXMLUnitItem;
    function Get_Item(Index: Integer): IXMLUnitItem;
  end;

{ TXMLReelItem }

  TXMLReelItem = class(TXMLNode, IXMLReelItem)
  private
    FIdentifier: IXMLIdentifierS60List;
    FPartyIdentifier: IXMLPartyIdentifierList;
    FInformationalQuantity: IXMLInformationalQuantityList;
  protected
    { IXMLReelItem }
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_MachineID: WideString;
    function Get_DeliveryMessageReelCharacteristics: IXMLDeliveryMessageReelCharacteristics;
    function Get_InventoryClass: IXMLInventoryClass;
    function Get_MillOrderNumber: WideString;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    procedure Set_MachineID(Value: WideString);
    procedure Set_MillOrderNumber(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLReelItemList }

  TXMLReelItemList = class(TXMLNodeCollection, IXMLReelItemList)
  protected
    { IXMLReelItemList }
    function Add: IXMLReelItem;
    function Insert(const Index: Integer): IXMLReelItem;
    function Get_Item(Index: Integer): IXMLReelItem;
  end;

{ TXMLDeliveryMessageReelCharacteristics }

  TXMLDeliveryMessageReelCharacteristics = class(TXMLNode, IXMLDeliveryMessageReelCharacteristics)
  private
    FMillJoinLocation: IXMLMillJoinLocationList;
  protected
    { IXMLDeliveryMessageReelCharacteristics }
    function Get_ReelWidth: IXMLMeasurement;
    function Get_ReelDiameter: IXMLMeasurement;
    function Get_ReelLength: IXMLMeasurement;
    function Get_MachineID: WideString;
    function Get_TambourID: WideString;
    function Get_SetNumber: LongWord;
    function Get_SetPosition: LongWord;
    function Get_TotalSetPositions: LongWord;
    function Get_TotalSetNumbers: LongWord;
    function Get_NumberOfMillJoins: LongWord;
    function Get_MillJoinLocation: IXMLMillJoinLocationList;
    function Get_DateFinished: IXMLDateFinished;
    function Get_DateWound: IXMLDateWound;
    function Get_Caliper: IXMLCaliper;
    procedure Set_MachineID(Value: WideString);
    procedure Set_TambourID(Value: WideString);
    procedure Set_SetNumber(Value: LongWord);
    procedure Set_SetPosition(Value: LongWord);
    procedure Set_TotalSetPositions(Value: LongWord);
    procedure Set_TotalSetNumbers(Value: LongWord);
    procedure Set_NumberOfMillJoins(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMillJoinLocation }

  TXMLMillJoinLocation = class(TXMLNode, IXMLMillJoinLocation)
  protected
    { IXMLMillJoinLocation }
    function Get_MillJoinNumber: LongWord;
    function Get_LengthFromCore: IXMLMeasurement;
    function Get_DistanceFromCore: IXMLMeasurement;
    procedure Set_MillJoinNumber(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLMillJoinLocationList }

  TXMLMillJoinLocationList = class(TXMLNodeCollection, IXMLMillJoinLocationList)
  protected
    { IXMLMillJoinLocationList }
    function Add: IXMLMillJoinLocation;
    function Insert(const Index: Integer): IXMLMillJoinLocation;
    function Get_Item(Index: Integer): IXMLMillJoinLocation;
  end;

{ TXMLDateWound }

  TXMLDateWound = class(TXMLNode, IXMLDateWound)
  protected
    { IXMLDateWound }
    function Get_RewoundIndicator: WideString;
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_RewoundIndicator(Value: WideString);
    procedure Set_Time(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLWoodItem }

  TXMLWoodItem = class(TXMLNode, IXMLWoodItem)
  private
    FLengthSpecification: IXMLLengthSpecificationList;
  protected
    { IXMLWoodItem }
    function Get_Product: IXMLProductClass;
    function Get_PackagingInformation: IXMLProductPackagingClass;
    function Get_ProductSummary: IXMLProductSummary;
    function Get_LengthSpecification: IXMLLengthSpecificationList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLWoodItemList }

  TXMLWoodItemList = class(TXMLNodeCollection, IXMLWoodItemList)
  protected
    { IXMLWoodItemList }
    function Add: IXMLWoodItem;
    function Insert(const Index: Integer): IXMLWoodItem;
    function Get_Item(Index: Integer): IXMLWoodItem;
  end;

{ TXMLProductSummary }

  TXMLProductSummary = class(TXMLNode, IXMLProductSummary)
  private
    FTotalInformationalQuantity: IXMLTotalInformationalQuantityList;
  protected
    { IXMLProductSummary }
    function Get_TotalQuantity: IXMLTotalQuantity;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTotalQuantity }

  TXMLTotalQuantity = class(TXMLMeasurement, IXMLTotalQuantity)
  protected
    { IXMLTotalQuantity }
    function Get_QuantityType: WideString;
    function Get_QuantityTypeContext: WideString;
    function Get_AdjustmentType: WideString;
    procedure Set_QuantityType(Value: WideString);
    procedure Set_QuantityTypeContext(Value: WideString);
    procedure Set_AdjustmentType(Value: WideString);
  end;

{ TXMLTotalQuantityList }

  TXMLTotalQuantityList = class(TXMLNodeCollection, IXMLTotalQuantityList)
  protected
    { IXMLTotalQuantityList }
    function Add: IXMLTotalQuantity;
    function Insert(const Index: Integer): IXMLTotalQuantity;
    function Get_Item(Index: Integer): IXMLTotalQuantity;
  end;

{ TXMLTotalInformationalQuantity }

  TXMLTotalInformationalQuantity = class(TXMLMeasurement, IXMLTotalInformationalQuantity)
  protected
    { IXMLTotalInformationalQuantity }
    function Get_QuantityType: WideString;
    function Get_QuantityTypeContext: WideString;
    function Get_AdjustmentType: WideString;
    procedure Set_QuantityType(Value: WideString);
    procedure Set_QuantityTypeContext(Value: WideString);
    procedure Set_AdjustmentType(Value: WideString);
  end;

{ TXMLTotalInformationalQuantityList }

  TXMLTotalInformationalQuantityList = class(TXMLNodeCollection, IXMLTotalInformationalQuantityList)
  protected
    { IXMLTotalInformationalQuantityList }
    function Add: IXMLTotalInformationalQuantity;
    function Insert(const Index: Integer): IXMLTotalInformationalQuantity;
    function Get_Item(Index: Integer): IXMLTotalInformationalQuantity;
  end;

{ TXMLLengthSpecification }

  TXMLLengthSpecification = class(TXMLNode, IXMLLengthSpecification)
  protected
    { IXMLLengthSpecification }
    function Get_LengthCategory: WideString;
    function Get_TotalNumberOfUnits: IXMLMeasurement;
    procedure Set_LengthCategory(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLLengthSpecificationList }

  TXMLLengthSpecificationList = class(TXMLNodeCollection, IXMLLengthSpecificationList)
  protected
    { IXMLLengthSpecificationList }
    function Add: IXMLLengthSpecification;
    function Insert(const Index: Integer): IXMLLengthSpecification;
    function Get_Item(Index: Integer): IXMLLengthSpecification;
  end;

{ TXMLOtherDate }

  TXMLOtherDate = class(TXMLNode, IXMLOtherDate)
  protected
    { IXMLOtherDate }
    function Get_DateType: WideString;
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    function Get_Week: WideString;
    procedure Set_DateType(Value: WideString);
    procedure Set_Time(Value: WideString);
    procedure Set_Week(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLOtherDateList }

  TXMLOtherDateList = class(TXMLNodeCollection, IXMLOtherDateList)
  protected
    { IXMLOtherDateList }
    function Add: IXMLOtherDate;
    function Insert(const Index: Integer): IXMLOtherDate;
    function Get_Item(Index: Integer): IXMLOtherDate;
  end;

{ TXMLTransportPackageInformation }

  TXMLTransportPackageInformation = class(TXMLNode, IXMLTransportPackageInformation)
  private
    FIdentifier: IXMLIdentifierS60List;
    FRawMaterialSet: IXMLIdentifierS60List;
    FPartyIdentifier: IXMLPartyIdentifierList;
    FInformationalQuantity: IXMLInformationalQuantityList;
    FBaleItem: IXMLBaleItemList;
    FBoxItem: IXMLBoxItemList;
    FReelItem: IXMLReelItemList;
    FReamItem: IXMLReamItemList;
    FSheetItem: IXMLSheetItemList;
    FUnitItem: IXMLUnitItemList;
    FWoodItem: IXMLWoodItemList;
  protected
    { IXMLTransportPackageInformation }
    function Get_PackageType: WideString;
    function Get_MixedProductPalletIndicator: WideString;
    function Get_PackageLevel: WideString;
    function Get_Identifier: IXMLIdentifierS60List;
    function Get_RawMaterialSet: IXMLIdentifierS60List;
    function Get_PartyIdentifier: IXMLPartyIdentifierList;
    function Get_MachineID: WideString;
    function Get_ItemCount: IXMLMeasurement;
    function Get_Quantity: IXMLQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    function Get_InventoryClass: IXMLInventoryClass;
    function Get_TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics;
    function Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristics;
    function Get_PackageCharacteristics: IXMLPackageCharacteristics;
    function Get_BaleItem: IXMLBaleItemList;
    function Get_BoxItem: IXMLBoxItemList;
    function Get_ReelItem: IXMLReelItemList;
    function Get_ReamItem: IXMLReamItemList;
    function Get_SheetItem: IXMLSheetItemList;
    function Get_UnitItem: IXMLUnitItemList;
    function Get_WoodItem: IXMLWoodItemList;
    function Get_OtherDate: IXMLOtherDate;
    procedure Set_PackageType(Value: WideString);
    procedure Set_MixedProductPalletIndicator(Value: WideString);
    procedure Set_PackageLevel(Value: WideString);
    procedure Set_MachineID(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLTransportPackageInformationList }

  TXMLTransportPackageInformationList = class(TXMLNodeCollection, IXMLTransportPackageInformationList)
  protected
    { IXMLTransportPackageInformationList }
    function Add: IXMLTransportPackageInformation;
    function Insert(const Index: Integer): IXMLTransportPackageInformation;
    function Get_Item(Index: Integer): IXMLTransportPackageInformation;
  end;

{ TXMLMeasurementWithText }

  TXMLMeasurementWithText = class(TXMLNode, IXMLMeasurementWithText)
  protected
    { IXMLMeasurementWithText }
    function Get_Value: IXMLValue;
    function Get_RangeMin: IXMLRangeMin;
    function Get_RangeMax: IXMLRangeMax;
    function Get_AdditionalText: WideString;
    procedure Set_AdditionalText(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLProductGroupSummary }

  TXMLProductGroupSummary = class(TXMLNode, IXMLProductGroupSummary)
  private
    FTotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    FLengthSpecification: IXMLLengthSpecificationList;
  protected
    { IXMLProductGroupSummary }
    function Get_TotalQuantity: IXMLTotalQuantity;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    function Get_ProductSummary: IXMLProductSummary;
    function Get_LengthSpecification: IXMLLengthSpecificationList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLShipmentSummary }

  TXMLShipmentSummary = class(TXMLNode, IXMLShipmentSummary)
  private
    FTotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    FLengthSpecification: IXMLLengthSpecificationList;
  protected
    { IXMLShipmentSummary }
    function Get_TotalQuantity: IXMLTotalQuantity;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    function Get_ProductSummary: IXMLProductSummary;
    function Get_LengthSpecification: IXMLLengthSpecificationList;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLDeliveryMessageWoodSummary }

  TXMLDeliveryMessageWoodSummary = class(TXMLNode, IXMLDeliveryMessageWoodSummary)
  private
    FTotalQuantity: IXMLTotalQuantityList;
    FTotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    FLengthSpecification: IXMLLengthSpecificationList;
    FCustomsTotals: IXMLCustomsTotalsList;
    FCustomsStampInformation: IXMLCustomsStampInformationList;
    FTermsAndDisclaimers: IXMLTermsAndDisclaimersList;
  protected
    { IXMLDeliveryMessageWoodSummary }
    function Get_TotalNumberOfShipments: LongWord;
    function Get_TotalQuantity: IXMLTotalQuantityList;
    function Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
    function Get_ProductSummary: IXMLProductSummary;
    function Get_LengthSpecification: IXMLLengthSpecificationList;
    function Get_QuantityDeviation: IXMLMeasurementWithText;
    function Get_CustomsTotals: IXMLCustomsTotalsList;
    function Get_CustomsStampInformation: IXMLCustomsStampInformationList;
    function Get_TermsAndDisclaimers: IXMLTermsAndDisclaimersList;
    procedure Set_TotalNumberOfShipments(Value: LongWord);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCustomsTotals }

  TXMLCustomsTotals = class(TXMLNode, IXMLCustomsTotals)
  private
    FInformationalQuantity: IXMLInformationalQuantityList;
  protected
    { IXMLCustomsTotals }
    function Get_CustomsTariffCode: WideString;
    function Get_TotalQuantity: IXMLTotalQuantity;
    function Get_InformationalQuantity: IXMLInformationalQuantityList;
    procedure Set_CustomsTariffCode(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCustomsTotalsList }

  TXMLCustomsTotalsList = class(TXMLNodeCollection, IXMLCustomsTotalsList)
  protected
    { IXMLCustomsTotalsList }
    function Add: IXMLCustomsTotals;
    function Insert(const Index: Integer): IXMLCustomsTotals;
    function Get_Item(Index: Integer): IXMLCustomsTotals;
  end;

{ TXMLCustomsStampInformation }

  TXMLCustomsStampInformation = class(TXMLNode, IXMLCustomsStampInformation)
  private
    FCustomsStampHeaderText: IXMLS255List;
    FCustomsStampTrailerText: IXMLS255List;
  protected
    { IXMLCustomsStampInformation }
    function Get_CustomsStampHeaderText: IXMLS255List;
    function Get_CustomsParty: IXMLParty;
    function Get_CustomsStampDate: IXMLCustomsStampDate;
    function Get_CustomsReferenceNumber: IXMLCustomsReferenceNumber;
    function Get_SupplierCustomsReference: IXMLSupplierCustomsReference;
    function Get_MillParty: IXMLParty;
    function Get_CustomsStampTrailerText: IXMLS255List;
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCustomsStampInformationList }

  TXMLCustomsStampInformationList = class(TXMLNodeCollection, IXMLCustomsStampInformationList)
  protected
    { IXMLCustomsStampInformationList }
    function Add: IXMLCustomsStampInformation;
    function Insert(const Index: Integer): IXMLCustomsStampInformation;
    function Get_Item(Index: Integer): IXMLCustomsStampInformation;
  end;

{ TXMLCustomsStampDate }

  TXMLCustomsStampDate = class(TXMLNode, IXMLCustomsStampDate)
  protected
    { IXMLCustomsStampDate }
    function Get_Date: IXMLDateBasis;
    function Get_Time: WideString;
    procedure Set_Time(Value: WideString);
  public
    procedure AfterConstruction; override;
  end;

{ TXMLCustomsReferenceNumber }

  TXMLCustomsReferenceNumber = class(TXMLNode, IXMLCustomsReferenceNumber)
  protected
    { IXMLCustomsReferenceNumber }
    function Get_CustomsReferenceNumberType: WideString;
    procedure Set_CustomsReferenceNumberType(Value: WideString);
  end;

{ TXMLSupplierCustomsReference }

  TXMLSupplierCustomsReference = class(TXMLNode, IXMLSupplierCustomsReference)
  protected
    { IXMLSupplierCustomsReference }
    function Get_SupplierCustomsReferenceType: WideString;
    function Get_AssignedBy: WideString;
    procedure Set_SupplierCustomsReferenceType(Value: WideString);
    procedure Set_AssignedBy(Value: WideString);
  end;

{ TXMLTermsAndDisclaimers }

  TXMLTermsAndDisclaimers = class(TXMLNode, IXMLTermsAndDisclaimers)
  protected
    { IXMLTermsAndDisclaimers }
    function Get_Language: WideString;
    procedure Set_Language(Value: WideString);
  end;

{ TXMLTermsAndDisclaimersList }

  TXMLTermsAndDisclaimersList = class(TXMLNodeCollection, IXMLTermsAndDisclaimersList)
  protected
    { IXMLTermsAndDisclaimersList }
    function Add: IXMLTermsAndDisclaimers;
    function Insert(const Index: Integer): IXMLTermsAndDisclaimers;
    function Get_Item(Index: Integer): IXMLTermsAndDisclaimers;
  end;

{ TXMLS255List }

  TXMLS255List = class(TXMLNodeCollection, IXMLS255List)
  protected
    { IXMLS255List }
    function Add(const Value: WideString): IXMLNode;
    function Insert(const Index: Integer; const Value: WideString): IXMLNode;
    function Get_Item(Index: Integer): WideString;
  end;

{ TXMLS60List }

  TXMLS60List = class(TXMLNodeCollection, IXMLS60List)
  protected
    { IXMLS60List }
    function Add(const Value: WideString): IXMLNode;
    function Insert(const Index: Integer; const Value: WideString): IXMLNode;
    function Get_Item(Index: Integer): WideString;
  end;

{ TXMLAnyURIList }

  TXMLAnyURIList = class(TXMLNodeCollection, IXMLAnyURIList)
  protected
    { IXMLAnyURIList }
    function Add(const Value: WideString): IXMLNode;
    function Insert(const Index: Integer; const Value: WideString): IXMLNode;
    function Get_Item(Index: Integer): WideString;
  end;

{ TXMLS72List }

  TXMLS72List = class(TXMLNodeCollection, IXMLS72List)
  protected
    { IXMLS72List }
    function Add(const Value: WideString): IXMLNode;
    function Insert(const Index: Integer; const Value: WideString): IXMLNode;
    function Get_Item(Index: Integer): WideString;
  end;

{ TXMLS20List }

  TXMLS20List = class(TXMLNodeCollection, IXMLS20List)
  protected
    { IXMLS20List }
    function Add(const Value: WideString): IXMLNode;
    function Insert(const Index: Integer; const Value: WideString): IXMLNode;
    function Get_Item(Index: Integer): WideString;
  end;

{ TXMLNni1List }

  TXMLNni1List = class(TXMLNodeCollection, IXMLNni1List)
  protected
    { IXMLNni1List }
    function Add(const Value: LongWord): IXMLNode;
    function Insert(const Index: Integer; const Value: LongWord): IXMLNode;
    function Get_Item(Index: Integer): LongWord;
  end;

{ TXMLHolePunchTemplateReferenceTypeList }

  TXMLHolePunchTemplateReferenceTypeList = class(TXMLNodeCollection, IXMLHolePunchTemplateReferenceTypeList)
  protected
    { IXMLHolePunchTemplateReferenceTypeList }
    function Add(const Value: WideString): IXMLNode;
    function Insert(const Index: Integer; const Value: WideString): IXMLNode;
    function Get_Item(Index: Integer): WideString;
  end;

{ TXMLReamTypeList }

  TXMLReamTypeList = class(TXMLNodeCollection, IXMLReamTypeList)
  protected
    { IXMLReamTypeList }
    function Add(const Value: WideString): IXMLNode;
    function Insert(const Index: Integer; const Value: WideString): IXMLNode;
    function Get_Item(Index: Integer): WideString;
  end;

{ TXMLPlywoodOSBSpeciesTypeList }

  TXMLPlywoodOSBSpeciesTypeList = class(TXMLNodeCollection, IXMLPlywoodOSBSpeciesTypeList)
  protected
    { IXMLPlywoodOSBSpeciesTypeList }
    function Add(const Value: WideString): IXMLNode;
    function Insert(const Index: Integer; const Value: WideString): IXMLNode;
    function Get_Item(Index: Integer): WideString;
  end;

function GetDeliveryMessageWood(Doc: IXMLDocument): IXMLDeliveryMessageWood;
function LoadDeliveryMessageWood(const FileName: WideString): IXMLDeliveryMessageWood;

const
  TargetNamespace = '';


implementation

uses
   SysUtils;

function GetDeliveryMessageWood(Doc: IXMLDocument): IXMLDeliveryMessageWood;
begin
  Result := Doc.GetDocBinding('DeliveryMessageWood', TXMLDeliveryMessageWood, TargetNamespace) as IXMLDeliveryMessageWood;
end;

function LoadDeliveryMessageWood(const FileName: WideString): IXMLDeliveryMessageWood;
begin
  Result := LoadXMLDocument(FileName).GetDocBinding('DeliveryMessageWood', TXMLDeliveryMessageWood, TargetNamespace) as IXMLDeliveryMessageWood;
end;

{ TXMLDeliveryMessageWood }

procedure TXMLDeliveryMessageWood.AfterConstruction;
begin
  RegisterChildNode('DeliveryMessageWoodHeader', TXMLDeliveryMessageWoodHeader);
  RegisterChildNode('DeliveryMessageShipment', TXMLDeliveryMessageShipment);
  RegisterChildNode('DeliveryMessageWoodSummary', TXMLDeliveryMessageWoodSummary);
  FDeliveryMessageShipment := CreateCollection(TXMLDeliveryMessageShipmentList, IXMLDeliveryMessageShipment, 'DeliveryMessageShipment') as IXMLDeliveryMessageShipmentList;
  inherited;
end;

function TXMLDeliveryMessageWood.Get_DeliveryMessageType: WideString;
begin
  Result := AttributeNodes['DeliveryMessageType'].Text;
end;

procedure TXMLDeliveryMessageWood.Set_DeliveryMessageType(Value: WideString);
begin
  SetAttribute('DeliveryMessageType', Value);
end;

function TXMLDeliveryMessageWood.Get_DeliveryMessageStatusType: WideString;
begin
  Result := AttributeNodes['DeliveryMessageStatusType'].Text;
end;

procedure TXMLDeliveryMessageWood.Set_DeliveryMessageStatusType(Value: WideString);
begin
  SetAttribute('DeliveryMessageStatusType', Value);
end;

function TXMLDeliveryMessageWood.Get_Reissued: WideString;
begin
  Result := AttributeNodes['Reissued'].Text;
end;

procedure TXMLDeliveryMessageWood.Set_Reissued(Value: WideString);
begin
  SetAttribute('Reissued', Value);
end;

function TXMLDeliveryMessageWood.Get_Language: WideString;
begin
  Result := AttributeNodes['Language'].Text;
end;

procedure TXMLDeliveryMessageWood.Set_Language(Value: WideString);
begin
  SetAttribute('Language', Value);
end;

function TXMLDeliveryMessageWood.Get_DeliveryMessageWoodHeader: IXMLDeliveryMessageWoodHeader;
begin
  Result := ChildNodes['DeliveryMessageWoodHeader'] as IXMLDeliveryMessageWoodHeader;
end;

function TXMLDeliveryMessageWood.Get_DeliveryMessageShipment: IXMLDeliveryMessageShipmentList;
begin
  Result := FDeliveryMessageShipment;
end;

function TXMLDeliveryMessageWood.Get_DeliveryMessageWoodSummary: IXMLDeliveryMessageWoodSummary;
begin
  Result := ChildNodes['DeliveryMessageWoodSummary'] as IXMLDeliveryMessageWoodSummary;
end;

{ TXMLDeliveryMessageWoodHeader }

procedure TXMLDeliveryMessageWoodHeader.AfterConstruction;
begin
  RegisterChildNode('DeliveryMessageDate', TXMLDeliveryMessageDate);
  RegisterChildNode('DeliveryMessageReference', TXMLDeliveryMessageReference);
  RegisterChildNode('DocumentReferenceInformation', TXMLDocumentReferenceInformation);
  RegisterChildNode('BuyerParty', TXMLParty);
  RegisterChildNode('BillToParty', TXMLParty);
  RegisterChildNode('SupplierParty', TXMLParty);
  RegisterChildNode('OtherParty', TXMLTypedParty);
  RegisterChildNode('SenderParty', TXMLTypedParty);
  RegisterChildNode('ReceiverParty', TXMLTypedParty);
  RegisterChildNode('ShipToInformation', TXMLShipToInformation);
  RegisterChildNode('CountryOfOrigin', TXMLCountryOfOrigin);
  RegisterChildNode('CountryOfDestination', TXMLCountryOfDestination);
  RegisterChildNode('CountryOfConsumption', TXMLCountryOfConsumption);
  RegisterChildNode('Insurance', TXMLInsurance);
  RegisterChildNode('DocumentInformation', TXMLDocumentInformation);
  FDeliveryMessageReference := CreateCollection(TXMLDeliveryMessageReferenceList, IXMLDeliveryMessageReference, 'DeliveryMessageReference') as IXMLDeliveryMessageReferenceList;
  FDocumentReferenceInformation := CreateCollection(TXMLDocumentReferenceInformationList, IXMLDocumentReferenceInformation, 'DocumentReferenceInformation') as IXMLDocumentReferenceInformationList;
  FOtherParty := CreateCollection(TXMLTypedPartyList, IXMLTypedParty, 'OtherParty') as IXMLTypedPartyList;
  FReceiverParty := CreateCollection(TXMLTypedPartyList, IXMLTypedParty, 'ReceiverParty') as IXMLTypedPartyList;
  FShipToInformation := CreateCollection(TXMLShipToInformationList, IXMLShipToInformation, 'ShipToInformation') as IXMLShipToInformationList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  FDocumentInformation := CreateCollection(TXMLDocumentInformationList, IXMLDocumentInformation, 'DocumentInformation') as IXMLDocumentInformationList;
  inherited;
end;

function TXMLDeliveryMessageWoodHeader.Get_DeliveryMessageNumber: WideString;
begin
  Result := ChildNodes['DeliveryMessageNumber'].Text;
end;

procedure TXMLDeliveryMessageWoodHeader.Set_DeliveryMessageNumber(Value: WideString);
begin
  ChildNodes['DeliveryMessageNumber'].NodeValue := Value;
end;

function TXMLDeliveryMessageWoodHeader.Get_TransactionHistoryNumber: LongWord;
begin
  Result := ChildNodes['TransactionHistoryNumber'].NodeValue;
end;

procedure TXMLDeliveryMessageWoodHeader.Set_TransactionHistoryNumber(Value: LongWord);
begin
  ChildNodes['TransactionHistoryNumber'].NodeValue := Value;
end;

function TXMLDeliveryMessageWoodHeader.Get_DeliveryMessageDate: IXMLDeliveryMessageDate;
begin
  Result := ChildNodes['DeliveryMessageDate'] as IXMLDeliveryMessageDate;
end;

function TXMLDeliveryMessageWoodHeader.Get_DeliveryMessageReference: IXMLDeliveryMessageReferenceList;
begin
  Result := FDeliveryMessageReference;
end;

function TXMLDeliveryMessageWoodHeader.Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
begin
  Result := FDocumentReferenceInformation;
end;

function TXMLDeliveryMessageWoodHeader.Get_BuyerParty: IXMLParty;
begin
  Result := ChildNodes['BuyerParty'] as IXMLParty;
end;

function TXMLDeliveryMessageWoodHeader.Get_BillToParty: IXMLParty;
begin
  Result := ChildNodes['BillToParty'] as IXMLParty;
end;

function TXMLDeliveryMessageWoodHeader.Get_SupplierParty: IXMLParty;
begin
  Result := ChildNodes['SupplierParty'] as IXMLParty;
end;

function TXMLDeliveryMessageWoodHeader.Get_OtherParty: IXMLTypedPartyList;
begin
  Result := FOtherParty;
end;

function TXMLDeliveryMessageWoodHeader.Get_SenderParty: IXMLTypedParty;
begin
  Result := ChildNodes['SenderParty'] as IXMLTypedParty;
end;

function TXMLDeliveryMessageWoodHeader.Get_ReceiverParty: IXMLTypedPartyList;
begin
  Result := FReceiverParty;
end;

function TXMLDeliveryMessageWoodHeader.Get_ShipToInformation: IXMLShipToInformationList;
begin
  Result := FShipToInformation;
end;

function TXMLDeliveryMessageWoodHeader.Get_CountryOfOrigin: IXMLCountryOfOrigin;
begin
  Result := ChildNodes['CountryOfOrigin'] as IXMLCountryOfOrigin;
end;

function TXMLDeliveryMessageWoodHeader.Get_CountryOfDestination: IXMLCountryOfDestination;
begin
  Result := ChildNodes['CountryOfDestination'] as IXMLCountryOfDestination;
end;

function TXMLDeliveryMessageWoodHeader.Get_CountryOfConsumption: IXMLCountryOfConsumption;
begin
  Result := ChildNodes['CountryOfConsumption'] as IXMLCountryOfConsumption;
end;

function TXMLDeliveryMessageWoodHeader.Get_Insurance: IXMLInsurance;
begin
  Result := ChildNodes['Insurance'] as IXMLInsurance;
end;

function TXMLDeliveryMessageWoodHeader.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLDeliveryMessageWoodHeader.Get_DocumentInformation: IXMLDocumentInformationList;
begin
  Result := FDocumentInformation;
end;

{ TXMLDeliveryMessageDate }

procedure TXMLDeliveryMessageDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDeliveryMessageDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDeliveryMessageDate.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDeliveryMessageDate.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLDateBasis }

function TXMLDateBasis.Get_Year: WideString;
begin
  Result := ChildNodes['Year'].Text;
end;

procedure TXMLDateBasis.Set_Year(Value: WideString);
begin
  ChildNodes['Year'].NodeValue := Value;
end;

function TXMLDateBasis.Get_Month: LongWord;
begin
  Result := ChildNodes['Month'].NodeValue;
end;

procedure TXMLDateBasis.Set_Month(Value: LongWord);
begin
//  ChildNodes['Month'].NodeValue := Value;
  ChildNodes['Month'].NodeValue := FormatFloat('00', Value);
end;

function TXMLDateBasis.Get_Day: LongWord;
begin
  Result := ChildNodes['Day'].NodeValue;
end;

procedure TXMLDateBasis.Set_Day(Value: LongWord);
begin
//  ChildNodes['Day'].NodeValue := Value;
  ChildNodes['Day'].NodeValue := FormatFloat('00', Value);
end;

{ TXMLDeliveryMessageReference }

function TXMLDeliveryMessageReference.Get_DeliveryMessageReferenceType: WideString;
begin
  Result := AttributeNodes['DeliveryMessageReferenceType'].Text;
end;

procedure TXMLDeliveryMessageReference.Set_DeliveryMessageReferenceType(Value: WideString);
begin
  SetAttribute('DeliveryMessageReferenceType', Value);
end;

function TXMLDeliveryMessageReference.Get_AssignedBy: WideString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLDeliveryMessageReference.Set_AssignedBy(Value: WideString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLDeliveryMessageReferenceList }

function TXMLDeliveryMessageReferenceList.Add: IXMLDeliveryMessageReference;
begin
  Result := AddItem(-1) as IXMLDeliveryMessageReference;
end;

function TXMLDeliveryMessageReferenceList.Insert(const Index: Integer): IXMLDeliveryMessageReference;
begin
  Result := AddItem(Index) as IXMLDeliveryMessageReference;
end;
function TXMLDeliveryMessageReferenceList.Get_Item(Index: Integer): IXMLDeliveryMessageReference;
begin
  Result := List[Index] as IXMLDeliveryMessageReference;
end;

{ TXMLDocumentReferenceInformation }

procedure TXMLDocumentReferenceInformation.AfterConstruction;
begin
  RegisterChildNode('DocumentReferenceID', TXMLDocumentReferenceID);
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDocumentReferenceInformation.Get_DocumentReferenceID: IXMLDocumentReferenceID;
begin
  Result := ChildNodes['DocumentReferenceID'] as IXMLDocumentReferenceID;
end;

function TXMLDocumentReferenceInformation.Get_DocumentReferenceIDLineItemNumber: LongWord;
begin
  Result := ChildNodes['DocumentReferenceIDLineItemNumber'].NodeValue;
end;

procedure TXMLDocumentReferenceInformation.Set_DocumentReferenceIDLineItemNumber(Value: LongWord);
begin
  ChildNodes['DocumentReferenceIDLineItemNumber'].NodeValue := Value;
end;

function TXMLDocumentReferenceInformation.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDocumentReferenceInformation.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDocumentReferenceInformation.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

function TXMLDocumentReferenceInformation.Get_NumberOfDocumentsRequired: LongWord;
begin
  Result := ChildNodes['NumberOfDocumentsRequired'].NodeValue;
end;

procedure TXMLDocumentReferenceInformation.Set_NumberOfDocumentsRequired(Value: LongWord);
begin
  ChildNodes['NumberOfDocumentsRequired'].NodeValue := Value;
end;

{ TXMLDocumentReferenceInformationList }

function TXMLDocumentReferenceInformationList.Add: IXMLDocumentReferenceInformation;
begin
  Result := AddItem(-1) as IXMLDocumentReferenceInformation;
end;

function TXMLDocumentReferenceInformationList.Insert(const Index: Integer): IXMLDocumentReferenceInformation;
begin
  Result := AddItem(Index) as IXMLDocumentReferenceInformation;
end;
function TXMLDocumentReferenceInformationList.Get_Item(Index: Integer): IXMLDocumentReferenceInformation;
begin
  Result := List[Index] as IXMLDocumentReferenceInformation;
end;

{ TXMLDocumentReferenceID }

function TXMLDocumentReferenceID.Get_DocumentReferenceIDType: WideString;
begin
  Result := AttributeNodes['DocumentReferenceIDType'].Text;
end;

procedure TXMLDocumentReferenceID.Set_DocumentReferenceIDType(Value: WideString);
begin
  SetAttribute('DocumentReferenceIDType', Value);
end;

function TXMLDocumentReferenceID.Get_AssignedBy: WideString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLDocumentReferenceID.Set_AssignedBy(Value: WideString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLParty }

procedure TXMLParty.AfterConstruction;
begin
  RegisterChildNode('PartyIdentifier', TXMLPartyIdentifier);
  RegisterChildNode('NameAddress', TXMLNameAddress);
  RegisterChildNode('CommonContact', TXMLCommonContact);
  FPartyIdentifier := CreateCollection(TXMLPartyIdentifierList, IXMLPartyIdentifier, 'PartyIdentifier') as IXMLPartyIdentifierList;
  FCommonContact := CreateCollection(TXMLCommonContactList, IXMLCommonContact, 'CommonContact') as IXMLCommonContactList;
  inherited;
end;

function TXMLParty.Get_LogisticsRole: WideString;
begin
  Result := AttributeNodes['LogisticsRole'].Text;
end;

procedure TXMLParty.Set_LogisticsRole(Value: WideString);
begin
  SetAttribute('LogisticsRole', Value);
end;

function TXMLParty.Get_PartyIdentifier: IXMLPartyIdentifierList;
begin
  Result := FPartyIdentifier;
end;

function TXMLParty.Get_NameAddress: IXMLNameAddress;
begin
  Result := ChildNodes['NameAddress'] as IXMLNameAddress;
end;

function TXMLParty.Get_URL: WideString;
begin
  Result := ChildNodes['URL'].Text;
end;

procedure TXMLParty.Set_URL(Value: WideString);
begin
  ChildNodes['URL'].NodeValue := Value;
end;

function TXMLParty.Get_CommonContact: IXMLCommonContactList;
begin
  Result := FCommonContact;
end;

{ TXMLPartyIdentifier }

function TXMLPartyIdentifier.Get_PartyIdentifierType: WideString;
begin
  Result := AttributeNodes['PartyIdentifierType'].Text;
end;

procedure TXMLPartyIdentifier.Set_PartyIdentifierType(Value: WideString);
begin
  SetAttribute('PartyIdentifierType', Value);
end;

{ TXMLPartyIdentifierList }

function TXMLPartyIdentifierList.Add: IXMLPartyIdentifier;
begin
  Result := AddItem(-1) as IXMLPartyIdentifier;
end;

function TXMLPartyIdentifierList.Insert(const Index: Integer): IXMLPartyIdentifier;
begin
  Result := AddItem(Index) as IXMLPartyIdentifier;
end;
function TXMLPartyIdentifierList.Get_Item(Index: Integer): IXMLPartyIdentifier;
begin
  Result := List[Index] as IXMLPartyIdentifier;
end;

{ TXMLNameAddress }

procedure TXMLNameAddress.AfterConstruction;
begin
  RegisterChildNode('OrganisationUnit', TXMLOrganisationUnit);
  RegisterChildNode('PostalCode', TXMLPostalCode);
  RegisterChildNode('Country', TXMLCountry);
  RegisterChildNode('GPSCoordinates', TXMLGPSCoordinates);
  inherited;
end;

function TXMLNameAddress.Get_CommunicationRole: WideString;
begin
  Result := AttributeNodes['CommunicationRole'].Text;
end;

procedure TXMLNameAddress.Set_CommunicationRole(Value: WideString);
begin
  SetAttribute('CommunicationRole', Value);
end;

function TXMLNameAddress.Get_Name1: WideString;
begin
  Result := ChildNodes['Name1'].Text;
end;

procedure TXMLNameAddress.Set_Name1(Value: WideString);
begin
  ChildNodes['Name1'].NodeValue := Value;
end;

function TXMLNameAddress.Get_Name2: WideString;
begin
  Result := ChildNodes['Name2'].Text;
end;

procedure TXMLNameAddress.Set_Name2(Value: WideString);
begin
  ChildNodes['Name2'].NodeValue := Value;
end;

function TXMLNameAddress.Get_Name3: WideString;
begin
  Result := ChildNodes['Name3'].Text;
end;

procedure TXMLNameAddress.Set_Name3(Value: WideString);
begin
  ChildNodes['Name3'].NodeValue := Value;
end;

function TXMLNameAddress.Get_OrganisationUnit: IXMLOrganisationUnit;
begin
  Result := ChildNodes['OrganisationUnit'] as IXMLOrganisationUnit;
end;

function TXMLNameAddress.Get_Address1: WideString;
begin
  Result := ChildNodes['Address1'].Text;
end;

procedure TXMLNameAddress.Set_Address1(Value: WideString);
begin
  ChildNodes['Address1'].NodeValue := Value;
end;

function TXMLNameAddress.Get_Address2: WideString;
begin
  Result := ChildNodes['Address2'].Text;
end;

procedure TXMLNameAddress.Set_Address2(Value: WideString);
begin
  ChildNodes['Address2'].NodeValue := Value;
end;

function TXMLNameAddress.Get_Address3: WideString;
begin
  Result := ChildNodes['Address3'].Text;
end;

procedure TXMLNameAddress.Set_Address3(Value: WideString);
begin
  ChildNodes['Address3'].NodeValue := Value;
end;

function TXMLNameAddress.Get_Address4: WideString;
begin
  Result := ChildNodes['Address4'].Text;
end;

procedure TXMLNameAddress.Set_Address4(Value: WideString);
begin
  ChildNodes['Address4'].NodeValue := Value;
end;

function TXMLNameAddress.Get_City: WideString;
begin
  Result := ChildNodes['City'].Text;
end;

procedure TXMLNameAddress.Set_City(Value: WideString);
begin
  ChildNodes['City'].NodeValue := Value;
end;

function TXMLNameAddress.Get_County: WideString;
begin
  Result := ChildNodes['County'].Text;
end;

procedure TXMLNameAddress.Set_County(Value: WideString);
begin
  ChildNodes['County'].NodeValue := Value;
end;

function TXMLNameAddress.Get_StateOrProvince: WideString;
begin
  Result := ChildNodes['StateOrProvince'].Text;
end;

procedure TXMLNameAddress.Set_StateOrProvince(Value: WideString);
begin
  ChildNodes['StateOrProvince'].NodeValue := Value;
end;

function TXMLNameAddress.Get_PostalCode: IXMLPostalCode;
begin
  Result := ChildNodes['PostalCode'] as IXMLPostalCode;
end;

function TXMLNameAddress.Get_Country: IXMLCountry;
begin
  Result := ChildNodes['Country'] as IXMLCountry;
end;

function TXMLNameAddress.Get_GPSCoordinates: IXMLGPSCoordinates;
begin
  Result := ChildNodes['GPSCoordinates'] as IXMLGPSCoordinates;
end;

{ TXMLOrganisationUnit }

function TXMLOrganisationUnit.Get_OrganisationUnitType: WideString;
begin
  Result := AttributeNodes['OrganisationUnitType'].Text;
end;

procedure TXMLOrganisationUnit.Set_OrganisationUnitType(Value: WideString);
begin
  SetAttribute('OrganisationUnitType', Value);
end;

function TXMLOrganisationUnit.Get_OrganisationUnitName: WideString;
begin
  Result := ChildNodes['OrganisationUnitName'].Text;
end;

procedure TXMLOrganisationUnit.Set_OrganisationUnitName(Value: WideString);
begin
  ChildNodes['OrganisationUnitName'].NodeValue := Value;
end;

function TXMLOrganisationUnit.Get_OrganisationUnitCode: WideString;
begin
  Result := ChildNodes['OrganisationUnitCode'].Text;
end;

procedure TXMLOrganisationUnit.Set_OrganisationUnitCode(Value: WideString);
begin
  ChildNodes['OrganisationUnitCode'].NodeValue := Value;
end;

{ TXMLPostalCode }

{ TXMLCountry }

function TXMLCountry.Get_ISOCountryCode: WideString;
begin
  Result := AttributeNodes['ISOCountryCode'].Text;
end;

procedure TXMLCountry.Set_ISOCountryCode(Value: WideString);
begin
  SetAttribute('ISOCountryCode', Value);
end;

{ TXMLGPSCoordinates }

procedure TXMLGPSCoordinates.AfterConstruction;
begin
  RegisterChildNode('Height', TXMLMeasurement);
  inherited;
end;

function TXMLGPSCoordinates.Get_GPSSystem: WideString;
begin
  Result := AttributeNodes['GPSSystem'].Text;
end;

procedure TXMLGPSCoordinates.Set_GPSSystem(Value: WideString);
begin
  SetAttribute('GPSSystem', Value);
end;

function TXMLGPSCoordinates.Get_Latitude: WideString;
begin
  Result := ChildNodes['Latitude'].Text;
end;

procedure TXMLGPSCoordinates.Set_Latitude(Value: WideString);
begin
  ChildNodes['Latitude'].NodeValue := Value;
end;

function TXMLGPSCoordinates.Get_Longitude: WideString;
begin
  Result := ChildNodes['Longitude'].Text;
end;

procedure TXMLGPSCoordinates.Set_Longitude(Value: WideString);
begin
  ChildNodes['Longitude'].NodeValue := Value;
end;

function TXMLGPSCoordinates.Get_Height: IXMLMeasurement;
begin
  Result := ChildNodes['Height'] as IXMLMeasurement;
end;

{ TXMLMeasurement }

procedure TXMLMeasurement.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  RegisterChildNode('RangeMin', TXMLRangeMin);
  RegisterChildNode('RangeMax', TXMLRangeMax);
  inherited;
end;

function TXMLMeasurement.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

function TXMLMeasurement.Get_RangeMin: IXMLRangeMin;
begin
  Result := ChildNodes['RangeMin'] as IXMLRangeMin;
end;

function TXMLMeasurement.Get_RangeMax: IXMLRangeMax;
begin
  Result := ChildNodes['RangeMax'] as IXMLRangeMax;
end;

{ TXMLMeasurementList }

function TXMLMeasurementList.Add: IXMLMeasurement;
begin
  Result := AddItem(-1) as IXMLMeasurement;
end;

function TXMLMeasurementList.Insert(const Index: Integer): IXMLMeasurement;
begin
  Result := AddItem(Index) as IXMLMeasurement;
end;
function TXMLMeasurementList.Get_Item(Index: Integer): IXMLMeasurement;
begin
  Result := List[Index] as IXMLMeasurement;
end;

{ TXMLValue }

function TXMLValue.Get_UOM: WideString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLValue.Set_UOM(Value: WideString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLRangeMin }

function TXMLRangeMin.Get_UOM: WideString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLRangeMin.Set_UOM(Value: WideString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLRangeMax }

function TXMLRangeMax.Get_UOM: WideString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLRangeMax.Set_UOM(Value: WideString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLCommonContact }

procedure TXMLCommonContact.AfterConstruction;
begin
  RegisterChildNode('GPSCoordinates', TXMLGPSCoordinates);
  inherited;
end;

function TXMLCommonContact.Get_ContactType: WideString;
begin
  Result := AttributeNodes['ContactType'].Text;
end;

procedure TXMLCommonContact.Set_ContactType(Value: WideString);
begin
  SetAttribute('ContactType', Value);
end;

function TXMLCommonContact.Get_ContactName: WideString;
begin
  Result := ChildNodes['ContactName'].Text;
end;

procedure TXMLCommonContact.Set_ContactName(Value: WideString);
begin
  ChildNodes['ContactName'].NodeValue := Value;
end;

function TXMLCommonContact.Get_Telephone: WideString;
begin
  Result := ChildNodes['Telephone'].Text;
end;

procedure TXMLCommonContact.Set_Telephone(Value: WideString);
begin
  ChildNodes['Telephone'].NodeValue := Value;
end;

function TXMLCommonContact.Get_MobilePhone: WideString;
begin
  Result := ChildNodes['MobilePhone'].Text;
end;

procedure TXMLCommonContact.Set_MobilePhone(Value: WideString);
begin
  ChildNodes['MobilePhone'].NodeValue := Value;
end;

function TXMLCommonContact.Get_Email: WideString;
begin
  Result := ChildNodes['Email'].Text;
end;

procedure TXMLCommonContact.Set_Email(Value: WideString);
begin
  ChildNodes['Email'].NodeValue := Value;
end;

function TXMLCommonContact.Get_Fax: WideString;
begin
  Result := ChildNodes['Fax'].Text;
end;

procedure TXMLCommonContact.Set_Fax(Value: WideString);
begin
  ChildNodes['Fax'].NodeValue := Value;
end;

function TXMLCommonContact.Get_GPSCoordinates: IXMLGPSCoordinates;
begin
  Result := ChildNodes['GPSCoordinates'] as IXMLGPSCoordinates;
end;

{ TXMLCommonContactList }

function TXMLCommonContactList.Add: IXMLCommonContact;
begin
  Result := AddItem(-1) as IXMLCommonContact;
end;

function TXMLCommonContactList.Insert(const Index: Integer): IXMLCommonContact;
begin
  Result := AddItem(Index) as IXMLCommonContact;
end;
function TXMLCommonContactList.Get_Item(Index: Integer): IXMLCommonContact;
begin
  Result := List[Index] as IXMLCommonContact;
end;

{ TXMLTypedParty }

function TXMLTypedParty.Get_PartyType: WideString;
begin
  Result := AttributeNodes['PartyType'].Text;
end;

procedure TXMLTypedParty.Set_PartyType(Value: WideString);
begin
  SetAttribute('PartyType', Value);
end;

{ TXMLTypedPartyList }

function TXMLTypedPartyList.Add: IXMLTypedParty;
begin
  Result := AddItem(-1) as IXMLTypedParty;
end;

function TXMLTypedPartyList.Insert(const Index: Integer): IXMLTypedParty;
begin
  Result := AddItem(Index) as IXMLTypedParty;
end;
function TXMLTypedPartyList.Get_Item(Index: Integer): IXMLTypedParty;
begin
  Result := List[Index] as IXMLTypedParty;
end;

{ TXMLShipToInformation }

procedure TXMLShipToInformation.AfterConstruction;
begin
  RegisterChildNode('ShipToCharacteristics', TXMLShipToCharacteristics);
  RegisterChildNode('DeliverySchedule', TXMLDeliverySchedule);
  FDeliverySchedule := CreateCollection(TXMLDeliveryScheduleList, IXMLDeliverySchedule, 'DeliverySchedule') as IXMLDeliveryScheduleList;
  inherited;
end;

function TXMLShipToInformation.Get_ShipToCharacteristics: IXMLShipToCharacteristics;
begin
  Result := ChildNodes['ShipToCharacteristics'] as IXMLShipToCharacteristics;
end;

function TXMLShipToInformation.Get_DeliverySchedule: IXMLDeliveryScheduleList;
begin
  Result := FDeliverySchedule;
end;

{ TXMLShipToInformationList }

function TXMLShipToInformationList.Add: IXMLShipToInformation;
begin
  Result := AddItem(-1) as IXMLShipToInformation;
end;

function TXMLShipToInformationList.Insert(const Index: Integer): IXMLShipToInformation;
begin
  Result := AddItem(Index) as IXMLShipToInformation;
end;
function TXMLShipToInformationList.Get_Item(Index: Integer): IXMLShipToInformation;
begin
  Result := List[Index] as IXMLShipToInformation;
end;

{ TXMLShipToCharacteristics }

procedure TXMLShipToCharacteristics.AfterConstruction;
begin
  RegisterChildNode('ShipToParty', TXMLTypedParty);
  RegisterChildNode('LocationCode', TXMLLocationCode);
  RegisterChildNode('TermsOfDelivery', TXMLTermsOfDelivery);
  RegisterChildNode('DeliveryRouteCode', TXMLDeliveryRouteCode);
  inherited;
end;

function TXMLShipToCharacteristics.Get_ShipToParty: IXMLTypedParty;
begin
  Result := ChildNodes['ShipToParty'] as IXMLTypedParty;
end;

function TXMLShipToCharacteristics.Get_LocationCode: IXMLLocationCode;
begin
  Result := ChildNodes['LocationCode'] as IXMLLocationCode;
end;

function TXMLShipToCharacteristics.Get_TermsOfDelivery: IXMLTermsOfDelivery;
begin
  Result := ChildNodes['TermsOfDelivery'] as IXMLTermsOfDelivery;
end;

function TXMLShipToCharacteristics.Get_DeliveryRouteCode: IXMLDeliveryRouteCode;
begin
  Result := ChildNodes['DeliveryRouteCode'] as IXMLDeliveryRouteCode;
end;

{ TXMLLocationCode }

function TXMLLocationCode.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLLocationCode.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLTermsOfDelivery }

procedure TXMLTermsOfDelivery.AfterConstruction;
begin
  RegisterChildNode('IncotermsLocation', TXMLIncotermsLocation);
  RegisterChildNode('ShipmentMethodOfPayment', TXMLShipmentMethodOfPayment);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLTermsOfDelivery.Get_IncotermsLocation: IXMLIncotermsLocation;
begin
  Result := ChildNodes['IncotermsLocation'] as IXMLIncotermsLocation;
end;

function TXMLTermsOfDelivery.Get_ShipmentMethodOfPayment: IXMLShipmentMethodOfPayment;
begin
  Result := ChildNodes['ShipmentMethodOfPayment'] as IXMLShipmentMethodOfPayment;
end;

function TXMLTermsOfDelivery.Get_FreightPayableAt: WideString;
begin
  Result := ChildNodes['FreightPayableAt'].Text;
end;

procedure TXMLTermsOfDelivery.Set_FreightPayableAt(Value: WideString);
begin
  ChildNodes['FreightPayableAt'].NodeValue := Value;
end;

function TXMLTermsOfDelivery.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLIncotermsLocation }

function TXMLIncotermsLocation.Get_Incoterms: WideString;
begin
  Result := AttributeNodes['Incoterms'].Text;
end;

procedure TXMLIncotermsLocation.Set_Incoterms(Value: WideString);
begin
  SetAttribute('Incoterms', Value);
end;

function TXMLIncotermsLocation.Get_IncotermsVersion: WideString;
begin
  Result := AttributeNodes['IncotermsVersion'].Text;
end;

procedure TXMLIncotermsLocation.Set_IncotermsVersion(Value: WideString);
begin
  SetAttribute('IncotermsVersion', Value);
end;

{ TXMLShipmentMethodOfPayment }

function TXMLShipmentMethodOfPayment.Get_LocationQualifier: WideString;
begin
  Result := AttributeNodes['LocationQualifier'].Text;
end;

procedure TXMLShipmentMethodOfPayment.Set_LocationQualifier(Value: WideString);
begin
  SetAttribute('LocationQualifier', Value);
end;

function TXMLShipmentMethodOfPayment.Get_Method: WideString;
begin
  Result := AttributeNodes['Method'].Text;
end;

procedure TXMLShipmentMethodOfPayment.Set_Method(Value: WideString);
begin
  SetAttribute('Method', Value);
end;

{ TXMLDeliveryRouteCode }

function TXMLDeliveryRouteCode.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLDeliveryRouteCode.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLDeliverySchedule }

procedure TXMLDeliverySchedule.AfterConstruction;
begin
  RegisterChildNode('ProductionStatus', TXMLProductionStatus);
  RegisterChildNode('DeliveryStatus', TXMLDeliveryStatus);
  RegisterChildNode('DeliveryDateWindow', TXMLDeliveryDateWindow);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('PriceDetails', TXMLPriceDetails);
  RegisterChildNode('MonetaryAdjustment', TXMLMonetaryAdjustment);
  RegisterChildNode('DeliveryLeg', TXMLDeliveryLeg);
  RegisterChildNode('DeliveryScheduleReference', TXMLDeliveryScheduleReference);
  FDeliveryDateWindow := CreateCollection(TXMLDeliveryDateWindowList, IXMLDeliveryDateWindow, 'DeliveryDateWindow') as IXMLDeliveryDateWindowList;
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  FMonetaryAdjustment := CreateCollection(TXMLMonetaryAdjustmentList, IXMLMonetaryAdjustment, 'MonetaryAdjustment') as IXMLMonetaryAdjustmentList;
  FDeliveryLeg := CreateCollection(TXMLDeliveryLegList, IXMLDeliveryLeg, 'DeliveryLeg') as IXMLDeliveryLegList;
  FDeliveryScheduleReference := CreateCollection(TXMLDeliveryScheduleReferenceList, IXMLDeliveryScheduleReference, 'DeliveryScheduleReference') as IXMLDeliveryScheduleReferenceList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLDeliverySchedule.Get_DeliveryLineNumber: LongWord;
begin
  Result := ChildNodes['DeliveryLineNumber'].NodeValue;
end;

procedure TXMLDeliverySchedule.Set_DeliveryLineNumber(Value: LongWord);
begin
  ChildNodes['DeliveryLineNumber'].NodeValue := Value;
end;

function TXMLDeliverySchedule.Get_ProductionStatus: IXMLProductionStatus;
begin
  Result := ChildNodes['ProductionStatus'] as IXMLProductionStatus;
end;

function TXMLDeliverySchedule.Get_DeliveryStatus: IXMLDeliveryStatus;
begin
  Result := ChildNodes['DeliveryStatus'] as IXMLDeliveryStatus;
end;

function TXMLDeliverySchedule.Get_DeliveryDateWindow: IXMLDeliveryDateWindowList;
begin
  Result := FDeliveryDateWindow;
end;

function TXMLDeliverySchedule.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLDeliverySchedule.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLDeliverySchedule.Get_PriceDetails: IXMLPriceDetails;
begin
  Result := ChildNodes['PriceDetails'] as IXMLPriceDetails;
end;

function TXMLDeliverySchedule.Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
begin
  Result := FMonetaryAdjustment;
end;

function TXMLDeliverySchedule.Get_DeliveryLeg: IXMLDeliveryLegList;
begin
  Result := FDeliveryLeg;
end;

function TXMLDeliverySchedule.Get_DeliveryScheduleReference: IXMLDeliveryScheduleReferenceList;
begin
  Result := FDeliveryScheduleReference;
end;

function TXMLDeliverySchedule.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLDeliveryScheduleList }

function TXMLDeliveryScheduleList.Add: IXMLDeliverySchedule;
begin
  Result := AddItem(-1) as IXMLDeliverySchedule;
end;

function TXMLDeliveryScheduleList.Insert(const Index: Integer): IXMLDeliverySchedule;
begin
  Result := AddItem(Index) as IXMLDeliverySchedule;
end;
function TXMLDeliveryScheduleList.Get_Item(Index: Integer): IXMLDeliverySchedule;
begin
  Result := List[Index] as IXMLDeliverySchedule;
end;

{ TXMLProductionStatus }

procedure TXMLProductionStatus.AfterConstruction;
begin
  RegisterChildNode('ProductionLastDateOfChange', TXMLProductionLastDateOfChange);
  inherited;
end;

function TXMLProductionStatus.Get_ProductionStatusType: WideString;
begin
  Result := AttributeNodes['ProductionStatusType'].Text;
end;

procedure TXMLProductionStatus.Set_ProductionStatusType(Value: WideString);
begin
  SetAttribute('ProductionStatusType', Value);
end;

function TXMLProductionStatus.Get_ProductionLastDateOfChange: IXMLProductionLastDateOfChange;
begin
  Result := ChildNodes['ProductionLastDateOfChange'] as IXMLProductionLastDateOfChange;
end;

{ TXMLProductionLastDateOfChange }

procedure TXMLProductionLastDateOfChange.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLProductionLastDateOfChange.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLProductionLastDateOfChange.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLProductionLastDateOfChange.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLDeliveryStatus }

procedure TXMLDeliveryStatus.AfterConstruction;
begin
  RegisterChildNode('DeliveryLastDateOfChange', TXMLDeliveryLastDateOfChange);
  inherited;
end;

function TXMLDeliveryStatus.Get_DeliveryStatusType: WideString;
begin
  Result := AttributeNodes['DeliveryStatusType'].Text;
end;

procedure TXMLDeliveryStatus.Set_DeliveryStatusType(Value: WideString);
begin
  SetAttribute('DeliveryStatusType', Value);
end;

function TXMLDeliveryStatus.Get_DeliveryLastDateOfChange: IXMLDeliveryLastDateOfChange;
begin
  Result := ChildNodes['DeliveryLastDateOfChange'] as IXMLDeliveryLastDateOfChange;
end;

{ TXMLDeliveryLastDateOfChange }

procedure TXMLDeliveryLastDateOfChange.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDeliveryLastDateOfChange.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDeliveryLastDateOfChange.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDeliveryLastDateOfChange.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLDeliveryDateWindow }

procedure TXMLDeliveryDateWindow.AfterConstruction;
begin
  RegisterChildNode('DateTimeRange', TXMLDateTimeRange);
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDeliveryDateWindow.Get_DeliveryDateType: WideString;
begin
  Result := AttributeNodes['DeliveryDateType'].Text;
end;

procedure TXMLDeliveryDateWindow.Set_DeliveryDateType(Value: WideString);
begin
  SetAttribute('DeliveryDateType', Value);
end;

function TXMLDeliveryDateWindow.Get_DateTimeRange: IXMLDateTimeRange;
begin
  Result := ChildNodes['DateTimeRange'] as IXMLDateTimeRange;
end;

function TXMLDeliveryDateWindow.Get_Month: LongWord;
begin
  Result := ChildNodes['Month'].NodeValue;
end;

procedure TXMLDeliveryDateWindow.Set_Month(Value: LongWord);
begin
  ChildNodes['Month'].NodeValue := Value;
end;

function TXMLDeliveryDateWindow.Get_Week: WideString;
begin
  Result := ChildNodes['Week'].Text;
end;

procedure TXMLDeliveryDateWindow.Set_Week(Value: WideString);
begin
  ChildNodes['Week'].NodeValue := Value;
end;

function TXMLDeliveryDateWindow.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDeliveryDateWindow.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDeliveryDateWindow.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLDeliveryDateWindowList }

function TXMLDeliveryDateWindowList.Add: IXMLDeliveryDateWindow;
begin
  Result := AddItem(-1) as IXMLDeliveryDateWindow;
end;

function TXMLDeliveryDateWindowList.Insert(const Index: Integer): IXMLDeliveryDateWindow;
begin
  Result := AddItem(Index) as IXMLDeliveryDateWindow;
end;
function TXMLDeliveryDateWindowList.Get_Item(Index: Integer): IXMLDeliveryDateWindow;
begin
  Result := List[Index] as IXMLDeliveryDateWindow;
end;

{ TXMLDateTimeRange }

procedure TXMLDateTimeRange.AfterConstruction;
begin
  RegisterChildNode('DateTimeFrom', TXMLDateTimeFrom);
  RegisterChildNode('DateTimeTo', TXMLDateTimeTo);
  inherited;
end;

function TXMLDateTimeRange.Get_DateTimeFrom: IXMLDateTimeFrom;
begin
  Result := ChildNodes['DateTimeFrom'] as IXMLDateTimeFrom;
end;

function TXMLDateTimeRange.Get_DateTimeTo: IXMLDateTimeTo;
begin
  Result := ChildNodes['DateTimeTo'] as IXMLDateTimeTo;
end;

{ TXMLDateTimeFrom }

procedure TXMLDateTimeFrom.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDateTimeFrom.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDateTimeFrom.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDateTimeFrom.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLDateTimeTo }

procedure TXMLDateTimeTo.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDateTimeTo.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDateTimeTo.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDateTimeTo.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLQuantity }

function TXMLQuantity.Get_QuantityType: WideString;
begin
  Result := AttributeNodes['QuantityType'].Text;
end;

procedure TXMLQuantity.Set_QuantityType(Value: WideString);
begin
  SetAttribute('QuantityType', Value);
end;

function TXMLQuantity.Get_QuantityTypeContext: WideString;
begin
  Result := AttributeNodes['QuantityTypeContext'].Text;
end;

procedure TXMLQuantity.Set_QuantityTypeContext(Value: WideString);
begin
  SetAttribute('QuantityTypeContext', Value);
end;

function TXMLQuantity.Get_AdjustmentType: WideString;
begin
  Result := AttributeNodes['AdjustmentType'].Text;
end;

procedure TXMLQuantity.Set_AdjustmentType(Value: WideString);
begin
  SetAttribute('AdjustmentType', Value);
end;

{ TXMLInformationalQuantity }

function TXMLInformationalQuantity.Get_QuantityType: WideString;
begin
  Result := AttributeNodes['QuantityType'].Text;
end;

procedure TXMLInformationalQuantity.Set_QuantityType(Value: WideString);
begin
  SetAttribute('QuantityType', Value);
end;

function TXMLInformationalQuantity.Get_QuantityTypeContext: WideString;
begin
  Result := AttributeNodes['QuantityTypeContext'].Text;
end;

procedure TXMLInformationalQuantity.Set_QuantityTypeContext(Value: WideString);
begin
  SetAttribute('QuantityTypeContext', Value);
end;

function TXMLInformationalQuantity.Get_AdjustmentType: WideString;
begin
  Result := AttributeNodes['AdjustmentType'].Text;
end;

procedure TXMLInformationalQuantity.Set_AdjustmentType(Value: WideString);
begin
  SetAttribute('AdjustmentType', Value);
end;

{ TXMLInformationalQuantityList }

function TXMLInformationalQuantityList.Add: IXMLInformationalQuantity;
begin
  Result := AddItem(-1) as IXMLInformationalQuantity;
end;

function TXMLInformationalQuantityList.Insert(const Index: Integer): IXMLInformationalQuantity;
begin
  Result := AddItem(Index) as IXMLInformationalQuantity;
end;
function TXMLInformationalQuantityList.Get_Item(Index: Integer): IXMLInformationalQuantity;
begin
  Result := List[Index] as IXMLInformationalQuantity;
end;

{ TXMLPriceDetails }

procedure TXMLPriceDetails.AfterConstruction;
begin
  RegisterChildNode('PricePerUnit', TXMLPricePerUnit);
  RegisterChildNode('InformationalPricePerUnit', TXMLPricePerUnit);
  RegisterChildNode('ExchangeRate', TXMLExchangeRate);
  RegisterChildNode('MonetaryAdjustment', TXMLMonetaryAdjustment);
  RegisterChildNode('GeneralLedgerAccount', TXMLGeneralLedgerAccount);
  FInformationalPricePerUnit := CreateCollection(TXMLPricePerUnitList, IXMLPricePerUnit, 'InformationalPricePerUnit') as IXMLPricePerUnitList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  FMonetaryAdjustment := CreateCollection(TXMLMonetaryAdjustmentList, IXMLMonetaryAdjustment, 'MonetaryAdjustment') as IXMLMonetaryAdjustmentList;
  inherited;
end;

function TXMLPriceDetails.Get_PriceQuantityBasis: WideString;
begin
  Result := AttributeNodes['PriceQuantityBasis'].Text;
end;

procedure TXMLPriceDetails.Set_PriceQuantityBasis(Value: WideString);
begin
  SetAttribute('PriceQuantityBasis', Value);
end;

function TXMLPriceDetails.Get_PriceTaxBasis: WideString;
begin
  Result := AttributeNodes['PriceTaxBasis'].Text;
end;

procedure TXMLPriceDetails.Set_PriceTaxBasis(Value: WideString);
begin
  SetAttribute('PriceTaxBasis', Value);
end;

function TXMLPriceDetails.Get_PricePerUnit: IXMLPricePerUnit;
begin
  Result := ChildNodes['PricePerUnit'] as IXMLPricePerUnit;
end;

function TXMLPriceDetails.Get_InformationalPricePerUnit: IXMLPricePerUnitList;
begin
  Result := FInformationalPricePerUnit;
end;

function TXMLPriceDetails.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLPriceDetails.Get_ExchangeRate: IXMLExchangeRate;
begin
  Result := ChildNodes['ExchangeRate'] as IXMLExchangeRate;
end;

function TXMLPriceDetails.Get_MonetaryAdjustment: IXMLMonetaryAdjustmentList;
begin
  Result := FMonetaryAdjustment;
end;

function TXMLPriceDetails.Get_GeneralLedgerAccount: IXMLGeneralLedgerAccount;
begin
  Result := ChildNodes['GeneralLedgerAccount'] as IXMLGeneralLedgerAccount;
end;

{ TXMLPricePerUnit }

procedure TXMLPricePerUnit.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  RegisterChildNode('Value', TXMLValue);
  RegisterChildNode('RangeMin', TXMLRangeMin);
  RegisterChildNode('RangeMax', TXMLRangeMax);
  inherited;
end;

function TXMLPricePerUnit.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

function TXMLPricePerUnit.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

function TXMLPricePerUnit.Get_RangeMin: IXMLRangeMin;
begin
  Result := ChildNodes['RangeMin'] as IXMLRangeMin;
end;

function TXMLPricePerUnit.Get_RangeMax: IXMLRangeMax;
begin
  Result := ChildNodes['RangeMax'] as IXMLRangeMax;
end;

{ TXMLPricePerUnitList }

function TXMLPricePerUnitList.Add: IXMLPricePerUnit;
begin
  Result := AddItem(-1) as IXMLPricePerUnit;
end;

function TXMLPricePerUnitList.Insert(const Index: Integer): IXMLPricePerUnit;
begin
  Result := AddItem(Index) as IXMLPricePerUnit;
end;
function TXMLPricePerUnitList.Get_Item(Index: Integer): IXMLPricePerUnit;
begin
  Result := List[Index] as IXMLPricePerUnit;
end;

{ TXMLCurrencyValue }

function TXMLCurrencyValue.Get_CurrencyType: WideString;
begin
  Result := AttributeNodes['CurrencyType'].Text;
end;

procedure TXMLCurrencyValue.Set_CurrencyType(Value: WideString);
begin
  SetAttribute('CurrencyType', Value);
end;

{ TXMLExchangeRate }

procedure TXMLExchangeRate.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  RegisterChildNode('MinCurrencyValue', TXMLMinCurrencyValue);
  RegisterChildNode('MaxCurrencyValue', TXMLMaxCurrencyValue);
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLExchangeRate.Get_ExchangeRateType: WideString;
begin
  Result := AttributeNodes['ExchangeRateType'].Text;
end;

procedure TXMLExchangeRate.Set_ExchangeRateType(Value: WideString);
begin
  SetAttribute('ExchangeRateType', Value);
end;

function TXMLExchangeRate.Get_CurrencyFromType: WideString;
begin
  Result := AttributeNodes['CurrencyFromType'].Text;
end;

procedure TXMLExchangeRate.Set_CurrencyFromType(Value: WideString);
begin
  SetAttribute('CurrencyFromType', Value);
end;

function TXMLExchangeRate.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

function TXMLExchangeRate.Get_MinCurrencyValue: IXMLMinCurrencyValue;
begin
  Result := ChildNodes['MinCurrencyValue'] as IXMLMinCurrencyValue;
end;

function TXMLExchangeRate.Get_MaxCurrencyValue: IXMLMaxCurrencyValue;
begin
  Result := ChildNodes['MaxCurrencyValue'] as IXMLMaxCurrencyValue;
end;

function TXMLExchangeRate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

{ TXMLMinCurrencyValue }

function TXMLMinCurrencyValue.Get_CurrencyType: WideString;
begin
  Result := AttributeNodes['CurrencyType'].Text;
end;

procedure TXMLMinCurrencyValue.Set_CurrencyType(Value: WideString);
begin
  SetAttribute('CurrencyType', Value);
end;

{ TXMLMaxCurrencyValue }

function TXMLMaxCurrencyValue.Get_CurrencyType: WideString;
begin
  Result := AttributeNodes['CurrencyType'].Text;
end;

procedure TXMLMaxCurrencyValue.Set_CurrencyType(Value: WideString);
begin
  SetAttribute('CurrencyType', Value);
end;

{ TXMLMonetaryAdjustment }

procedure TXMLMonetaryAdjustment.AfterConstruction;
begin
  RegisterChildNode('MonetaryAdjustmentStartAmount', TXMLMonetaryAdjustmentStartAmount);
  RegisterChildNode('MonetaryAdjustmentStartQuantity', TXMLMeasurement);
  RegisterChildNode('PriceAdjustment', TXMLPriceAdjustment);
  RegisterChildNode('FlatAmountAdjustment', TXMLFlatAmountAdjustment);
  RegisterChildNode('TaxAdjustment', TXMLTaxAdjustment);
  RegisterChildNode('InformationalAmount', TXMLInformationalAmount);
  RegisterChildNode('GeneralLedgerAccount', TXMLGeneralLedgerAccount);
  RegisterChildNode('MonetaryAdjustmentAmount', TXMLMonetaryAdjustmentAmount);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLMonetaryAdjustment.Get_AdjustmentType: WideString;
begin
  Result := AttributeNodes['AdjustmentType'].Text;
end;

procedure TXMLMonetaryAdjustment.Set_AdjustmentType(Value: WideString);
begin
  SetAttribute('AdjustmentType', Value);
end;

function TXMLMonetaryAdjustment.Get_MonetaryAdjustmentLine: LongWord;
begin
  Result := ChildNodes['MonetaryAdjustmentLine'].NodeValue;
end;

procedure TXMLMonetaryAdjustment.Set_MonetaryAdjustmentLine(Value: LongWord);
begin
  ChildNodes['MonetaryAdjustmentLine'].NodeValue := Value;
end;

function TXMLMonetaryAdjustment.Get_MonetaryAdjustmentStartAmount: IXMLMonetaryAdjustmentStartAmount;
begin
  Result := ChildNodes['MonetaryAdjustmentStartAmount'] as IXMLMonetaryAdjustmentStartAmount;
end;

function TXMLMonetaryAdjustment.Get_MonetaryAdjustmentStartQuantity: IXMLMeasurement;
begin
  Result := ChildNodes['MonetaryAdjustmentStartQuantity'] as IXMLMeasurement;
end;

function TXMLMonetaryAdjustment.Get_PriceAdjustment: IXMLPriceAdjustment;
begin
  Result := ChildNodes['PriceAdjustment'] as IXMLPriceAdjustment;
end;

function TXMLMonetaryAdjustment.Get_FlatAmountAdjustment: IXMLFlatAmountAdjustment;
begin
  Result := ChildNodes['FlatAmountAdjustment'] as IXMLFlatAmountAdjustment;
end;

function TXMLMonetaryAdjustment.Get_TaxAdjustment: IXMLTaxAdjustment;
begin
  Result := ChildNodes['TaxAdjustment'] as IXMLTaxAdjustment;
end;

function TXMLMonetaryAdjustment.Get_InformationalAmount: IXMLInformationalAmount;
begin
  Result := ChildNodes['InformationalAmount'] as IXMLInformationalAmount;
end;

function TXMLMonetaryAdjustment.Get_MonetaryAdjustmentReferenceLine: LongWord;
begin
  Result := ChildNodes['MonetaryAdjustmentReferenceLine'].NodeValue;
end;

procedure TXMLMonetaryAdjustment.Set_MonetaryAdjustmentReferenceLine(Value: LongWord);
begin
  ChildNodes['MonetaryAdjustmentReferenceLine'].NodeValue := Value;
end;

function TXMLMonetaryAdjustment.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLMonetaryAdjustment.Get_GeneralLedgerAccount: IXMLGeneralLedgerAccount;
begin
  Result := ChildNodes['GeneralLedgerAccount'] as IXMLGeneralLedgerAccount;
end;

function TXMLMonetaryAdjustment.Get_MonetaryAdjustmentAmount: IXMLMonetaryAdjustmentAmount;
begin
  Result := ChildNodes['MonetaryAdjustmentAmount'] as IXMLMonetaryAdjustmentAmount;
end;

function TXMLMonetaryAdjustment.Get_AdjustmentTypeReason: WideString;
begin
  Result := ChildNodes['AdjustmentTypeReason'].Text;
end;

procedure TXMLMonetaryAdjustment.Set_AdjustmentTypeReason(Value: WideString);
begin
  ChildNodes['AdjustmentTypeReason'].NodeValue := Value;
end;

{ TXMLMonetaryAdjustmentList }

function TXMLMonetaryAdjustmentList.Add: IXMLMonetaryAdjustment;
begin
  Result := AddItem(-1) as IXMLMonetaryAdjustment;
end;

function TXMLMonetaryAdjustmentList.Insert(const Index: Integer): IXMLMonetaryAdjustment;
begin
  Result := AddItem(Index) as IXMLMonetaryAdjustment;
end;
function TXMLMonetaryAdjustmentList.Get_Item(Index: Integer): IXMLMonetaryAdjustment;
begin
  Result := List[Index] as IXMLMonetaryAdjustment;
end;

{ TXMLMonetaryAdjustmentStartAmount }

procedure TXMLMonetaryAdjustmentStartAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLMonetaryAdjustmentStartAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLPriceAdjustment }

procedure TXMLPriceAdjustment.AfterConstruction;
begin
  RegisterChildNode('AdjustmentPercentage', TXMLMeasurement);
  RegisterChildNode('AdjustmentValue', TXMLPricePerUnit);
  inherited;
end;

function TXMLPriceAdjustment.Get_AdjustmentPercentage: IXMLMeasurement;
begin
  Result := ChildNodes['AdjustmentPercentage'] as IXMLMeasurement;
end;

function TXMLPriceAdjustment.Get_AdjustmentValue: IXMLPricePerUnit;
begin
  Result := ChildNodes['AdjustmentValue'] as IXMLPricePerUnit;
end;

{ TXMLFlatAmountAdjustment }

procedure TXMLFlatAmountAdjustment.AfterConstruction;
begin
  RegisterChildNode('AdjustmentPercentage', TXMLMeasurement);
  RegisterChildNode('AdjustmentFixedAmount', TXMLAdjustmentFixedAmount);
  inherited;
end;

function TXMLFlatAmountAdjustment.Get_AdjustmentPercentage: IXMLMeasurement;
begin
  Result := ChildNodes['AdjustmentPercentage'] as IXMLMeasurement;
end;

function TXMLFlatAmountAdjustment.Get_AdjustmentFixedAmount: IXMLAdjustmentFixedAmount;
begin
  Result := ChildNodes['AdjustmentFixedAmount'] as IXMLAdjustmentFixedAmount;
end;

{ TXMLAdjustmentFixedAmount }

procedure TXMLAdjustmentFixedAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLAdjustmentFixedAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLTaxAdjustment }

procedure TXMLTaxAdjustment.AfterConstruction;
begin
  RegisterChildNode('TaxAmount', TXMLTaxAmount);
  RegisterChildNode('InformationalAmount', TXMLInformationalAmount);
  FInformationalAmount := CreateCollection(TXMLInformationalAmountList, IXMLInformationalAmount, 'InformationalAmount') as IXMLInformationalAmountList;
  inherited;
end;

function TXMLTaxAdjustment.Get_TaxCategoryType: WideString;
begin
  Result := AttributeNodes['TaxCategoryType'].Text;
end;

procedure TXMLTaxAdjustment.Set_TaxCategoryType(Value: WideString);
begin
  SetAttribute('TaxCategoryType', Value);
end;

function TXMLTaxAdjustment.Get_TaxType: WideString;
begin
  Result := AttributeNodes['TaxType'].Text;
end;

procedure TXMLTaxAdjustment.Set_TaxType(Value: WideString);
begin
  SetAttribute('TaxType', Value);
end;

function TXMLTaxAdjustment.Get_TaxPercent: WideString;
begin
  Result := ChildNodes['TaxPercent'].Text;
end;

procedure TXMLTaxAdjustment.Set_TaxPercent(Value: WideString);
begin
  ChildNodes['TaxPercent'].NodeValue := Value;
end;

function TXMLTaxAdjustment.Get_TaxAmount: IXMLTaxAmount;
begin
  Result := ChildNodes['TaxAmount'] as IXMLTaxAmount;
end;

function TXMLTaxAdjustment.Get_TaxLocation: WideString;
begin
  Result := ChildNodes['TaxLocation'].Text;
end;

procedure TXMLTaxAdjustment.Set_TaxLocation(Value: WideString);
begin
  ChildNodes['TaxLocation'].NodeValue := Value;
end;

function TXMLTaxAdjustment.Get_InformationalAmount: IXMLInformationalAmountList;
begin
  Result := FInformationalAmount;
end;

{ TXMLTaxAmount }

procedure TXMLTaxAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLTaxAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLInformationalAmount }

procedure TXMLInformationalAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  RegisterChildNode('ExchangeRate', TXMLExchangeRate);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLInformationalAmount.Get_AmountType: WideString;
begin
  Result := AttributeNodes['AmountType'].Text;
end;

procedure TXMLInformationalAmount.Set_AmountType(Value: WideString);
begin
  SetAttribute('AmountType', Value);
end;

function TXMLInformationalAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

function TXMLInformationalAmount.Get_ExchangeRate: IXMLExchangeRate;
begin
  Result := ChildNodes['ExchangeRate'] as IXMLExchangeRate;
end;

function TXMLInformationalAmount.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLInformationalAmountList }

function TXMLInformationalAmountList.Add: IXMLInformationalAmount;
begin
  Result := AddItem(-1) as IXMLInformationalAmount;
end;

function TXMLInformationalAmountList.Insert(const Index: Integer): IXMLInformationalAmount;
begin
  Result := AddItem(Index) as IXMLInformationalAmount;
end;
function TXMLInformationalAmountList.Get_Item(Index: Integer): IXMLInformationalAmount;
begin
  Result := List[Index] as IXMLInformationalAmount;
end;

{ TXMLGeneralLedgerAccount }

function TXMLGeneralLedgerAccount.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLGeneralLedgerAccount.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLMonetaryAdjustmentAmount }

procedure TXMLMonetaryAdjustmentAmount.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLMonetaryAdjustmentAmount.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLDeliveryLeg }

procedure TXMLDeliveryLeg.AfterConstruction;
begin
  RegisterChildNode('DeliveryOrigin', TXMLDeliveryOrigin);
  RegisterChildNode('CarrierParty', TXMLParty);
  RegisterChildNode('OtherParty', TXMLTypedParty);
  RegisterChildNode('TransportModeCharacteristics', TXMLTransportModeCharacteristics);
  RegisterChildNode('TransportVehicleCharacteristics', TXMLTransportVehicleCharacteristics);
  RegisterChildNode('TransportUnitCharacteristics', TXMLTransportUnitCharacteristics);
  RegisterChildNode('TransportLoadingCharacteristics', TXMLTransportLoadingCharacteristics);
  RegisterChildNode('TransportUnloadingCharacteristics', TXMLTransportUnloadingCharacteristics);
  RegisterChildNode('TransportOtherInstructions', TXMLTransportOtherInstructions);
  RegisterChildNode('DeliveryTransitTime', TXMLDeliveryTransitTime);
  RegisterChildNode('DeliveryDestination', TXMLDeliveryDestination);
  RegisterChildNode('DeliveryDateWindow', TXMLDeliveryDateWindow);
  RegisterChildNode('DeliveryLegReference', TXMLDeliveryLegReference);
  RegisterChildNode('TermsOfChartering', TXMLTermsOfChartering);
  FOtherParty := CreateCollection(TXMLTypedPartyList, IXMLTypedParty, 'OtherParty') as IXMLTypedPartyList;
  FTransportUnitCharacteristics := CreateCollection(TXMLTransportUnitCharacteristicsList, IXMLTransportUnitCharacteristics, 'TransportUnitCharacteristics') as IXMLTransportUnitCharacteristicsList;
  FTransportOtherInstructions := CreateCollection(TXMLTransportOtherInstructionsList, IXMLTransportOtherInstructions, 'TransportOtherInstructions') as IXMLTransportOtherInstructionsList;
  FDeliveryDateWindow := CreateCollection(TXMLDeliveryDateWindowList, IXMLDeliveryDateWindow, 'DeliveryDateWindow') as IXMLDeliveryDateWindowList;
  FDeliveryLegReference := CreateCollection(TXMLDeliveryLegReferenceList, IXMLDeliveryLegReference, 'DeliveryLegReference') as IXMLDeliveryLegReferenceList;
  FTermsOfChartering := CreateCollection(TXMLTermsOfCharteringList, IXMLTermsOfChartering, 'TermsOfChartering') as IXMLTermsOfCharteringList;
  inherited;
end;

function TXMLDeliveryLeg.Get_DeliveryModeType: WideString;
begin
  Result := AttributeNodes['DeliveryModeType'].Text;
end;

procedure TXMLDeliveryLeg.Set_DeliveryModeType(Value: WideString);
begin
  SetAttribute('DeliveryModeType', Value);
end;

function TXMLDeliveryLeg.Get_DeliveryLegType: WideString;
begin
  Result := AttributeNodes['DeliveryLegType'].Text;
end;

procedure TXMLDeliveryLeg.Set_DeliveryLegType(Value: WideString);
begin
  SetAttribute('DeliveryLegType', Value);
end;

function TXMLDeliveryLeg.Get_DeliveryLegSequenceNumber: LongWord;
begin
  Result := ChildNodes['DeliveryLegSequenceNumber'].NodeValue;
end;

procedure TXMLDeliveryLeg.Set_DeliveryLegSequenceNumber(Value: LongWord);
begin
  ChildNodes['DeliveryLegSequenceNumber'].NodeValue := Value;
end;

function TXMLDeliveryLeg.Get_DeliveryOrigin: IXMLDeliveryOrigin;
begin
  Result := ChildNodes['DeliveryOrigin'] as IXMLDeliveryOrigin;
end;

function TXMLDeliveryLeg.Get_CarrierParty: IXMLParty;
begin
  Result := ChildNodes['CarrierParty'] as IXMLParty;
end;

function TXMLDeliveryLeg.Get_OtherParty: IXMLTypedPartyList;
begin
  Result := FOtherParty;
end;

function TXMLDeliveryLeg.Get_TransportModeCharacteristics: IXMLTransportModeCharacteristics;
begin
  Result := ChildNodes['TransportModeCharacteristics'] as IXMLTransportModeCharacteristics;
end;

function TXMLDeliveryLeg.Get_TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics;
begin
  Result := ChildNodes['TransportVehicleCharacteristics'] as IXMLTransportVehicleCharacteristics;
end;

function TXMLDeliveryLeg.Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristicsList;
begin
  Result := FTransportUnitCharacteristics;
end;

function TXMLDeliveryLeg.Get_TransportLoadingCharacteristics: IXMLTransportLoadingCharacteristics;
begin
  Result := ChildNodes['TransportLoadingCharacteristics'] as IXMLTransportLoadingCharacteristics;
end;

function TXMLDeliveryLeg.Get_TransportUnloadingCharacteristics: IXMLTransportUnloadingCharacteristics;
begin
  Result := ChildNodes['TransportUnloadingCharacteristics'] as IXMLTransportUnloadingCharacteristics;
end;

function TXMLDeliveryLeg.Get_TransportOtherInstructions: IXMLTransportOtherInstructionsList;
begin
  Result := FTransportOtherInstructions;
end;

function TXMLDeliveryLeg.Get_DeliveryTransitTime: IXMLDeliveryTransitTime;
begin
  Result := ChildNodes['DeliveryTransitTime'] as IXMLDeliveryTransitTime;
end;

function TXMLDeliveryLeg.Get_DeliveryDestination: IXMLDeliveryDestination;
begin
  Result := ChildNodes['DeliveryDestination'] as IXMLDeliveryDestination;
end;

function TXMLDeliveryLeg.Get_DeliveryDateWindow: IXMLDeliveryDateWindowList;
begin
  Result := FDeliveryDateWindow;
end;

function TXMLDeliveryLeg.Get_DeliveryLegReference: IXMLDeliveryLegReferenceList;
begin
  Result := FDeliveryLegReference;
end;

function TXMLDeliveryLeg.Get_TermsOfChartering: IXMLTermsOfCharteringList;
begin
  Result := FTermsOfChartering;
end;

{ TXMLDeliveryLegList }

function TXMLDeliveryLegList.Add: IXMLDeliveryLeg;
begin
  Result := AddItem(-1) as IXMLDeliveryLeg;
end;

function TXMLDeliveryLegList.Insert(const Index: Integer): IXMLDeliveryLeg;
begin
  Result := AddItem(Index) as IXMLDeliveryLeg;
end;
function TXMLDeliveryLegList.Get_Item(Index: Integer): IXMLDeliveryLeg;
begin
  Result := List[Index] as IXMLDeliveryLeg;
end;

{ TXMLDeliveryOrigin }

procedure TXMLDeliveryOrigin.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  RegisterChildNode('LocationParty', TXMLLocationParty);
  RegisterChildNode('LocationCode', TXMLLocationCode);
  RegisterChildNode('GPSCoordinates', TXMLGPSCoordinates);
  inherited;
end;

function TXMLDeliveryOrigin.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDeliveryOrigin.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDeliveryOrigin.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

function TXMLDeliveryOrigin.Get_LocationParty: IXMLLocationParty;
begin
  Result := ChildNodes['LocationParty'] as IXMLLocationParty;
end;

function TXMLDeliveryOrigin.Get_LocationCode: IXMLLocationCode;
begin
  Result := ChildNodes['LocationCode'] as IXMLLocationCode;
end;

function TXMLDeliveryOrigin.Get_GPSCoordinates: IXMLGPSCoordinates;
begin
  Result := ChildNodes['GPSCoordinates'] as IXMLGPSCoordinates;
end;

{ TXMLLocationParty }

function TXMLLocationParty.Get_LocationType: WideString;
begin
  Result := AttributeNodes['LocationType'].Text;
end;

procedure TXMLLocationParty.Set_LocationType(Value: WideString);
begin
  SetAttribute('LocationType', Value);
end;

{ TXMLTransportModeCharacteristics }

procedure TXMLTransportModeCharacteristics.AfterConstruction;
begin
  RegisterChildNode('TransportModeCode', TXMLTransportModeCode);
  inherited;
end;

function TXMLTransportModeCharacteristics.Get_TransportModeType: WideString;
begin
  Result := AttributeNodes['TransportModeType'].Text;
end;

procedure TXMLTransportModeCharacteristics.Set_TransportModeType(Value: WideString);
begin
  SetAttribute('TransportModeType', Value);
end;

function TXMLTransportModeCharacteristics.Get_TransportModeCode: IXMLTransportModeCode;
begin
  Result := ChildNodes['TransportModeCode'] as IXMLTransportModeCode;
end;

function TXMLTransportModeCharacteristics.Get_TransportModeText: WideString;
begin
  Result := ChildNodes['TransportModeText'].Text;
end;

procedure TXMLTransportModeCharacteristics.Set_TransportModeText(Value: WideString);
begin
  ChildNodes['TransportModeText'].NodeValue := Value;
end;

{ TXMLTransportModeCode }

function TXMLTransportModeCode.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTransportModeCode.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLTransportVehicleCharacteristics }

procedure TXMLTransportVehicleCharacteristics.AfterConstruction;
begin
  RegisterChildNode('TransportVehicleCode', TXMLTransportVehicleCode);
  RegisterChildNode('TransportVehicleMeasurements', TXMLTransportVehicleMeasurements);
  RegisterChildNode('TransportVehicleIdentifier', TXMLTransportVehicleIdentifier);
  FTransportVehicleIdentifier := CreateCollection(TXMLTransportVehicleIdentifierList, IXMLTransportVehicleIdentifier, 'TransportVehicleIdentifier') as IXMLTransportVehicleIdentifierList;
  inherited;
end;

function TXMLTransportVehicleCharacteristics.Get_TransportVehicleType: WideString;
begin
  Result := AttributeNodes['TransportVehicleType'].Text;
end;

procedure TXMLTransportVehicleCharacteristics.Set_TransportVehicleType(Value: WideString);
begin
  SetAttribute('TransportVehicleType', Value);
end;

function TXMLTransportVehicleCharacteristics.Get_TransportVehicleCode: IXMLTransportVehicleCode;
begin
  Result := ChildNodes['TransportVehicleCode'] as IXMLTransportVehicleCode;
end;

function TXMLTransportVehicleCharacteristics.Get_TransportVehicleMeasurements: IXMLTransportVehicleMeasurements;
begin
  Result := ChildNodes['TransportVehicleMeasurements'] as IXMLTransportVehicleMeasurements;
end;

function TXMLTransportVehicleCharacteristics.Get_TransportVehicleCount: LongWord;
begin
  Result := ChildNodes['TransportVehicleCount'].NodeValue;
end;

procedure TXMLTransportVehicleCharacteristics.Set_TransportVehicleCount(Value: LongWord);
begin
  ChildNodes['TransportVehicleCount'].NodeValue := Value;
end;

function TXMLTransportVehicleCharacteristics.Get_TransportVehicleIdentifier: IXMLTransportVehicleIdentifierList;
begin
  Result := FTransportVehicleIdentifier;
end;

function TXMLTransportVehicleCharacteristics.Get_TransportVehicleText: WideString;
begin
  Result := ChildNodes['TransportVehicleText'].Text;
end;

procedure TXMLTransportVehicleCharacteristics.Set_TransportVehicleText(Value: WideString);
begin
  ChildNodes['TransportVehicleText'].NodeValue := Value;
end;

{ TXMLTransportVehicleCode }

function TXMLTransportVehicleCode.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTransportVehicleCode.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLTransportVehicleMeasurements }

procedure TXMLTransportVehicleMeasurements.AfterConstruction;
begin
  RegisterChildNode('TransportVehicleLength', TXMLMeasurement);
  RegisterChildNode('TransportVehicleWidth', TXMLMeasurement);
  RegisterChildNode('TransportVehicleHeight', TXMLMeasurement);
  RegisterChildNode('TransportVehicleWeight', TXMLMeasurement);
  inherited;
end;

function TXMLTransportVehicleMeasurements.Get_TransportVehicleLength: IXMLMeasurement;
begin
  Result := ChildNodes['TransportVehicleLength'] as IXMLMeasurement;
end;

function TXMLTransportVehicleMeasurements.Get_TransportVehicleWidth: IXMLMeasurement;
begin
  Result := ChildNodes['TransportVehicleWidth'] as IXMLMeasurement;
end;

function TXMLTransportVehicleMeasurements.Get_TransportVehicleHeight: IXMLMeasurement;
begin
  Result := ChildNodes['TransportVehicleHeight'] as IXMLMeasurement;
end;

function TXMLTransportVehicleMeasurements.Get_TransportVehicleWeight: IXMLMeasurement;
begin
  Result := ChildNodes['TransportVehicleWeight'] as IXMLMeasurement;
end;

{ TXMLTransportVehicleIdentifier }

function TXMLTransportVehicleIdentifier.Get_TransportVehicleIdentifierType: WideString;
begin
  Result := AttributeNodes['TransportVehicleIdentifierType'].Text;
end;

procedure TXMLTransportVehicleIdentifier.Set_TransportVehicleIdentifierType(Value: WideString);
begin
  SetAttribute('TransportVehicleIdentifierType', Value);
end;

{ TXMLTransportVehicleIdentifierList }

function TXMLTransportVehicleIdentifierList.Add: IXMLTransportVehicleIdentifier;
begin
  Result := AddItem(-1) as IXMLTransportVehicleIdentifier;
end;

function TXMLTransportVehicleIdentifierList.Insert(const Index: Integer): IXMLTransportVehicleIdentifier;
begin
  Result := AddItem(Index) as IXMLTransportVehicleIdentifier;
end;
function TXMLTransportVehicleIdentifierList.Get_Item(Index: Integer): IXMLTransportVehicleIdentifier;
begin
  Result := List[Index] as IXMLTransportVehicleIdentifier;
end;

{ TXMLTransportUnitCharacteristics }

procedure TXMLTransportUnitCharacteristics.AfterConstruction;
begin
  RegisterChildNode('TransportUnitCode', TXMLTransportUnitCode);
  RegisterChildNode('TransportUnitMeasurements', TXMLTransportUnitMeasurements);
  RegisterChildNode('TransportUnitIdentifier', TXMLTransportUnitIdentifier);
  RegisterChildNode('TransportUnitDetail', TXMLTransportUnitDetail);
  FTransportUnitMeasurements := CreateCollection(TXMLTransportUnitMeasurementsList, IXMLTransportUnitMeasurements, 'TransportUnitMeasurements') as IXMLTransportUnitMeasurementsList;
  FTransportUnitIdentifier := CreateCollection(TXMLTransportUnitIdentifierList, IXMLTransportUnitIdentifier, 'TransportUnitIdentifier') as IXMLTransportUnitIdentifierList;
  inherited;
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitType: WideString;
begin
  Result := AttributeNodes['TransportUnitType'].Text;
end;

procedure TXMLTransportUnitCharacteristics.Set_TransportUnitType(Value: WideString);
begin
  SetAttribute('TransportUnitType', Value);
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitVariable: WideString;
begin
  Result := AttributeNodes['TransportUnitVariable'].Text;
end;

procedure TXMLTransportUnitCharacteristics.Set_TransportUnitVariable(Value: WideString);
begin
  SetAttribute('TransportUnitVariable', Value);
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitLevel: LongWord;
begin
  Result := AttributeNodes['TransportUnitLevel'].NodeValue;
end;

procedure TXMLTransportUnitCharacteristics.Set_TransportUnitLevel(Value: LongWord);
begin
  SetAttribute('TransportUnitLevel', Value);
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitCode: IXMLTransportUnitCode;
begin
  Result := ChildNodes['TransportUnitCode'] as IXMLTransportUnitCode;
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitMeasurements: IXMLTransportUnitMeasurementsList;
begin
  Result := FTransportUnitMeasurements;
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitCount: LongWord;
begin
  Result := ChildNodes['TransportUnitCount'].NodeValue;
end;

procedure TXMLTransportUnitCharacteristics.Set_TransportUnitCount(Value: LongWord);
begin
  ChildNodes['TransportUnitCount'].NodeValue := Value;
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitIdentifier: IXMLTransportUnitIdentifierList;
begin
  Result := FTransportUnitIdentifier;
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitText: WideString;
begin
  Result := ChildNodes['TransportUnitText'].Text;
end;

procedure TXMLTransportUnitCharacteristics.Set_TransportUnitText(Value: WideString);
begin
  ChildNodes['TransportUnitText'].NodeValue := Value;
end;

function TXMLTransportUnitCharacteristics.Get_TransportUnitDetail: IXMLTransportUnitDetail;
begin
  Result := ChildNodes['TransportUnitDetail'] as IXMLTransportUnitDetail;
end;

{ TXMLTransportUnitCharacteristicsList }

function TXMLTransportUnitCharacteristicsList.Add: IXMLTransportUnitCharacteristics;
begin
  Result := AddItem(-1) as IXMLTransportUnitCharacteristics;
end;

function TXMLTransportUnitCharacteristicsList.Insert(const Index: Integer): IXMLTransportUnitCharacteristics;
begin
  Result := AddItem(Index) as IXMLTransportUnitCharacteristics;
end;
function TXMLTransportUnitCharacteristicsList.Get_Item(Index: Integer): IXMLTransportUnitCharacteristics;
begin
  Result := List[Index] as IXMLTransportUnitCharacteristics;
end;

{ TXMLTransportUnitCode }

function TXMLTransportUnitCode.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTransportUnitCode.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLTransportUnitMeasurements }

procedure TXMLTransportUnitMeasurements.AfterConstruction;
begin
  RegisterChildNode('TransportUnitLength', TXMLMeasurement);
  RegisterChildNode('TransportUnitWidth', TXMLMeasurement);
  RegisterChildNode('TransportUnitHeight', TXMLMeasurement);
  RegisterChildNode('TransportUnitWeight', TXMLMeasurement);
  inherited;
end;

function TXMLTransportUnitMeasurements.Get_AppliesTo: WideString;
begin
  Result := AttributeNodes['AppliesTo'].Text;
end;

procedure TXMLTransportUnitMeasurements.Set_AppliesTo(Value: WideString);
begin
  SetAttribute('AppliesTo', Value);
end;

function TXMLTransportUnitMeasurements.Get_TransportUnitLength: IXMLMeasurement;
begin
  Result := ChildNodes['TransportUnitLength'] as IXMLMeasurement;
end;

function TXMLTransportUnitMeasurements.Get_TransportUnitWidth: IXMLMeasurement;
begin
  Result := ChildNodes['TransportUnitWidth'] as IXMLMeasurement;
end;

function TXMLTransportUnitMeasurements.Get_TransportUnitHeight: IXMLMeasurement;
begin
  Result := ChildNodes['TransportUnitHeight'] as IXMLMeasurement;
end;

function TXMLTransportUnitMeasurements.Get_TransportUnitWeight: IXMLMeasurement;
begin
  Result := ChildNodes['TransportUnitWeight'] as IXMLMeasurement;
end;

{ TXMLTransportUnitMeasurementsList }

function TXMLTransportUnitMeasurementsList.Add: IXMLTransportUnitMeasurements;
begin
  Result := AddItem(-1) as IXMLTransportUnitMeasurements;
end;

function TXMLTransportUnitMeasurementsList.Insert(const Index: Integer): IXMLTransportUnitMeasurements;
begin
  Result := AddItem(Index) as IXMLTransportUnitMeasurements;
end;
function TXMLTransportUnitMeasurementsList.Get_Item(Index: Integer): IXMLTransportUnitMeasurements;
begin
  Result := List[Index] as IXMLTransportUnitMeasurements;
end;

{ TXMLTransportUnitIdentifier }

function TXMLTransportUnitIdentifier.Get_TransportUnitIdentifierType: WideString;
begin
  Result := AttributeNodes['TransportUnitIdentifierType'].Text;
end;

procedure TXMLTransportUnitIdentifier.Set_TransportUnitIdentifierType(Value: WideString);
begin
  SetAttribute('TransportUnitIdentifierType', Value);
end;

{ TXMLTransportUnitIdentifierList }

function TXMLTransportUnitIdentifierList.Add: IXMLTransportUnitIdentifier;
begin
  Result := AddItem(-1) as IXMLTransportUnitIdentifier;
end;

function TXMLTransportUnitIdentifierList.Insert(const Index: Integer): IXMLTransportUnitIdentifier;
begin
  Result := AddItem(Index) as IXMLTransportUnitIdentifier;
end;
function TXMLTransportUnitIdentifierList.Get_Item(Index: Integer): IXMLTransportUnitIdentifier;
begin
  Result := List[Index] as IXMLTransportUnitIdentifier;
end;

{ TXMLTransportUnitDetail }

procedure TXMLTransportUnitDetail.AfterConstruction;
begin
  RegisterChildNode('TransportUnitDetailCode', TXMLTransportUnitDetailCode);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLTransportUnitDetail.Get_TransportUnitDetailType: WideString;
begin
  Result := AttributeNodes['TransportUnitDetailType'].Text;
end;

procedure TXMLTransportUnitDetail.Set_TransportUnitDetailType(Value: WideString);
begin
  SetAttribute('TransportUnitDetailType', Value);
end;

function TXMLTransportUnitDetail.Get_LoadOpeningSide: WideString;
begin
  Result := AttributeNodes['LoadOpeningSide'].Text;
end;

procedure TXMLTransportUnitDetail.Set_LoadOpeningSide(Value: WideString);
begin
  SetAttribute('LoadOpeningSide', Value);
end;

function TXMLTransportUnitDetail.Get_TransportUnitDetailCode: IXMLTransportUnitDetailCode;
begin
  Result := ChildNodes['TransportUnitDetailCode'] as IXMLTransportUnitDetailCode;
end;

function TXMLTransportUnitDetail.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLTransportUnitDetailCode }

function TXMLTransportUnitDetailCode.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTransportUnitDetailCode.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLTransportLoadingCharacteristics }

procedure TXMLTransportLoadingCharacteristics.AfterConstruction;
begin
  RegisterChildNode('TransportLoadingCode', TXMLTransportLoadingCode);
  RegisterChildNode('TransportLoadingCodeDescription', TXMLTransportLoadingCodeDescription);
  FTransportLoadingText := CreateCollection(TXMLS255List, IXMLNode, 'TransportLoadingText') as IXMLS255List;
  inherited;
end;

function TXMLTransportLoadingCharacteristics.Get_MixProductIndicator: WideString;
begin
  Result := AttributeNodes['MixProductIndicator'].Text;
end;

procedure TXMLTransportLoadingCharacteristics.Set_MixProductIndicator(Value: WideString);
begin
  SetAttribute('MixProductIndicator', Value);
end;

function TXMLTransportLoadingCharacteristics.Get_TransportLoadingType: WideString;
begin
  Result := AttributeNodes['TransportLoadingType'].Text;
end;

procedure TXMLTransportLoadingCharacteristics.Set_TransportLoadingType(Value: WideString);
begin
  SetAttribute('TransportLoadingType', Value);
end;

function TXMLTransportLoadingCharacteristics.Get_TransportDeckOption: WideString;
begin
  Result := AttributeNodes['TransportDeckOption'].Text;
end;

procedure TXMLTransportLoadingCharacteristics.Set_TransportDeckOption(Value: WideString);
begin
  SetAttribute('TransportDeckOption', Value);
end;

function TXMLTransportLoadingCharacteristics.Get_LoadingTolerance: WideString;
begin
  Result := AttributeNodes['LoadingTolerance'].Text;
end;

procedure TXMLTransportLoadingCharacteristics.Set_LoadingTolerance(Value: WideString);
begin
  SetAttribute('LoadingTolerance', Value);
end;

function TXMLTransportLoadingCharacteristics.Get_DirectLoading: WideString;
begin
  Result := AttributeNodes['DirectLoading'].Text;
end;

procedure TXMLTransportLoadingCharacteristics.Set_DirectLoading(Value: WideString);
begin
  SetAttribute('DirectLoading', Value);
end;

function TXMLTransportLoadingCharacteristics.Get_GoodsLoadingPrinciple: WideString;
begin
  Result := AttributeNodes['GoodsLoadingPrinciple'].Text;
end;

procedure TXMLTransportLoadingCharacteristics.Set_GoodsLoadingPrinciple(Value: WideString);
begin
  SetAttribute('GoodsLoadingPrinciple', Value);
end;

function TXMLTransportLoadingCharacteristics.Get_LabelOrientation: WideString;
begin
  Result := AttributeNodes['LabelOrientation'].Text;
end;

procedure TXMLTransportLoadingCharacteristics.Set_LabelOrientation(Value: WideString);
begin
  SetAttribute('LabelOrientation', Value);
end;

function TXMLTransportLoadingCharacteristics.Get_TransportLoadingCode: IXMLTransportLoadingCode;
begin
  Result := ChildNodes['TransportLoadingCode'] as IXMLTransportLoadingCode;
end;

function TXMLTransportLoadingCharacteristics.Get_TransportLoadingCodeDescription: IXMLTransportLoadingCodeDescription;
begin
  Result := ChildNodes['TransportLoadingCodeDescription'] as IXMLTransportLoadingCodeDescription;
end;

function TXMLTransportLoadingCharacteristics.Get_TransportLoadingText: IXMLS255List;
begin
  Result := FTransportLoadingText;
end;

{ TXMLTransportLoadingCharacteristicsList }

function TXMLTransportLoadingCharacteristicsList.Add: IXMLTransportLoadingCharacteristics;
begin
  Result := AddItem(-1) as IXMLTransportLoadingCharacteristics;
end;

function TXMLTransportLoadingCharacteristicsList.Insert(const Index: Integer): IXMLTransportLoadingCharacteristics;
begin
  Result := AddItem(Index) as IXMLTransportLoadingCharacteristics;
end;
function TXMLTransportLoadingCharacteristicsList.Get_Item(Index: Integer): IXMLTransportLoadingCharacteristics;
begin
  Result := List[Index] as IXMLTransportLoadingCharacteristics;
end;

{ TXMLTransportLoadingCode }

function TXMLTransportLoadingCode.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTransportLoadingCode.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLTransportLoadingCodeDescription }

procedure TXMLTransportLoadingCodeDescription.AfterConstruction;
begin
  RegisterChildNode('e-Attachment', TXMLEAttachment);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLTransportLoadingCodeDescription.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLTransportLoadingCodeDescription.Get_EAttachment: IXMLEAttachment;
begin
  Result := ChildNodes['e-Attachment'] as IXMLEAttachment;
end;

{ TXMLEAttachment }

procedure TXMLEAttachment.AfterConstruction;
begin
  FAttachmentFileName := CreateCollection(TXMLS60List, IXMLNode, 'AttachmentFileName') as IXMLS60List;
  FURL := CreateCollection(TXMLAnyURIList, IXMLNode, 'URL') as IXMLAnyURIList;
  inherited;
end;

function TXMLEAttachment.Get_AttachmentFileName: IXMLS60List;
begin
  Result := FAttachmentFileName;
end;

function TXMLEAttachment.Get_NumberOfAttachments: LongWord;
begin
  Result := ChildNodes['NumberOfAttachments'].NodeValue;
end;

procedure TXMLEAttachment.Set_NumberOfAttachments(Value: LongWord);
begin
  ChildNodes['NumberOfAttachments'].NodeValue := Value;
end;

function TXMLEAttachment.Get_URL: IXMLAnyURIList;
begin
  Result := FURL;
end;

{ TXMLTransportUnloadingCharacteristics }

procedure TXMLTransportUnloadingCharacteristics.AfterConstruction;
begin
  RegisterChildNode('TransportUnloadingCode', TXMLTransportUnloadingCode);
  RegisterChildNode('TransportUnloadingCodeDescription', TXMLTransportUnloadingCodeDescription);
  FTransportUnloadingText := CreateCollection(TXMLS255List, IXMLNode, 'TransportUnloadingText') as IXMLS255List;
  inherited;
end;

function TXMLTransportUnloadingCharacteristics.Get_TransportUnloadingType: WideString;
begin
  Result := AttributeNodes['TransportUnloadingType'].Text;
end;

procedure TXMLTransportUnloadingCharacteristics.Set_TransportUnloadingType(Value: WideString);
begin
  SetAttribute('TransportUnloadingType', Value);
end;

function TXMLTransportUnloadingCharacteristics.Get_DirectUnloading: WideString;
begin
  Result := AttributeNodes['DirectUnloading'].Text;
end;

procedure TXMLTransportUnloadingCharacteristics.Set_DirectUnloading(Value: WideString);
begin
  SetAttribute('DirectUnloading', Value);
end;

function TXMLTransportUnloadingCharacteristics.Get_TransportUnloadingCode: IXMLTransportUnloadingCode;
begin
  Result := ChildNodes['TransportUnloadingCode'] as IXMLTransportUnloadingCode;
end;

function TXMLTransportUnloadingCharacteristics.Get_TransportUnloadingCodeDescription: IXMLTransportUnloadingCodeDescription;
begin
  Result := ChildNodes['TransportUnloadingCodeDescription'] as IXMLTransportUnloadingCodeDescription;
end;

function TXMLTransportUnloadingCharacteristics.Get_TransportUnloadingText: IXMLS255List;
begin
  Result := FTransportUnloadingText;
end;

{ TXMLTransportUnloadingCode }

function TXMLTransportUnloadingCode.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTransportUnloadingCode.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLTransportUnloadingCodeDescription }

procedure TXMLTransportUnloadingCodeDescription.AfterConstruction;
begin
  RegisterChildNode('e-Attachment', TXMLEAttachment);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLTransportUnloadingCodeDescription.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLTransportUnloadingCodeDescription.Get_EAttachment: IXMLEAttachment;
begin
  Result := ChildNodes['e-Attachment'] as IXMLEAttachment;
end;

{ TXMLTransportOtherInstructions }

procedure TXMLTransportOtherInstructions.AfterConstruction;
begin
  RegisterChildNode('TransportInstructionCode', TXMLTransportInstructionCode);
  FTransportInstructionText := CreateCollection(TXMLS255List, IXMLNode, 'TransportInstructionText') as IXMLS255List;
  inherited;
end;

function TXMLTransportOtherInstructions.Get_TransportInstructionType: WideString;
begin
  Result := AttributeNodes['TransportInstructionType'].Text;
end;

procedure TXMLTransportOtherInstructions.Set_TransportInstructionType(Value: WideString);
begin
  SetAttribute('TransportInstructionType', Value);
end;

function TXMLTransportOtherInstructions.Get_TransportInstructionCode: IXMLTransportInstructionCode;
begin
  Result := ChildNodes['TransportInstructionCode'] as IXMLTransportInstructionCode;
end;

function TXMLTransportOtherInstructions.Get_TransportInstructionText: IXMLS255List;
begin
  Result := FTransportInstructionText;
end;

{ TXMLTransportOtherInstructionsList }

function TXMLTransportOtherInstructionsList.Add: IXMLTransportOtherInstructions;
begin
  Result := AddItem(-1) as IXMLTransportOtherInstructions;
end;

function TXMLTransportOtherInstructionsList.Insert(const Index: Integer): IXMLTransportOtherInstructions;
begin
  Result := AddItem(Index) as IXMLTransportOtherInstructions;
end;
function TXMLTransportOtherInstructionsList.Get_Item(Index: Integer): IXMLTransportOtherInstructions;
begin
  Result := List[Index] as IXMLTransportOtherInstructions;
end;

{ TXMLTransportInstructionCode }

function TXMLTransportInstructionCode.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLTransportInstructionCode.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLDeliveryTransitTime }

function TXMLDeliveryTransitTime.Get_Days: LongWord;
begin
  Result := ChildNodes['Days'].NodeValue;
end;

procedure TXMLDeliveryTransitTime.Set_Days(Value: LongWord);
begin
  ChildNodes['Days'].NodeValue := Value;
end;

function TXMLDeliveryTransitTime.Get_Hours: LongWord;
begin
  Result := ChildNodes['Hours'].NodeValue;
end;

procedure TXMLDeliveryTransitTime.Set_Hours(Value: LongWord);
begin
  ChildNodes['Hours'].NodeValue := Value;
end;

function TXMLDeliveryTransitTime.Get_Minutes: LongWord;
begin
  Result := ChildNodes['Minutes'].NodeValue;
end;

procedure TXMLDeliveryTransitTime.Set_Minutes(Value: LongWord);
begin
  ChildNodes['Minutes'].NodeValue := Value;
end;

{ TXMLDeliveryDestination }

procedure TXMLDeliveryDestination.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  RegisterChildNode('LocationParty', TXMLLocationParty);
  RegisterChildNode('LocationCode', TXMLLocationCode);
  RegisterChildNode('GPSCoordinates', TXMLGPSCoordinates);
  inherited;
end;

function TXMLDeliveryDestination.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDeliveryDestination.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDeliveryDestination.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

function TXMLDeliveryDestination.Get_LocationParty: IXMLLocationParty;
begin
  Result := ChildNodes['LocationParty'] as IXMLLocationParty;
end;

function TXMLDeliveryDestination.Get_LocationCode: IXMLLocationCode;
begin
  Result := ChildNodes['LocationCode'] as IXMLLocationCode;
end;

function TXMLDeliveryDestination.Get_GPSCoordinates: IXMLGPSCoordinates;
begin
  Result := ChildNodes['GPSCoordinates'] as IXMLGPSCoordinates;
end;

{ TXMLDeliveryLegReference }

function TXMLDeliveryLegReference.Get_DeliveryLegReferenceType: WideString;
begin
  Result := AttributeNodes['DeliveryLegReferenceType'].Text;
end;

procedure TXMLDeliveryLegReference.Set_DeliveryLegReferenceType(Value: WideString);
begin
  SetAttribute('DeliveryLegReferenceType', Value);
end;

function TXMLDeliveryLegReference.Get_AssignedBy: WideString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLDeliveryLegReference.Set_AssignedBy(Value: WideString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLDeliveryLegReferenceList }

function TXMLDeliveryLegReferenceList.Add: IXMLDeliveryLegReference;
begin
  Result := AddItem(-1) as IXMLDeliveryLegReference;
end;

function TXMLDeliveryLegReferenceList.Insert(const Index: Integer): IXMLDeliveryLegReference;
begin
  Result := AddItem(Index) as IXMLDeliveryLegReference;
end;
function TXMLDeliveryLegReferenceList.Get_Item(Index: Integer): IXMLDeliveryLegReference;
begin
  Result := List[Index] as IXMLDeliveryLegReference;
end;

{ TXMLTermsOfChartering }

function TXMLTermsOfChartering.Get_TermsOfCharteringType: WideString;
begin
  Result := AttributeNodes['TermsOfCharteringType'].Text;
end;

procedure TXMLTermsOfChartering.Set_TermsOfCharteringType(Value: WideString);
begin
  SetAttribute('TermsOfCharteringType', Value);
end;

{ TXMLTermsOfCharteringList }

function TXMLTermsOfCharteringList.Add: IXMLTermsOfChartering;
begin
  Result := AddItem(-1) as IXMLTermsOfChartering;
end;

function TXMLTermsOfCharteringList.Insert(const Index: Integer): IXMLTermsOfChartering;
begin
  Result := AddItem(Index) as IXMLTermsOfChartering;
end;
function TXMLTermsOfCharteringList.Get_Item(Index: Integer): IXMLTermsOfChartering;
begin
  Result := List[Index] as IXMLTermsOfChartering;
end;

{ TXMLDeliveryScheduleReference }

function TXMLDeliveryScheduleReference.Get_DeliveryScheduleReferenceType: WideString;
begin
  Result := AttributeNodes['DeliveryScheduleReferenceType'].Text;
end;

procedure TXMLDeliveryScheduleReference.Set_DeliveryScheduleReferenceType(Value: WideString);
begin
  SetAttribute('DeliveryScheduleReferenceType', Value);
end;

function TXMLDeliveryScheduleReference.Get_AssignedBy: WideString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLDeliveryScheduleReference.Set_AssignedBy(Value: WideString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLDeliveryScheduleReferenceList }

function TXMLDeliveryScheduleReferenceList.Add: IXMLDeliveryScheduleReference;
begin
  Result := AddItem(-1) as IXMLDeliveryScheduleReference;
end;

function TXMLDeliveryScheduleReferenceList.Insert(const Index: Integer): IXMLDeliveryScheduleReference;
begin
  Result := AddItem(Index) as IXMLDeliveryScheduleReference;
end;
function TXMLDeliveryScheduleReferenceList.Get_Item(Index: Integer): IXMLDeliveryScheduleReference;
begin
  Result := List[Index] as IXMLDeliveryScheduleReference;
end;

{ TXMLCountryOfOrigin }

procedure TXMLCountryOfOrigin.AfterConstruction;
begin
  RegisterChildNode('Country', TXMLCountry);
  inherited;
end;

function TXMLCountryOfOrigin.Get_Country: IXMLCountry;
begin
  Result := ChildNodes['Country'] as IXMLCountry;
end;

{ TXMLCountryOfDestination }

procedure TXMLCountryOfDestination.AfterConstruction;
begin
  RegisterChildNode('Country', TXMLCountry);
  inherited;
end;

function TXMLCountryOfDestination.Get_Country: IXMLCountry;
begin
  Result := ChildNodes['Country'] as IXMLCountry;
end;

{ TXMLCountryOfConsumption }

procedure TXMLCountryOfConsumption.AfterConstruction;
begin
  RegisterChildNode('Country', TXMLCountry);
  inherited;
end;

function TXMLCountryOfConsumption.Get_Country: IXMLCountry;
begin
  Result := ChildNodes['Country'] as IXMLCountry;
end;

{ TXMLInsurance }

procedure TXMLInsurance.AfterConstruction;
begin
  RegisterChildNode('InsuredValue', TXMLInsuredValue);
  inherited;
end;

function TXMLInsurance.Get_Insurer: WideString;
begin
  Result := ChildNodes['Insurer'].Text;
end;

procedure TXMLInsurance.Set_Insurer(Value: WideString);
begin
  ChildNodes['Insurer'].NodeValue := Value;
end;

function TXMLInsurance.Get_InsuranceContractNo: WideString;
begin
  Result := ChildNodes['InsuranceContractNo'].Text;
end;

procedure TXMLInsurance.Set_InsuranceContractNo(Value: WideString);
begin
  ChildNodes['InsuranceContractNo'].NodeValue := Value;
end;

function TXMLInsurance.Get_InsuredValue: IXMLInsuredValue;
begin
  Result := ChildNodes['InsuredValue'] as IXMLInsuredValue;
end;

function TXMLInsurance.Get_InsuranceInfo: WideString;
begin
  Result := ChildNodes['InsuranceInfo'].Text;
end;

procedure TXMLInsurance.Set_InsuranceInfo(Value: WideString);
begin
  ChildNodes['InsuranceInfo'].NodeValue := Value;
end;

{ TXMLInsuredValue }

procedure TXMLInsuredValue.AfterConstruction;
begin
  RegisterChildNode('CurrencyValue', TXMLCurrencyValue);
  inherited;
end;

function TXMLInsuredValue.Get_CurrencyValue: IXMLCurrencyValue;
begin
  Result := ChildNodes['CurrencyValue'] as IXMLCurrencyValue;
end;

{ TXMLDocumentInformation }

procedure TXMLDocumentInformation.AfterConstruction;
begin
  RegisterChildNode('NumberOfDocuments', TXMLNumberOfDocuments);
  FNumberOfDocuments := CreateCollection(TXMLNumberOfDocumentsList, IXMLNumberOfDocuments, 'NumberOfDocuments') as IXMLNumberOfDocumentsList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLDocumentInformation.Get_DocumentType: WideString;
begin
  Result := AttributeNodes['DocumentType'].Text;
end;

procedure TXMLDocumentInformation.Set_DocumentType(Value: WideString);
begin
  SetAttribute('DocumentType', Value);
end;

function TXMLDocumentInformation.Get_NumberOfDocuments: IXMLNumberOfDocumentsList;
begin
  Result := FNumberOfDocuments;
end;

function TXMLDocumentInformation.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLDocumentInformationList }

function TXMLDocumentInformationList.Add: IXMLDocumentInformation;
begin
  Result := AddItem(-1) as IXMLDocumentInformation;
end;

function TXMLDocumentInformationList.Insert(const Index: Integer): IXMLDocumentInformation;
begin
  Result := AddItem(Index) as IXMLDocumentInformation;
end;
function TXMLDocumentInformationList.Get_Item(Index: Integer): IXMLDocumentInformation;
begin
  Result := List[Index] as IXMLDocumentInformation;
end;

{ TXMLNumberOfDocuments }

function TXMLNumberOfDocuments.Get_Original: WideString;
begin
  Result := AttributeNodes['Original'].Text;
end;

procedure TXMLNumberOfDocuments.Set_Original(Value: WideString);
begin
  SetAttribute('Original', Value);
end;

{ TXMLNumberOfDocumentsList }

function TXMLNumberOfDocumentsList.Add: IXMLNumberOfDocuments;
begin
  Result := AddItem(-1) as IXMLNumberOfDocuments;
end;

function TXMLNumberOfDocumentsList.Insert(const Index: Integer): IXMLNumberOfDocuments;
begin
  Result := AddItem(Index) as IXMLNumberOfDocuments;
end;
function TXMLNumberOfDocumentsList.Get_Item(Index: Integer): IXMLNumberOfDocuments;
begin
  Result := List[Index] as IXMLNumberOfDocuments;
end;

{ TXMLDeliveryMessageShipment }

procedure TXMLDeliveryMessageShipment.AfterConstruction;
begin
  RegisterChildNode('ShipmentID', TXMLShipmentID);
  RegisterChildNode('DeliveryMessageProductGroup', TXMLDeliveryMessageProductGroup);
  RegisterChildNode('ShipmentSummary', TXMLShipmentSummary);
  FDeliveryMessageProductGroup := CreateCollection(TXMLDeliveryMessageProductGroupList, IXMLDeliveryMessageProductGroup, 'DeliveryMessageProductGroup') as IXMLDeliveryMessageProductGroupList;
  inherited;
end;


function TXMLDeliveryMessageShipment.Get_ShipmentID: IXMLShipmentID;
begin
  Result := ChildNodes['ShipmentID'] as IXMLShipmentID;
end;


function TXMLDeliveryMessageShipment.Get_DeliveryMessageProductGroup: IXMLDeliveryMessageProductGroupList;
begin
  Result := FDeliveryMessageProductGroup;
end;

function TXMLDeliveryMessageShipment.Get_ShipmentSummary: IXMLShipmentSummary;
begin
  Result := ChildNodes['ShipmentSummary'] as IXMLShipmentSummary;
end;

{ TXMLDeliveryMessageShipmentList }

function TXMLDeliveryMessageShipmentList.Add: IXMLDeliveryMessageShipment;
begin
  Result := AddItem(-1) as IXMLDeliveryMessageShipment;
end;

function TXMLDeliveryMessageShipmentList.Insert(const Index: Integer): IXMLDeliveryMessageShipment;
begin
  Result := AddItem(Index) as IXMLDeliveryMessageShipment;
end;
function TXMLDeliveryMessageShipmentList.Get_Item(Index: Integer): IXMLDeliveryMessageShipment;
begin
  Result := List[Index] as IXMLDeliveryMessageShipment;
end;

{ TXMLShipmentID }

function TXMLShipmentID.Get_ShipmentIDType: WideString;
begin
  Result := AttributeNodes['ShipmentIDType'].Text;
end;

procedure TXMLShipmentID.Set_ShipmentIDType(Value: WideString);
begin
  SetAttribute('ShipmentIDType', Value);
end;


{ TXMLDeliveryMessageProductGroup }

procedure TXMLDeliveryMessageProductGroup.AfterConstruction;
begin
  RegisterChildNode('ProductGroupID', TXMLProductGroupID);
  RegisterChildNode('DeliveryShipmentLineItem', TXMLDeliveryShipmentLineItem);
  RegisterChildNode('ProductGroupSummary', TXMLProductGroupSummary);
  FDeliveryShipmentLineItem := CreateCollection(TXMLDeliveryShipmentLineItemList, IXMLDeliveryShipmentLineItem, 'DeliveryShipmentLineItem') as IXMLDeliveryShipmentLineItemList;
  inherited;
end;

function TXMLDeliveryMessageProductGroup.Get_ProductGroupID: IXMLProductGroupID;
begin
  Result := ChildNodes['ProductGroupID'] as IXMLProductGroupID;
end;

function TXMLDeliveryMessageProductGroup.Get_DeliveryShipmentLineItem: IXMLDeliveryShipmentLineItemList;
begin
  Result := FDeliveryShipmentLineItem;
end;

function TXMLDeliveryMessageProductGroup.Get_ProductGroupSummary: IXMLProductGroupSummary;
begin
  Result := ChildNodes['ProductGroupSummary'] as IXMLProductGroupSummary;
end;

{ TXMLDeliveryMessageProductGroupList }

function TXMLDeliveryMessageProductGroupList.Add: IXMLDeliveryMessageProductGroup;
begin
  Result := AddItem(-1) as IXMLDeliveryMessageProductGroup;
end;

function TXMLDeliveryMessageProductGroupList.Insert(const Index: Integer): IXMLDeliveryMessageProductGroup;
begin
  Result := AddItem(Index) as IXMLDeliveryMessageProductGroup;
end;
function TXMLDeliveryMessageProductGroupList.Get_Item(Index: Integer): IXMLDeliveryMessageProductGroup;
begin
  Result := List[Index] as IXMLDeliveryMessageProductGroup;
end;

{ TXMLProductGroupID }

function TXMLProductGroupID.Get_ProductGroupIDType: WideString;
begin
  Result := AttributeNodes['ProductGroupIDType'].Text;
end;

procedure TXMLProductGroupID.Set_ProductGroupIDType(Value: WideString);
begin
  SetAttribute('ProductGroupIDType', Value);
end;


{ TXMLDeliveryShipmentLineItem }

procedure TXMLDeliveryShipmentLineItem.AfterConstruction;
begin
  RegisterChildNode('PurchaseOrderInformation', TXMLPurchaseOrderInformation);
  RegisterChildNode('DeliveryMessageReference', TXMLDeliveryMessageReference);
  RegisterChildNode('DocumentReferenceInformation', TXMLDocumentReferenceInformation);
  RegisterChildNode('CountryOfOrigin', TXMLCountryOfOrigin);
  RegisterChildNode('CountryOfDestination', TXMLCountryOfDestination);
  RegisterChildNode('CountryOfConsumption', TXMLCountryOfConsumption);
  RegisterChildNode('TotalNumberOfUnits', TXMLMeasurement);
  RegisterChildNode('DeliveryDateWindow', TXMLDeliveryDateWindow);
  RegisterChildNode('MillProductionInformation', TXMLMillProductionInformation);
  RegisterChildNode('QuantityOrderedInformation', TXMLQuantityOrderedInformation);
  RegisterChildNode('TransportLoadingCharacteristics', TXMLTransportLoadingCharacteristics);
  RegisterChildNode('TransportUnloadingCharacteristics', TXMLTransportUnloadingCharacteristics);
  RegisterChildNode('TransportOtherInstructions', TXMLTransportOtherInstructions);
  RegisterChildNode('SafetyAndEnvironmentalInformation', TXMLSafetyAndEnvironmentalInformationClass);
  RegisterChildNode('BillToParty', TXMLParty);
  RegisterChildNode('Product', TXMLProductClass);
  RegisterChildNode('PackageInformation', TXMLPackageInformationClass);
  RegisterChildNode('TransportPackageInformation', TXMLTransportPackageInformation);
  RegisterChildNode('ProductSummary', TXMLProductSummary);
  RegisterChildNode('LengthSpecification', TXMLLengthSpecification);
  RegisterChildNode('QuantityDeviation', TXMLMeasurementWithText);
  FDeliveryMessageReference := CreateCollection(TXMLDeliveryMessageReferenceList, IXMLDeliveryMessageReference, 'DeliveryMessageReference') as IXMLDeliveryMessageReferenceList;
  FDocumentReferenceInformation := CreateCollection(TXMLDocumentReferenceInformationList, IXMLDocumentReferenceInformation, 'DocumentReferenceInformation') as IXMLDocumentReferenceInformationList;
  FDeliveryDateWindow := CreateCollection(TXMLDeliveryDateWindowList, IXMLDeliveryDateWindow, 'DeliveryDateWindow') as IXMLDeliveryDateWindowList;
  FTransportLoadingCharacteristics := CreateCollection(TXMLTransportLoadingCharacteristicsList, IXMLTransportLoadingCharacteristics, 'TransportLoadingCharacteristics') as IXMLTransportLoadingCharacteristicsList;
  FTransportOtherInstructions := CreateCollection(TXMLTransportOtherInstructionsList, IXMLTransportOtherInstructions, 'TransportOtherInstructions') as IXMLTransportOtherInstructionsList;
  FSafetyAndEnvironmentalInformation := CreateCollection(TXMLSafetyAndEnvironmentalInformationClassList, IXMLSafetyAndEnvironmentalInformationClass, 'SafetyAndEnvironmentalInformation') as IXMLSafetyAndEnvironmentalInformationClassList;
  FPackageInformation := CreateCollection(TXMLPackageInformationClassList, IXMLPackageInformationClass, 'PackageInformation') as IXMLPackageInformationClassList;
  FTransportPackageInformation := CreateCollection(TXMLTransportPackageInformationList, IXMLTransportPackageInformation, 'TransportPackageInformation') as IXMLTransportPackageInformationList;
  FLengthSpecification := CreateCollection(TXMLLengthSpecificationList, IXMLLengthSpecification, 'LengthSpecification') as IXMLLengthSpecificationList;
  inherited;
end;

function TXMLDeliveryShipmentLineItem.Get_DeliveryShipmentLineItemNumber: LongWord;
begin
  Result := ChildNodes['DeliveryShipmentLineItemNumber'].NodeValue;
end;

procedure TXMLDeliveryShipmentLineItem.Set_DeliveryShipmentLineItemNumber(Value: LongWord);
begin
  ChildNodes['DeliveryShipmentLineItemNumber'].NodeValue := Value;
end;

function TXMLDeliveryShipmentLineItem.Get_PurchaseOrderInformation: IXMLPurchaseOrderInformation;
begin
  Result := ChildNodes['PurchaseOrderInformation'] as IXMLPurchaseOrderInformation;
end;

function TXMLDeliveryShipmentLineItem.Get_PurchaseOrderLineItemNumber: LongWord;
begin
  Result := ChildNodes['PurchaseOrderLineItemNumber'].NodeValue;
end;

procedure TXMLDeliveryShipmentLineItem.Set_PurchaseOrderLineItemNumber(Value: LongWord);
begin
  ChildNodes['PurchaseOrderLineItemNumber'].NodeValue := Value;
end;

function TXMLDeliveryShipmentLineItem.Get_DeliveryMessageReference: IXMLDeliveryMessageReferenceList;
begin
  Result := FDeliveryMessageReference;
end;

function TXMLDeliveryShipmentLineItem.Get_DocumentReferenceInformation: IXMLDocumentReferenceInformationList;
begin
  Result := FDocumentReferenceInformation;
end;

function TXMLDeliveryShipmentLineItem.Get_CountryOfOrigin: IXMLCountryOfOrigin;
begin
  Result := ChildNodes['CountryOfOrigin'] as IXMLCountryOfOrigin;
end;

function TXMLDeliveryShipmentLineItem.Get_CountryOfDestination: IXMLCountryOfDestination;
begin
  Result := ChildNodes['CountryOfDestination'] as IXMLCountryOfDestination;
end;

function TXMLDeliveryShipmentLineItem.Get_CountryOfConsumption: IXMLCountryOfConsumption;
begin
  Result := ChildNodes['CountryOfConsumption'] as IXMLCountryOfConsumption;
end;

function TXMLDeliveryShipmentLineItem.Get_TotalNumberOfUnits: IXMLMeasurement;
begin
  Result := ChildNodes['TotalNumberOfUnits'] as IXMLMeasurement;
end;

function TXMLDeliveryShipmentLineItem.Get_DeliveryDateWindow: IXMLDeliveryDateWindowList;
begin
  Result := FDeliveryDateWindow;
end;

function TXMLDeliveryShipmentLineItem.Get_MillProductionInformation: IXMLMillProductionInformation;
begin
  Result := ChildNodes['MillProductionInformation'] as IXMLMillProductionInformation;
end;

function TXMLDeliveryShipmentLineItem.Get_QuantityOrderedInformation: IXMLQuantityOrderedInformation;
begin
  Result := ChildNodes['QuantityOrderedInformation'] as IXMLQuantityOrderedInformation;
end;

function TXMLDeliveryShipmentLineItem.Get_TransportLoadingCharacteristics: IXMLTransportLoadingCharacteristicsList;
begin
  Result := FTransportLoadingCharacteristics;
end;

function TXMLDeliveryShipmentLineItem.Get_TransportUnloadingCharacteristics: IXMLTransportUnloadingCharacteristics;
begin
  Result := ChildNodes['TransportUnloadingCharacteristics'] as IXMLTransportUnloadingCharacteristics;
end;

function TXMLDeliveryShipmentLineItem.Get_TransportOtherInstructions: IXMLTransportOtherInstructionsList;
begin
  Result := FTransportOtherInstructions;
end;

function TXMLDeliveryShipmentLineItem.Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
begin
  Result := FSafetyAndEnvironmentalInformation;
end;

function TXMLDeliveryShipmentLineItem.Get_BillToParty: IXMLParty;
begin
  Result := ChildNodes['BillToParty'] as IXMLParty;
end;

function TXMLDeliveryShipmentLineItem.Get_Product: IXMLProductClass;
begin
  Result := ChildNodes['Product'] as IXMLProductClass;
end;

function TXMLDeliveryShipmentLineItem.Get_PackageInformation: IXMLPackageInformationClassList;
begin
  Result := FPackageInformation;
end;

function TXMLDeliveryShipmentLineItem.Get_TransportPackageInformation: IXMLTransportPackageInformationList;
begin
  Result := FTransportPackageInformation;
end;

function TXMLDeliveryShipmentLineItem.Get_ProductSummary: IXMLProductSummary;
begin
  Result := ChildNodes['ProductSummary'] as IXMLProductSummary;
end;

function TXMLDeliveryShipmentLineItem.Get_LengthSpecification: IXMLLengthSpecificationList;
begin
  Result := FLengthSpecification;
end;

function TXMLDeliveryShipmentLineItem.Get_QuantityDeviation: IXMLMeasurementWithText;
begin
  Result := ChildNodes['QuantityDeviation'] as IXMLMeasurementWithText;
end;

{ TXMLDeliveryShipmentLineItemList }

function TXMLDeliveryShipmentLineItemList.Add: IXMLDeliveryShipmentLineItem;
begin
  Result := AddItem(-1) as IXMLDeliveryShipmentLineItem;
end;

function TXMLDeliveryShipmentLineItemList.Insert(const Index: Integer): IXMLDeliveryShipmentLineItem;
begin
  Result := AddItem(Index) as IXMLDeliveryShipmentLineItem;
end;
function TXMLDeliveryShipmentLineItemList.Get_Item(Index: Integer): IXMLDeliveryShipmentLineItem;
begin
  Result := List[Index] as IXMLDeliveryShipmentLineItem;
end;

{ TXMLPurchaseOrderInformation }

procedure TXMLPurchaseOrderInformation.AfterConstruction;
begin
  RegisterChildNode('PurchaseOrderIssuedDate', TXMLDateTimeBasis);
  RegisterChildNode('PurchaseOrderReference', TXMLPurchaseOrderReference);
  FPurchaseOrderReference := CreateCollection(TXMLPurchaseOrderReferenceList, IXMLPurchaseOrderReference, 'PurchaseOrderReference') as IXMLPurchaseOrderReferenceList;
  inherited;
end;

function TXMLPurchaseOrderInformation.Get_PurchaseOrderNumber: WideString;
begin
  Result := ChildNodes['PurchaseOrderNumber'].Text;
end;

procedure TXMLPurchaseOrderInformation.Set_PurchaseOrderNumber(Value: WideString);
begin
  ChildNodes['PurchaseOrderNumber'].NodeValue := Value;
end;

function TXMLPurchaseOrderInformation.Get_PurchaseOrderReleaseNumber: WideString;
begin
  Result := ChildNodes['PurchaseOrderReleaseNumber'].Text;
end;

procedure TXMLPurchaseOrderInformation.Set_PurchaseOrderReleaseNumber(Value: WideString);
begin
  ChildNodes['PurchaseOrderReleaseNumber'].NodeValue := Value;
end;

function TXMLPurchaseOrderInformation.Get_PurchaseOrderIssuedDate: IXMLDateTimeBasis;
begin
  Result := ChildNodes['PurchaseOrderIssuedDate'] as IXMLDateTimeBasis;
end;

function TXMLPurchaseOrderInformation.Get_PurchaseOrderReference: IXMLPurchaseOrderReferenceList;
begin
  Result := FPurchaseOrderReference;
end;

{ TXMLDateTimeBasis }

procedure TXMLDateTimeBasis.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDateTimeBasis.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDateTimeBasis.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDateTimeBasis.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLPurchaseOrderReference }

function TXMLPurchaseOrderReference.Get_PurchaseOrderReferenceType: WideString;
begin
  Result := AttributeNodes['PurchaseOrderReferenceType'].Text;
end;

procedure TXMLPurchaseOrderReference.Set_PurchaseOrderReferenceType(Value: WideString);
begin
  SetAttribute('PurchaseOrderReferenceType', Value);
end;

function TXMLPurchaseOrderReference.Get_AssignedBy: WideString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLPurchaseOrderReference.Set_AssignedBy(Value: WideString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLPurchaseOrderReferenceList }

function TXMLPurchaseOrderReferenceList.Add: IXMLPurchaseOrderReference;
begin
  Result := AddItem(-1) as IXMLPurchaseOrderReference;
end;

function TXMLPurchaseOrderReferenceList.Insert(const Index: Integer): IXMLPurchaseOrderReference;
begin
  Result := AddItem(Index) as IXMLPurchaseOrderReference;
end;
function TXMLPurchaseOrderReferenceList.Get_Item(Index: Integer): IXMLPurchaseOrderReference;
begin
  Result := List[Index] as IXMLPurchaseOrderReference;
end;

{ TXMLMillProductionInformation }

procedure TXMLMillProductionInformation.AfterConstruction;
begin
  RegisterChildNode('MillCharacteristics', TXMLMillCharacteristics);
  RegisterChildNode('Quantity', TXMLQuantity);
  inherited;
end;

function TXMLMillProductionInformation.Get_MillCharacteristics: IXMLMillCharacteristics;
begin
  Result := ChildNodes['MillCharacteristics'] as IXMLMillCharacteristics;
end;

function TXMLMillProductionInformation.Get_MillOrderNumber: WideString;
begin
  Result := ChildNodes['MillOrderNumber'].Text;
end;

procedure TXMLMillProductionInformation.Set_MillOrderNumber(Value: WideString);
begin
  ChildNodes['MillOrderNumber'].NodeValue := Value;
end;

function TXMLMillProductionInformation.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

{ TXMLMillCharacteristics }

procedure TXMLMillCharacteristics.AfterConstruction;
begin
  RegisterChildNode('MillParty', TXMLParty);
  inherited;
end;

function TXMLMillCharacteristics.Get_MillParty: IXMLParty;
begin
  Result := ChildNodes['MillParty'] as IXMLParty;
end;

function TXMLMillCharacteristics.Get_MachineID: WideString;
begin
  Result := ChildNodes['MachineID'].Text;
end;

procedure TXMLMillCharacteristics.Set_MachineID(Value: WideString);
begin
  ChildNodes['MachineID'].NodeValue := Value;
end;

{ TXMLQuantityOrderedInformation }

procedure TXMLQuantityOrderedInformation.AfterConstruction;
begin
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('Length', TXMLMeasurement);
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  FLength := CreateCollection(TXMLMeasurementList, IXMLMeasurement, 'Length') as IXMLMeasurementList;
  inherited;
end;

function TXMLQuantityOrderedInformation.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLQuantityOrderedInformation.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLQuantityOrderedInformation.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLQuantityOrderedInformation.Get_Length: IXMLMeasurementList;
begin
  Result := FLength;
end;

{ TXMLSafetyAndEnvironmentalInformationClass }

procedure TXMLSafetyAndEnvironmentalInformationClass.AfterConstruction;
begin
  RegisterChildNode('ChainOfCustody', TXMLChainOfCustody);
  RegisterChildNode('SafetyAndEnvironmentalCertification', TXMLMeasurement);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLSafetyAndEnvironmentalInformationClass.Get_SafetyAndEnvironmentalType: WideString;
begin
  Result := AttributeNodes['SafetyAndEnvironmentalType'].Text;
end;

procedure TXMLSafetyAndEnvironmentalInformationClass.Set_SafetyAndEnvironmentalType(Value: WideString);
begin
  SetAttribute('SafetyAndEnvironmentalType', Value);
end;

function TXMLSafetyAndEnvironmentalInformationClass.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLSafetyAndEnvironmentalInformationClass.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

function TXMLSafetyAndEnvironmentalInformationClass.Get_LicenceNumber: WideString;
begin
  Result := ChildNodes['LicenceNumber'].Text;
end;

procedure TXMLSafetyAndEnvironmentalInformationClass.Set_LicenceNumber(Value: WideString);
begin
  ChildNodes['LicenceNumber'].NodeValue := Value;
end;

function TXMLSafetyAndEnvironmentalInformationClass.Get_ChainOfCustody: IXMLChainOfCustody;
begin
  Result := ChildNodes['ChainOfCustody'] as IXMLChainOfCustody;
end;

function TXMLSafetyAndEnvironmentalInformationClass.Get_SafetyAndEnvironmentalCertification: IXMLMeasurement;
begin
  Result := ChildNodes['SafetyAndEnvironmentalCertification'] as IXMLMeasurement;
end;

function TXMLSafetyAndEnvironmentalInformationClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLSafetyAndEnvironmentalInformationClassList }

function TXMLSafetyAndEnvironmentalInformationClassList.Add: IXMLSafetyAndEnvironmentalInformationClass;
begin
  Result := AddItem(-1) as IXMLSafetyAndEnvironmentalInformationClass;
end;

function TXMLSafetyAndEnvironmentalInformationClassList.Insert(const Index: Integer): IXMLSafetyAndEnvironmentalInformationClass;
begin
  Result := AddItem(Index) as IXMLSafetyAndEnvironmentalInformationClass;
end;
function TXMLSafetyAndEnvironmentalInformationClassList.Get_Item(Index: Integer): IXMLSafetyAndEnvironmentalInformationClass;
begin
  Result := List[Index] as IXMLSafetyAndEnvironmentalInformationClass;
end;

{ TXMLChainOfCustody }

function TXMLChainOfCustody.Get_CertificationBody: WideString;
begin
  Result := AttributeNodes['CertificationBody'].Text;
end;

procedure TXMLChainOfCustody.Set_CertificationBody(Value: WideString);
begin
  SetAttribute('CertificationBody', Value);
end;

{ TXMLProductClass }

procedure TXMLProductClass.AfterConstruction;
begin
  RegisterChildNode('ProductIdentifier', TXMLProductIdentifier);
  RegisterChildNode('ProductDescription', TXMLProductDescription);
  RegisterChildNode('Classification', TXMLClassification);
  RegisterChildNode('BookManufacturing', TXMLBookManufacturing);
  RegisterChildNode('LabelStock', TXMLLabelStock);
  RegisterChildNode('Paper', TXMLPaper);
  RegisterChildNode('Pulp', TXMLPulpClass);
  RegisterChildNode('RecoveredPaper', TXMLRecoveredPaper);
  RegisterChildNode('VirginFibre', TXMLVirginFibre);
  RegisterChildNode('WoodProducts', TXMLWoodProducts);
  FProductIdentifier := CreateCollection(TXMLProductIdentifierList, IXMLProductIdentifier, 'ProductIdentifier') as IXMLProductIdentifierList;
  FProductDescription := CreateCollection(TXMLProductDescriptionList, IXMLProductDescription, 'ProductDescription') as IXMLProductDescriptionList;
  FClassification := CreateCollection(TXMLClassificationList, IXMLClassification, 'Classification') as IXMLClassificationList;
  inherited;
end;

function TXMLProductClass.Get_ProductIdentifier: IXMLProductIdentifierList;
begin
  Result := FProductIdentifier;
end;

function TXMLProductClass.Get_ProductDescription: IXMLProductDescriptionList;
begin
  Result := FProductDescription;
end;

function TXMLProductClass.Get_Classification: IXMLClassificationList;
begin
  Result := FClassification;
end;

function TXMLProductClass.Get_BookManufacturing: IXMLBookManufacturing;
begin
  Result := ChildNodes['BookManufacturing'] as IXMLBookManufacturing;
end;

function TXMLProductClass.Get_LabelStock: IXMLLabelStock;
begin
  Result := ChildNodes['LabelStock'] as IXMLLabelStock;
end;

function TXMLProductClass.Get_Paper: IXMLPaper;
begin
  Result := ChildNodes['Paper'] as IXMLPaper;
end;

function TXMLProductClass.Get_Pulp: IXMLPulpClass;
begin
  Result := ChildNodes['Pulp'] as IXMLPulpClass;
end;

function TXMLProductClass.Get_RecoveredPaper: IXMLRecoveredPaper;
begin
  Result := ChildNodes['RecoveredPaper'] as IXMLRecoveredPaper;
end;

function TXMLProductClass.Get_VirginFibre: IXMLVirginFibre;
begin
  Result := ChildNodes['VirginFibre'] as IXMLVirginFibre;
end;

function TXMLProductClass.Get_WoodProducts: IXMLWoodProducts;
begin
  Result := ChildNodes['WoodProducts'] as IXMLWoodProducts;
end;

{ TXMLProductIdentifier }

function TXMLProductIdentifier.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLProductIdentifier.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

function TXMLProductIdentifier.Get_ProductIdentifierType: WideString;
begin
  Result := AttributeNodes['ProductIdentifierType'].Text;
end;

procedure TXMLProductIdentifier.Set_ProductIdentifierType(Value: WideString);
begin
  SetAttribute('ProductIdentifierType', Value);
end;

{ TXMLProductIdentifierList }

function TXMLProductIdentifierList.Add: IXMLProductIdentifier;
begin
  Result := AddItem(-1) as IXMLProductIdentifier;
end;

function TXMLProductIdentifierList.Insert(const Index: Integer): IXMLProductIdentifier;
begin
  Result := AddItem(Index) as IXMLProductIdentifier;
end;
function TXMLProductIdentifierList.Get_Item(Index: Integer): IXMLProductIdentifier;
begin
  Result := List[Index] as IXMLProductIdentifier;
end;

{ TXMLProductDescription }

function TXMLProductDescription.Get_Language: WideString;
begin
  Result := AttributeNodes['Language'].Text;
end;

procedure TXMLProductDescription.Set_Language(Value: WideString);
begin
  SetAttribute('Language', Value);
end;

{ TXMLProductDescriptionList }

function TXMLProductDescriptionList.Add: IXMLProductDescription;
begin
  Result := AddItem(-1) as IXMLProductDescription;
end;

function TXMLProductDescriptionList.Insert(const Index: Integer): IXMLProductDescription;
begin
  Result := AddItem(Index) as IXMLProductDescription;
end;
function TXMLProductDescriptionList.Get_Item(Index: Integer): IXMLProductDescription;
begin
  Result := List[Index] as IXMLProductDescription;
end;

{ TXMLClassification }

procedure TXMLClassification.AfterConstruction;
begin
  RegisterChildNode('ClassificationCode', TXMLClassificationCode);
  FClassificationDescription := CreateCollection(TXMLS72List, IXMLNode, 'ClassificationDescription') as IXMLS72List;
  inherited;
end;

function TXMLClassification.Get_ClassificationCode: IXMLClassificationCode;
begin
  Result := ChildNodes['ClassificationCode'] as IXMLClassificationCode;
end;

function TXMLClassification.Get_ClassificationDescription: IXMLS72List;
begin
  Result := FClassificationDescription;
end;

{ TXMLClassificationList }

function TXMLClassificationList.Add: IXMLClassification;
begin
  Result := AddItem(-1) as IXMLClassification;
end;

function TXMLClassificationList.Insert(const Index: Integer): IXMLClassification;
begin
  Result := AddItem(Index) as IXMLClassification;
end;
function TXMLClassificationList.Get_Item(Index: Integer): IXMLClassification;
begin
  Result := List[Index] as IXMLClassification;
end;

{ TXMLClassificationCode }

function TXMLClassificationCode.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLClassificationCode.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLBookManufacturing }

procedure TXMLBookManufacturing.AfterConstruction;
begin
  RegisterChildNode('ProofInformationalQuantity', TXMLProofInformationalQuantity);
  RegisterChildNode('PrepInformation', TXMLPrepInformation);
  RegisterChildNode('SuppliedComponentInformation', TXMLSuppliedComponentInformation);
  RegisterChildNode('PackagingCharacteristics', TXMLPackagingCharacteristics);
  FProofInformationalQuantity := CreateCollection(TXMLProofInformationalQuantityList, IXMLProofInformationalQuantity, 'ProofInformationalQuantity') as IXMLProofInformationalQuantityList;
  FPrepInformation := CreateCollection(TXMLPrepInformationList, IXMLPrepInformation, 'PrepInformation') as IXMLPrepInformationList;
  FSuppliedComponentInformation := CreateCollection(TXMLSuppliedComponentInformationList, IXMLSuppliedComponentInformation, 'SuppliedComponentInformation') as IXMLSuppliedComponentInformationList;
  inherited;
end;

function TXMLBookManufacturing.Get_ProofInformationalQuantity: IXMLProofInformationalQuantityList;
begin
  Result := FProofInformationalQuantity;
end;

function TXMLBookManufacturing.Get_PrepInformation: IXMLPrepInformationList;
begin
  Result := FPrepInformation;
end;

function TXMLBookManufacturing.Get_SuppliedComponentInformation: IXMLSuppliedComponentInformationList;
begin
  Result := FSuppliedComponentInformation;
end;

function TXMLBookManufacturing.Get_PackagingCharacteristics: IXMLPackagingCharacteristics;
begin
  Result := ChildNodes['PackagingCharacteristics'] as IXMLPackagingCharacteristics;
end;

{ TXMLProofInformationalQuantity }

procedure TXMLProofInformationalQuantity.AfterConstruction;
begin
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('OtherParty', TXMLTypedParty);
  RegisterChildNode('ProofApprovalDate', TXMLProofApprovalDate);
  RegisterChildNode('ProofDueDate', TXMLProofDueDate);
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLProofInformationalQuantity.Get_ProofType: WideString;
begin
  Result := AttributeNodes['ProofType'].Text;
end;

procedure TXMLProofInformationalQuantity.Set_ProofType(Value: WideString);
begin
  SetAttribute('ProofType', Value);
end;

function TXMLProofInformationalQuantity.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLProofInformationalQuantity.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLProofInformationalQuantity.Get_OtherParty: IXMLTypedParty;
begin
  Result := ChildNodes['OtherParty'] as IXMLTypedParty;
end;

function TXMLProofInformationalQuantity.Get_ProofApprovalDate: IXMLProofApprovalDate;
begin
  Result := ChildNodes['ProofApprovalDate'] as IXMLProofApprovalDate;
end;

function TXMLProofInformationalQuantity.Get_ProofDueDate: IXMLProofDueDate;
begin
  Result := ChildNodes['ProofDueDate'] as IXMLProofDueDate;
end;

function TXMLProofInformationalQuantity.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLProofInformationalQuantityList }

function TXMLProofInformationalQuantityList.Add: IXMLProofInformationalQuantity;
begin
  Result := AddItem(-1) as IXMLProofInformationalQuantity;
end;

function TXMLProofInformationalQuantityList.Insert(const Index: Integer): IXMLProofInformationalQuantity;
begin
  Result := AddItem(Index) as IXMLProofInformationalQuantity;
end;
function TXMLProofInformationalQuantityList.Get_Item(Index: Integer): IXMLProofInformationalQuantity;
begin
  Result := List[Index] as IXMLProofInformationalQuantity;
end;

{ TXMLProofApprovalDate }

procedure TXMLProofApprovalDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLProofApprovalDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLProofApprovalDate.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLProofApprovalDate.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLProofDueDate }

procedure TXMLProofDueDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLProofDueDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLProofDueDate.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLProofDueDate.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLPrepInformation }

procedure TXMLPrepInformation.AfterConstruction;
begin
  RegisterChildNode('SupplierParty', TXMLParty);
  RegisterChildNode('PrepShipDate', TXMLDateTimeBasis);
  RegisterChildNode('PrepDueDate', TXMLDateTimeBasis);
  RegisterChildNode('PrepNeededDate', TXMLDateTimeBasis);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLPrepInformation.Get_PrepType: WideString;
begin
  Result := AttributeNodes['PrepType'].Text;
end;

procedure TXMLPrepInformation.Set_PrepType(Value: WideString);
begin
  SetAttribute('PrepType', Value);
end;

function TXMLPrepInformation.Get_SupplierParty: IXMLParty;
begin
  Result := ChildNodes['SupplierParty'] as IXMLParty;
end;

function TXMLPrepInformation.Get_PrepShipDate: IXMLDateTimeBasis;
begin
  Result := ChildNodes['PrepShipDate'] as IXMLDateTimeBasis;
end;

function TXMLPrepInformation.Get_PrepDueDate: IXMLDateTimeBasis;
begin
  Result := ChildNodes['PrepDueDate'] as IXMLDateTimeBasis;
end;

function TXMLPrepInformation.Get_PrepNeededDate: IXMLDateTimeBasis;
begin
  Result := ChildNodes['PrepNeededDate'] as IXMLDateTimeBasis;
end;

function TXMLPrepInformation.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLPrepInformationList }

function TXMLPrepInformationList.Add: IXMLPrepInformation;
begin
  Result := AddItem(-1) as IXMLPrepInformation;
end;

function TXMLPrepInformationList.Insert(const Index: Integer): IXMLPrepInformation;
begin
  Result := AddItem(Index) as IXMLPrepInformation;
end;
function TXMLPrepInformationList.Get_Item(Index: Integer): IXMLPrepInformation;
begin
  Result := List[Index] as IXMLPrepInformation;
end;

{ TXMLSuppliedComponentInformation }

procedure TXMLSuppliedComponentInformation.AfterConstruction;
begin
  RegisterChildNode('SupplierParty', TXMLParty);
  RegisterChildNode('ProductIdentifier', TXMLProductIdentifier);
  RegisterChildNode('ProductDescription', TXMLProductDescription);
  RegisterChildNode('Classification', TXMLClassification);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('ComponentShipDate', TXMLComponentShipDate);
  RegisterChildNode('ComponentDueDate', TXMLComponentDueDate);
  RegisterChildNode('ComponentNeededDate', TXMLComponentNeededDate);
  RegisterChildNode('OrderStatusInformation', TXMLOrderStatusInformation);
  FProductIdentifier := CreateCollection(TXMLProductIdentifierList, IXMLProductIdentifier, 'ProductIdentifier') as IXMLProductIdentifierList;
  FProductDescription := CreateCollection(TXMLProductDescriptionList, IXMLProductDescription, 'ProductDescription') as IXMLProductDescriptionList;
  FClassification := CreateCollection(TXMLClassificationList, IXMLClassification, 'Classification') as IXMLClassificationList;
  FSuppliedComponentReference := CreateCollection(TXMLS255List, IXMLNode, 'SuppliedComponentReference') as IXMLS255List;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLSuppliedComponentInformation.Get_SuppliedComponentType: WideString;
begin
  Result := AttributeNodes['SuppliedComponentType'].Text;
end;

procedure TXMLSuppliedComponentInformation.Set_SuppliedComponentType(Value: WideString);
begin
  SetAttribute('SuppliedComponentType', Value);
end;

function TXMLSuppliedComponentInformation.Get_SupplierParty: IXMLParty;
begin
  Result := ChildNodes['SupplierParty'] as IXMLParty;
end;

function TXMLSuppliedComponentInformation.Get_ProductIdentifier: IXMLProductIdentifierList;
begin
  Result := FProductIdentifier;
end;

function TXMLSuppliedComponentInformation.Get_ProductDescription: IXMLProductDescriptionList;
begin
  Result := FProductDescription;
end;

function TXMLSuppliedComponentInformation.Get_Classification: IXMLClassificationList;
begin
  Result := FClassification;
end;

function TXMLSuppliedComponentInformation.Get_SuppliedComponentReference: IXMLS255List;
begin
  Result := FSuppliedComponentReference;
end;

function TXMLSuppliedComponentInformation.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLSuppliedComponentInformation.Get_ComponentShipDate: IXMLComponentShipDate;
begin
  Result := ChildNodes['ComponentShipDate'] as IXMLComponentShipDate;
end;

function TXMLSuppliedComponentInformation.Get_ComponentDueDate: IXMLComponentDueDate;
begin
  Result := ChildNodes['ComponentDueDate'] as IXMLComponentDueDate;
end;

function TXMLSuppliedComponentInformation.Get_ComponentNeededDate: IXMLComponentNeededDate;
begin
  Result := ChildNodes['ComponentNeededDate'] as IXMLComponentNeededDate;
end;

function TXMLSuppliedComponentInformation.Get_OrderStatusInformation: IXMLOrderStatusInformation;
begin
  Result := ChildNodes['OrderStatusInformation'] as IXMLOrderStatusInformation;
end;

function TXMLSuppliedComponentInformation.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLSuppliedComponentInformationList }

function TXMLSuppliedComponentInformationList.Add: IXMLSuppliedComponentInformation;
begin
  Result := AddItem(-1) as IXMLSuppliedComponentInformation;
end;

function TXMLSuppliedComponentInformationList.Insert(const Index: Integer): IXMLSuppliedComponentInformation;
begin
  Result := AddItem(Index) as IXMLSuppliedComponentInformation;
end;
function TXMLSuppliedComponentInformationList.Get_Item(Index: Integer): IXMLSuppliedComponentInformation;
begin
  Result := List[Index] as IXMLSuppliedComponentInformation;
end;

{ TXMLComponentShipDate }

procedure TXMLComponentShipDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLComponentShipDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLComponentShipDate.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLComponentShipDate.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLComponentDueDate }

procedure TXMLComponentDueDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLComponentDueDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLComponentDueDate.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLComponentDueDate.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLComponentNeededDate }

procedure TXMLComponentNeededDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLComponentNeededDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLComponentNeededDate.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLComponentNeededDate.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLOrderStatusInformation }

procedure TXMLOrderStatusInformation.AfterConstruction;
begin
  RegisterChildNode('OrderPrimaryStatus', TXMLOrderPrimaryStatus);
  inherited;
end;

function TXMLOrderStatusInformation.Get_OrderPrimaryStatus: IXMLOrderPrimaryStatus;
begin
  Result := ChildNodes['OrderPrimaryStatus'] as IXMLOrderPrimaryStatus;
end;

function TXMLOrderStatusInformation.Get_OrderSecondaryStatus: WideString;
begin
  Result := ChildNodes['OrderSecondaryStatus'].Text;
end;

procedure TXMLOrderStatusInformation.Set_OrderSecondaryStatus(Value: WideString);
begin
  ChildNodes['OrderSecondaryStatus'].NodeValue := Value;
end;

{ TXMLOrderPrimaryStatus }

function TXMLOrderPrimaryStatus.Get_OrderStatusCode: WideString;
begin
  Result := AttributeNodes['OrderStatusCode'].Text;
end;

procedure TXMLOrderPrimaryStatus.Set_OrderStatusCode(Value: WideString);
begin
  SetAttribute('OrderStatusCode', Value);
end;

{ TXMLPackagingCharacteristics }

procedure TXMLPackagingCharacteristics.AfterConstruction;
begin
  RegisterChildNode('BoxCharacteristics', TXMLBoxCharacteristics);
  RegisterChildNode('PalletPackagingCharacteristics', TXMLPalletPackagingCharacteristics);
  RegisterChildNode('BookUnitPacking', TXMLBookUnitPacking);
  inherited;
end;

function TXMLPackagingCharacteristics.Get_BoxCharacteristics: IXMLBoxCharacteristics;
begin
  Result := ChildNodes['BoxCharacteristics'] as IXMLBoxCharacteristics;
end;

function TXMLPackagingCharacteristics.Get_PalletPackagingCharacteristics: IXMLPalletPackagingCharacteristics;
begin
  Result := ChildNodes['PalletPackagingCharacteristics'] as IXMLPalletPackagingCharacteristics;
end;

function TXMLPackagingCharacteristics.Get_BookUnitPacking: IXMLBookUnitPacking;
begin
  Result := ChildNodes['BookUnitPacking'] as IXMLBookUnitPacking;
end;

{ TXMLBoxCharacteristics }

procedure TXMLBoxCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Height', TXMLMeasurement);
  RegisterChildNode('Length', TXMLMeasurement);
  RegisterChildNode('Width', TXMLMeasurement);
  RegisterChildNode('Weight', TXMLMeasurement);
  RegisterChildNode('Burst', TXMLBurst);
  RegisterChildNode('BurstIndex', TXMLBurstIndex);
  RegisterChildNode('UnitsPerCarton', TXMLMeasurement);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('WrapCharacteristics', TXMLWrapCharacteristics);
  RegisterChildNode('BandCharacteristics', TXMLBandCharacteristics);
  FLabelCharacteristics := CreateCollection(TXMLLabelCharacteristicsList, IXMLLabelCharacteristics, 'LabelCharacteristics') as IXMLLabelCharacteristicsList;
  FStencilCharacteristics := CreateCollection(TXMLStencilCharacteristicsList, IXMLStencilCharacteristics, 'StencilCharacteristics') as IXMLStencilCharacteristicsList;
  inherited;
end;

function TXMLBoxCharacteristics.Get_BoxType: WideString;
begin
  Result := AttributeNodes['BoxType'].Text;
end;

procedure TXMLBoxCharacteristics.Set_BoxType(Value: WideString);
begin
  SetAttribute('BoxType', Value);
end;

function TXMLBoxCharacteristics.Get_Height: IXMLMeasurement;
begin
  Result := ChildNodes['Height'] as IXMLMeasurement;
end;

function TXMLBoxCharacteristics.Get_Length: IXMLMeasurement;
begin
  Result := ChildNodes['Length'] as IXMLMeasurement;
end;

function TXMLBoxCharacteristics.Get_Width: IXMLMeasurement;
begin
  Result := ChildNodes['Width'] as IXMLMeasurement;
end;

function TXMLBoxCharacteristics.Get_Weight: IXMLMeasurement;
begin
  Result := ChildNodes['Weight'] as IXMLMeasurement;
end;

function TXMLBoxCharacteristics.Get_Burst: IXMLBurst;
begin
  Result := ChildNodes['Burst'] as IXMLBurst;
end;

function TXMLBoxCharacteristics.Get_BurstIndex: IXMLBurstIndex;
begin
  Result := ChildNodes['BurstIndex'] as IXMLBurstIndex;
end;

function TXMLBoxCharacteristics.Get_UnitsPerCarton: IXMLMeasurement;
begin
  Result := ChildNodes['UnitsPerCarton'] as IXMLMeasurement;
end;

function TXMLBoxCharacteristics.Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
begin
  Result := FLabelCharacteristics;
end;

function TXMLBoxCharacteristics.Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
begin
  Result := FStencilCharacteristics;
end;

function TXMLBoxCharacteristics.Get_WrapCharacteristics: IXMLWrapCharacteristics;
begin
  Result := ChildNodes['WrapCharacteristics'] as IXMLWrapCharacteristics;
end;

function TXMLBoxCharacteristics.Get_BandCharacteristics: IXMLBandCharacteristics;
begin
  Result := ChildNodes['BandCharacteristics'] as IXMLBandCharacteristics;
end;

{ TXMLDetailMeasurement }

procedure TXMLDetailMeasurement.AfterConstruction;
begin
  RegisterChildNode('DetailValue', TXMLDetailValue);
  RegisterChildNode('DetailRangeMin', TXMLDetailRangeMin);
  RegisterChildNode('DetailRangeMax', TXMLDetailRangeMax);
  RegisterChildNode('StandardDeviation', TXMLStandardDeviation);
  RegisterChildNode('TwoSigmaLower', TXMLTwoSigmaLower);
  RegisterChildNode('TwoSigmaUpper', TXMLTwoSigmaUpper);
  inherited;
end;

function TXMLDetailMeasurement.Get_DetailValue: IXMLDetailValue;
begin
  Result := ChildNodes['DetailValue'] as IXMLDetailValue;
end;

function TXMLDetailMeasurement.Get_DetailRangeMin: IXMLDetailRangeMin;
begin
  Result := ChildNodes['DetailRangeMin'] as IXMLDetailRangeMin;
end;

function TXMLDetailMeasurement.Get_DetailRangeMax: IXMLDetailRangeMax;
begin
  Result := ChildNodes['DetailRangeMax'] as IXMLDetailRangeMax;
end;

function TXMLDetailMeasurement.Get_StandardDeviation: IXMLStandardDeviation;
begin
  Result := ChildNodes['StandardDeviation'] as IXMLStandardDeviation;
end;

function TXMLDetailMeasurement.Get_SampleSize: LongWord;
begin
  Result := ChildNodes['SampleSize'].NodeValue;
end;

procedure TXMLDetailMeasurement.Set_SampleSize(Value: LongWord);
begin
  ChildNodes['SampleSize'].NodeValue := Value;
end;

function TXMLDetailMeasurement.Get_TwoSigmaLower: IXMLTwoSigmaLower;
begin
  Result := ChildNodes['TwoSigmaLower'] as IXMLTwoSigmaLower;
end;

function TXMLDetailMeasurement.Get_TwoSigmaUpper: IXMLTwoSigmaUpper;
begin
  Result := ChildNodes['TwoSigmaUpper'] as IXMLTwoSigmaUpper;
end;

{ TXMLBurstIndex }

function TXMLBurstIndex.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLBurstIndex.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLBurstIndex.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLBurstIndex.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLBurstIndex.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLBurstIndex.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLBurstIndex.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLBurstIndex.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLBurstIndexList }

function TXMLBurstIndexList.Add: IXMLBurstIndex;
begin
  Result := AddItem(-1) as IXMLBurstIndex;
end;

function TXMLBurstIndexList.Insert(const Index: Integer): IXMLBurstIndex;
begin
  Result := AddItem(Index) as IXMLBurstIndex;
end;
function TXMLBurstIndexList.Get_Item(Index: Integer): IXMLBurstIndex;
begin
  Result := List[Index] as IXMLBurstIndex;
end;

{ TXMLLabelCharacteristics }

procedure TXMLLabelCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Length', TXMLMeasurement);
  RegisterChildNode('Width', TXMLMeasurement);
  RegisterChildNode('ColourCode', TXMLColourCode);
  FCustomerMarks := CreateCollection(TXMLS255List, IXMLNode, 'CustomerMarks') as IXMLS255List;
  inherited;
end;

function TXMLLabelCharacteristics.Get_CustomerMarks: IXMLS255List;
begin
  Result := FCustomerMarks;
end;

function TXMLLabelCharacteristics.Get_LabelStyle: WideString;
begin
  Result := ChildNodes['LabelStyle'].Text;
end;

procedure TXMLLabelCharacteristics.Set_LabelStyle(Value: WideString);
begin
  ChildNodes['LabelStyle'].NodeValue := Value;
end;

function TXMLLabelCharacteristics.Get_LabelBrandName: WideString;
begin
  Result := ChildNodes['LabelBrandName'].Text;
end;

procedure TXMLLabelCharacteristics.Set_LabelBrandName(Value: WideString);
begin
  ChildNodes['LabelBrandName'].NodeValue := Value;
end;

function TXMLLabelCharacteristics.Get_LabelPosition: WideString;
begin
  Result := ChildNodes['LabelPosition'].Text;
end;

procedure TXMLLabelCharacteristics.Set_LabelPosition(Value: WideString);
begin
  ChildNodes['LabelPosition'].NodeValue := Value;
end;

function TXMLLabelCharacteristics.Get_NumberOfLabels: LongWord;
begin
  Result := ChildNodes['NumberOfLabels'].NodeValue;
end;

procedure TXMLLabelCharacteristics.Set_NumberOfLabels(Value: LongWord);
begin
  ChildNodes['NumberOfLabels'].NodeValue := Value;
end;

function TXMLLabelCharacteristics.Get_Length: IXMLMeasurement;
begin
  Result := ChildNodes['Length'] as IXMLMeasurement;
end;

function TXMLLabelCharacteristics.Get_Width: IXMLMeasurement;
begin
  Result := ChildNodes['Width'] as IXMLMeasurement;
end;

function TXMLLabelCharacteristics.Get_ColourCode: IXMLColourCode;
begin
  Result := ChildNodes['ColourCode'] as IXMLColourCode;
end;

function TXMLLabelCharacteristics.Get_ColourDescription: WideString;
begin
  Result := ChildNodes['ColourDescription'].Text;
end;

procedure TXMLLabelCharacteristics.Set_ColourDescription(Value: WideString);
begin
  ChildNodes['ColourDescription'].NodeValue := Value;
end;

{ TXMLLabelCharacteristicsList }

function TXMLLabelCharacteristicsList.Add: IXMLLabelCharacteristics;
begin
  Result := AddItem(-1) as IXMLLabelCharacteristics;
end;

function TXMLLabelCharacteristicsList.Insert(const Index: Integer): IXMLLabelCharacteristics;
begin
  Result := AddItem(Index) as IXMLLabelCharacteristics;
end;
function TXMLLabelCharacteristicsList.Get_Item(Index: Integer): IXMLLabelCharacteristics;
begin
  Result := List[Index] as IXMLLabelCharacteristics;
end;

{ TXMLColourCode }

function TXMLColourCode.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLColourCode.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLStencilCharacteristics }

procedure TXMLStencilCharacteristics.AfterConstruction;
begin
  ItemTag := 'StencilText';
  ItemInterface := IXMLNode;
  inherited;
end;

function TXMLStencilCharacteristics.Get_StencilType: WideString;
begin
  Result := AttributeNodes['StencilType'].Text;
end;

procedure TXMLStencilCharacteristics.Set_StencilType(Value: WideString);
begin
  SetAttribute('StencilType', Value);
end;

function TXMLStencilCharacteristics.Get_StencilInkType: WideString;
begin
  Result := AttributeNodes['StencilInkType'].Text;
end;

procedure TXMLStencilCharacteristics.Set_StencilInkType(Value: WideString);
begin
  SetAttribute('StencilInkType', Value);
end;

function TXMLStencilCharacteristics.Get_StencilLocation: WideString;
begin
  Result := AttributeNodes['StencilLocation'].Text;
end;

procedure TXMLStencilCharacteristics.Set_StencilLocation(Value: WideString);
begin
  SetAttribute('StencilLocation', Value);
end;

function TXMLStencilCharacteristics.Get_StencilContent: WideString;
begin
  Result := AttributeNodes['StencilContent'].Text;
end;

procedure TXMLStencilCharacteristics.Set_StencilContent(Value: WideString);
begin
  SetAttribute('StencilContent', Value);
end;

function TXMLStencilCharacteristics.Get_StencilFormat: WideString;
begin
  Result := AttributeNodes['StencilFormat'].Text;
end;

procedure TXMLStencilCharacteristics.Set_StencilFormat(Value: WideString);
begin
  SetAttribute('StencilFormat', Value);
end;

function TXMLStencilCharacteristics.Get_StencilText(Index: Integer): WideString;
begin
  Result := List[Index].Text;
end;

function TXMLStencilCharacteristics.Add(const StencilText: WideString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := StencilText;
end;

function TXMLStencilCharacteristics.Insert(const Index: Integer; const StencilText: WideString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := StencilText;
end;

{ TXMLStencilCharacteristicsList }

function TXMLStencilCharacteristicsList.Add: IXMLStencilCharacteristics;
begin
  Result := AddItem(-1) as IXMLStencilCharacteristics;
end;

function TXMLStencilCharacteristicsList.Insert(const Index: Integer): IXMLStencilCharacteristics;
begin
  Result := AddItem(Index) as IXMLStencilCharacteristics;
end;
function TXMLStencilCharacteristicsList.Get_Item(Index: Integer): IXMLStencilCharacteristics;
begin
  Result := List[Index] as IXMLStencilCharacteristics;
end;

{ TXMLWrapCharacteristics }

procedure TXMLWrapCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Wrap', TXMLWrap);
  FWrap := CreateCollection(TXMLWrapList, IXMLWrap, 'Wrap') as IXMLWrapList;
  inherited;
end;

function TXMLWrapCharacteristics.Get_PackagesPerWrap: LongWord;
begin
  Result := ChildNodes['PackagesPerWrap'].NodeValue;
end;

procedure TXMLWrapCharacteristics.Set_PackagesPerWrap(Value: LongWord);
begin
  ChildNodes['PackagesPerWrap'].NodeValue := Value;
end;

function TXMLWrapCharacteristics.Get_Wrap: IXMLWrapList;
begin
  Result := FWrap;
end;

{ TXMLWrap }

function TXMLWrap.Get_WrapType: WideString;
begin
  Result := AttributeNodes['WrapType'].Text;
end;

procedure TXMLWrap.Set_WrapType(Value: WideString);
begin
  SetAttribute('WrapType', Value);
end;

function TXMLWrap.Get_WrapProperties: WideString;
begin
  Result := AttributeNodes['WrapProperties'].Text;
end;

procedure TXMLWrap.Set_WrapProperties(Value: WideString);
begin
  SetAttribute('WrapProperties', Value);
end;

function TXMLWrap.Get_WrapLocation: WideString;
begin
  Result := AttributeNodes['WrapLocation'].Text;
end;

procedure TXMLWrap.Set_WrapLocation(Value: WideString);
begin
  SetAttribute('WrapLocation', Value);
end;

function TXMLWrap.Get_NumberOfWraps: WideString;
begin
  Result := ChildNodes['NumberOfWraps'].Text;
end;

procedure TXMLWrap.Set_NumberOfWraps(Value: WideString);
begin
  ChildNodes['NumberOfWraps'].NodeValue := Value;
end;

function TXMLWrap.Get_Brand: WideString;
begin
  Result := ChildNodes['Brand'].Text;
end;

procedure TXMLWrap.Set_Brand(Value: WideString);
begin
  ChildNodes['Brand'].NodeValue := Value;
end;

{ TXMLWrapList }

function TXMLWrapList.Add: IXMLWrap;
begin
  Result := AddItem(-1) as IXMLWrap;
end;

function TXMLWrapList.Insert(const Index: Integer): IXMLWrap;
begin
  Result := AddItem(Index) as IXMLWrap;
end;
function TXMLWrapList.Get_Item(Index: Integer): IXMLWrap;
begin
  Result := List[Index] as IXMLWrap;
end;

{ TXMLBandCharacteristics }

procedure TXMLBandCharacteristics.AfterConstruction;
begin
  FBandColour := CreateCollection(TXMLS20List, IXMLNode, 'BandColour') as IXMLS20List;
  inherited;
end;

function TXMLBandCharacteristics.Get_BandType: WideString;
begin
  Result := AttributeNodes['BandType'].Text;
end;

procedure TXMLBandCharacteristics.Set_BandType(Value: WideString);
begin
  SetAttribute('BandType', Value);
end;

function TXMLBandCharacteristics.Get_BandsRequired: WideString;
begin
  Result := AttributeNodes['BandsRequired'].Text;
end;

procedure TXMLBandCharacteristics.Set_BandsRequired(Value: WideString);
begin
  SetAttribute('BandsRequired', Value);
end;

function TXMLBandCharacteristics.Get_BandDirection: WideString;
begin
  Result := AttributeNodes['BandDirection'].Text;
end;

procedure TXMLBandCharacteristics.Set_BandDirection(Value: WideString);
begin
  SetAttribute('BandDirection', Value);
end;

function TXMLBandCharacteristics.Get_NumberOfBands: LongWord;
begin
  Result := ChildNodes['NumberOfBands'].NodeValue;
end;

procedure TXMLBandCharacteristics.Set_NumberOfBands(Value: LongWord);
begin
  ChildNodes['NumberOfBands'].NodeValue := Value;
end;

function TXMLBandCharacteristics.Get_BandColour: IXMLS20List;
begin
  Result := FBandColour;
end;

{ TXMLBandCharacteristicsList }

function TXMLBandCharacteristicsList.Add: IXMLBandCharacteristics;
begin
  Result := AddItem(-1) as IXMLBandCharacteristics;
end;

function TXMLBandCharacteristicsList.Insert(const Index: Integer): IXMLBandCharacteristics;
begin
  Result := AddItem(Index) as IXMLBandCharacteristics;
end;
function TXMLBandCharacteristicsList.Get_Item(Index: Integer): IXMLBandCharacteristics;
begin
  Result := List[Index] as IXMLBandCharacteristics;
end;

{ TXMLPalletPackagingCharacteristics }

procedure TXMLPalletPackagingCharacteristics.AfterConstruction;
begin
  RegisterChildNode('PackagingCode', TXMLPackagingCode);
  RegisterChildNode('PackagingDescription', TXMLPackagingDescription);
  RegisterChildNode('WrapCharacteristics', TXMLWrapCharacteristics);
  RegisterChildNode('PalletCharacteristics', TXMLPalletCharacteristics);
  RegisterChildNode('BandCharacteristics', TXMLBandCharacteristics);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('MaximumHeight', TXMLMeasurement);
  RegisterChildNode('MaximumGrossWeight', TXMLMeasurement);
  FLabelCharacteristics := CreateCollection(TXMLLabelCharacteristicsList, IXMLLabelCharacteristics, 'LabelCharacteristics') as IXMLLabelCharacteristicsList;
  FStencilCharacteristics := CreateCollection(TXMLStencilCharacteristicsList, IXMLStencilCharacteristics, 'StencilCharacteristics') as IXMLStencilCharacteristicsList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLPalletPackagingCharacteristics.Get_PackagingCode: IXMLPackagingCode;
begin
  Result := ChildNodes['PackagingCode'] as IXMLPackagingCode;
end;

function TXMLPalletPackagingCharacteristics.Get_PackagingDescription: IXMLPackagingDescription;
begin
  Result := ChildNodes['PackagingDescription'] as IXMLPackagingDescription;
end;

function TXMLPalletPackagingCharacteristics.Get_WrapCharacteristics: IXMLWrapCharacteristics;
begin
  Result := ChildNodes['WrapCharacteristics'] as IXMLWrapCharacteristics;
end;

function TXMLPalletPackagingCharacteristics.Get_PalletCharacteristics: IXMLPalletCharacteristics;
begin
  Result := ChildNodes['PalletCharacteristics'] as IXMLPalletCharacteristics;
end;

function TXMLPalletPackagingCharacteristics.Get_BandCharacteristics: IXMLBandCharacteristics;
begin
  Result := ChildNodes['BandCharacteristics'] as IXMLBandCharacteristics;
end;

function TXMLPalletPackagingCharacteristics.Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
begin
  Result := FLabelCharacteristics;
end;

function TXMLPalletPackagingCharacteristics.Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
begin
  Result := FStencilCharacteristics;
end;

function TXMLPalletPackagingCharacteristics.Get_MaximumHeight: IXMLMeasurement;
begin
  Result := ChildNodes['MaximumHeight'] as IXMLMeasurement;
end;

function TXMLPalletPackagingCharacteristics.Get_MaximumGrossWeight: IXMLMeasurement;
begin
  Result := ChildNodes['MaximumGrossWeight'] as IXMLMeasurement;
end;

function TXMLPalletPackagingCharacteristics.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLPackagingCode }

function TXMLPackagingCode.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLPackagingCode.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLPackagingCodeList }

function TXMLPackagingCodeList.Add: IXMLPackagingCode;
begin
  Result := AddItem(-1) as IXMLPackagingCode;
end;

function TXMLPackagingCodeList.Insert(const Index: Integer): IXMLPackagingCode;
begin
  Result := AddItem(Index) as IXMLPackagingCode;
end;
function TXMLPackagingCodeList.Get_Item(Index: Integer): IXMLPackagingCode;
begin
  Result := List[Index] as IXMLPackagingCode;
end;

{ TXMLPackagingDescription }

function TXMLPackagingDescription.Get_Language: WideString;
begin
  Result := AttributeNodes['Language'].Text;
end;

procedure TXMLPackagingDescription.Set_Language(Value: WideString);
begin
  SetAttribute('Language', Value);
end;

{ TXMLPackagingDescriptionList }

function TXMLPackagingDescriptionList.Add: IXMLPackagingDescription;
begin
  Result := AddItem(-1) as IXMLPackagingDescription;
end;

function TXMLPackagingDescriptionList.Insert(const Index: Integer): IXMLPackagingDescription;
begin
  Result := AddItem(Index) as IXMLPackagingDescription;
end;
function TXMLPackagingDescriptionList.Get_Item(Index: Integer): IXMLPackagingDescription;
begin
  Result := List[Index] as IXMLPackagingDescription;
end;

{ TXMLPalletCharacteristics }

procedure TXMLPalletCharacteristics.AfterConstruction;
begin
  RegisterChildNode('PalletLength', TXMLMeasurement);
  RegisterChildNode('PalletWidth', TXMLMeasurement);
  RegisterChildNode('MaximumHeight', TXMLMeasurement);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  inherited;
end;

function TXMLPalletCharacteristics.Get_MixedProductPalletIndicator: WideString;
begin
  Result := AttributeNodes['MixedProductPalletIndicator'].Text;
end;

procedure TXMLPalletCharacteristics.Set_MixedProductPalletIndicator(Value: WideString);
begin
  SetAttribute('MixedProductPalletIndicator', Value);
end;

function TXMLPalletCharacteristics.Get_PalletType: WideString;
begin
  Result := AttributeNodes['PalletType'].Text;
end;

procedure TXMLPalletCharacteristics.Set_PalletType(Value: WideString);
begin
  SetAttribute('PalletType', Value);
end;

function TXMLPalletCharacteristics.Get_PalletLedgeType: WideString;
begin
  Result := AttributeNodes['PalletLedgeType'].Text;
end;

procedure TXMLPalletCharacteristics.Set_PalletLedgeType(Value: WideString);
begin
  SetAttribute('PalletLedgeType', Value);
end;

function TXMLPalletCharacteristics.Get_PalletCoverType: WideString;
begin
  Result := AttributeNodes['PalletCoverType'].Text;
end;

procedure TXMLPalletCharacteristics.Set_PalletCoverType(Value: WideString);
begin
  SetAttribute('PalletCoverType', Value);
end;

function TXMLPalletCharacteristics.Get_PalletAdditionsType: WideString;
begin
  Result := AttributeNodes['PalletAdditionsType'].Text;
end;

procedure TXMLPalletCharacteristics.Set_PalletAdditionsType(Value: WideString);
begin
  SetAttribute('PalletAdditionsType', Value);
end;

function TXMLPalletCharacteristics.Get_PalletTopType: WideString;
begin
  Result := AttributeNodes['PalletTopType'].Text;
end;

procedure TXMLPalletCharacteristics.Set_PalletTopType(Value: WideString);
begin
  SetAttribute('PalletTopType', Value);
end;

function TXMLPalletCharacteristics.Get_PalletLength: IXMLMeasurement;
begin
  Result := ChildNodes['PalletLength'] as IXMLMeasurement;
end;

function TXMLPalletCharacteristics.Get_PalletWidth: IXMLMeasurement;
begin
  Result := ChildNodes['PalletWidth'] as IXMLMeasurement;
end;

function TXMLPalletCharacteristics.Get_ItemsPerPallet: LongWord;
begin
  Result := ChildNodes['ItemsPerPallet'].NodeValue;
end;

procedure TXMLPalletCharacteristics.Set_ItemsPerPallet(Value: LongWord);
begin
  ChildNodes['ItemsPerPallet'].NodeValue := Value;
end;

function TXMLPalletCharacteristics.Get_StacksPerPallet: LongWord;
begin
  Result := ChildNodes['StacksPerPallet'].NodeValue;
end;

procedure TXMLPalletCharacteristics.Set_StacksPerPallet(Value: LongWord);
begin
  ChildNodes['StacksPerPallet'].NodeValue := Value;
end;

function TXMLPalletCharacteristics.Get_TiersPerPallet: LongWord;
begin
  Result := ChildNodes['TiersPerPallet'].NodeValue;
end;

procedure TXMLPalletCharacteristics.Set_TiersPerPallet(Value: LongWord);
begin
  ChildNodes['TiersPerPallet'].NodeValue := Value;
end;

function TXMLPalletCharacteristics.Get_MaximumHeight: IXMLMeasurement;
begin
  Result := ChildNodes['MaximumHeight'] as IXMLMeasurement;
end;

function TXMLPalletCharacteristics.Get_StackingMethod: WideString;
begin
  Result := ChildNodes['StackingMethod'].Text;
end;

procedure TXMLPalletCharacteristics.Set_StackingMethod(Value: WideString);
begin
  ChildNodes['StackingMethod'].NodeValue := Value;
end;

function TXMLPalletCharacteristics.Get_LabelCharacteristics: IXMLLabelCharacteristics;
begin
  Result := ChildNodes['LabelCharacteristics'] as IXMLLabelCharacteristics;
end;

{ TXMLPalletCharacteristicsList }

function TXMLPalletCharacteristicsList.Add: IXMLPalletCharacteristics;
begin
  Result := AddItem(-1) as IXMLPalletCharacteristics;
end;

function TXMLPalletCharacteristicsList.Insert(const Index: Integer): IXMLPalletCharacteristics;
begin
  Result := AddItem(Index) as IXMLPalletCharacteristics;
end;
function TXMLPalletCharacteristicsList.Get_Item(Index: Integer): IXMLPalletCharacteristics;
begin
  Result := List[Index] as IXMLPalletCharacteristics;
end;

{ TXMLBookUnitPacking }

procedure TXMLBookUnitPacking.AfterConstruction;
begin
  RegisterChildNode('UnitCharacteristics', TXMLUnitCharacteristics);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('WrapCharacteristics', TXMLWrapCharacteristics);
  FLabelCharacteristics := CreateCollection(TXMLLabelCharacteristicsList, IXMLLabelCharacteristics, 'LabelCharacteristics') as IXMLLabelCharacteristicsList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLBookUnitPacking.Get_BookUnitType: WideString;
begin
  Result := AttributeNodes['BookUnitType'].Text;
end;

procedure TXMLBookUnitPacking.Set_BookUnitType(Value: WideString);
begin
  SetAttribute('BookUnitType', Value);
end;

function TXMLBookUnitPacking.Get_UnitCharacteristics: IXMLUnitCharacteristics;
begin
  Result := ChildNodes['UnitCharacteristics'] as IXMLUnitCharacteristics;
end;

function TXMLBookUnitPacking.Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
begin
  Result := FLabelCharacteristics;
end;

function TXMLBookUnitPacking.Get_StencilCharacteristics: IXMLStencilCharacteristics;
begin
  Result := ChildNodes['StencilCharacteristics'] as IXMLStencilCharacteristics;
end;

function TXMLBookUnitPacking.Get_WrapCharacteristics: IXMLWrapCharacteristics;
begin
  Result := ChildNodes['WrapCharacteristics'] as IXMLWrapCharacteristics;
end;

function TXMLBookUnitPacking.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLUnitCharacteristics }

procedure TXMLUnitCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Height', TXMLMeasurement);
  RegisterChildNode('Thickness', TXMLMeasurement);
  RegisterChildNode('Width', TXMLMeasurement);
  RegisterChildNode('Weight', TXMLMeasurement);
  inherited;
end;

function TXMLUnitCharacteristics.Get_Height: IXMLMeasurement;
begin
  Result := ChildNodes['Height'] as IXMLMeasurement;
end;

function TXMLUnitCharacteristics.Get_Thickness: IXMLMeasurement;
begin
  Result := ChildNodes['Thickness'] as IXMLMeasurement;
end;

function TXMLUnitCharacteristics.Get_Width: IXMLMeasurement;
begin
  Result := ChildNodes['Width'] as IXMLMeasurement;
end;

function TXMLUnitCharacteristics.Get_Weight: IXMLMeasurement;
begin
  Result := ChildNodes['Weight'] as IXMLMeasurement;
end;

{ TXMLLabelStock }

procedure TXMLLabelStock.AfterConstruction;
begin
  RegisterChildNode('LabelStockCharacteristics', TXMLLabelStockCharacteristics);
  RegisterChildNode('SingleWidthReel', TXMLSingleWidthReel);
  RegisterChildNode('TrimmedReel', TXMLTrimmedReel);
  RegisterChildNode('Sheet', TXMLSheet);
  inherited;
end;

function TXMLLabelStock.Get_LabelStockCharacteristics: IXMLLabelStockCharacteristics;
begin
  Result := ChildNodes['LabelStockCharacteristics'] as IXMLLabelStockCharacteristics;
end;

function TXMLLabelStock.Get_SingleWidthReel: IXMLSingleWidthReel;
begin
  Result := ChildNodes['SingleWidthReel'] as IXMLSingleWidthReel;
end;

function TXMLLabelStock.Get_TrimmedReel: IXMLTrimmedReel;
begin
  Result := ChildNodes['TrimmedReel'] as IXMLTrimmedReel;
end;

function TXMLLabelStock.Get_Sheet: IXMLSheet;
begin
  Result := ChildNodes['Sheet'] as IXMLSheet;
end;

{ TXMLLabelStockCharacteristics }

procedure TXMLLabelStockCharacteristics.AfterConstruction;
begin
  RegisterChildNode('LabelStockLayer', TXMLLabelStockLayer);
  RegisterChildNode('ExtraFeature', TXMLExtraFeature);
  FLabelStockLayer := CreateCollection(TXMLLabelStockLayerList, IXMLLabelStockLayer, 'LabelStockLayer') as IXMLLabelStockLayerList;
  FExtraFeature := CreateCollection(TXMLExtraFeatureList, IXMLExtraFeature, 'ExtraFeature') as IXMLExtraFeatureList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLLabelStockCharacteristics.Get_LabelStockLayer: IXMLLabelStockLayerList;
begin
  Result := FLabelStockLayer;
end;

function TXMLLabelStockCharacteristics.Get_ExtraFeature: IXMLExtraFeatureList;
begin
  Result := FExtraFeature;
end;

function TXMLLabelStockCharacteristics.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLLabelStockLayer }

procedure TXMLLabelStockLayer.AfterConstruction;
begin
  RegisterChildNode('LayerMaterial', TXMLLayerMaterial);
  inherited;
end;

function TXMLLabelStockLayer.Get_LabelStockLayerType: WideString;
begin
  Result := ChildNodes['LabelStockLayerType'].Text;
end;

procedure TXMLLabelStockLayer.Set_LabelStockLayerType(Value: WideString);
begin
  ChildNodes['LabelStockLayerType'].NodeValue := Value;
end;

function TXMLLabelStockLayer.Get_LabelStockLayerNumber: LongWord;
begin
  Result := ChildNodes['LabelStockLayerNumber'].NodeValue;
end;

procedure TXMLLabelStockLayer.Set_LabelStockLayerNumber(Value: LongWord);
begin
  ChildNodes['LabelStockLayerNumber'].NodeValue := Value;
end;

function TXMLLabelStockLayer.Get_LayerMaterial: IXMLLayerMaterial;
begin
  Result := ChildNodes['LayerMaterial'] as IXMLLayerMaterial;
end;

{ TXMLLabelStockLayerList }

function TXMLLabelStockLayerList.Add: IXMLLabelStockLayer;
begin
  Result := AddItem(-1) as IXMLLabelStockLayer;
end;

function TXMLLabelStockLayerList.Insert(const Index: Integer): IXMLLabelStockLayer;
begin
  Result := AddItem(Index) as IXMLLabelStockLayer;
end;
function TXMLLabelStockLayerList.Get_Item(Index: Integer): IXMLLabelStockLayer;
begin
  Result := List[Index] as IXMLLabelStockLayer;
end;

{ TXMLLayerMaterial }

procedure TXMLLayerMaterial.AfterConstruction;
begin
  RegisterChildNode('ProductIdentifier', TXMLProductIdentifier);
  inherited;
end;

function TXMLLayerMaterial.Get_ProductIdentifier: IXMLProductIdentifier;
begin
  Result := ChildNodes['ProductIdentifier'] as IXMLProductIdentifier;
end;

function TXMLLayerMaterial.Get_LayerMaterialName: WideString;
begin
  Result := ChildNodes['LayerMaterialName'].Text;
end;

procedure TXMLLayerMaterial.Set_LayerMaterialName(Value: WideString);
begin
  ChildNodes['LayerMaterialName'].NodeValue := Value;
end;

{ TXMLExtraFeature }

procedure TXMLExtraFeature.AfterConstruction;
begin
  RegisterChildNode('ProductIdentifier', TXMLProductIdentifier);
  inherited;
end;

function TXMLExtraFeature.Get_ProductIdentifier: IXMLProductIdentifier;
begin
  Result := ChildNodes['ProductIdentifier'] as IXMLProductIdentifier;
end;

function TXMLExtraFeature.Get_ExtraFeatureDescription: WideString;
begin
  Result := ChildNodes['ExtraFeatureDescription'].Text;
end;

procedure TXMLExtraFeature.Set_ExtraFeatureDescription(Value: WideString);
begin
  ChildNodes['ExtraFeatureDescription'].NodeValue := Value;
end;

{ TXMLExtraFeatureList }

function TXMLExtraFeatureList.Add: IXMLExtraFeature;
begin
  Result := AddItem(-1) as IXMLExtraFeature;
end;

function TXMLExtraFeatureList.Insert(const Index: Integer): IXMLExtraFeature;
begin
  Result := AddItem(Index) as IXMLExtraFeature;
end;
function TXMLExtraFeatureList.Get_Item(Index: Integer): IXMLExtraFeature;
begin
  Result := List[Index] as IXMLExtraFeature;
end;

{ TXMLSingleWidthReel }

procedure TXMLSingleWidthReel.AfterConstruction;
begin
  RegisterChildNode('SingleWidthReelConversionCharacteristics', TXMLSingleWidthReelConversionCharacteristics);
  RegisterChildNode('ReelPackagingCharacteristics', TXMLReelPackagingCharacteristicsClass);
  inherited;
end;

function TXMLSingleWidthReel.Get_SingleWidthReelConversionCharacteristics: IXMLSingleWidthReelConversionCharacteristics;
begin
  Result := ChildNodes['SingleWidthReelConversionCharacteristics'] as IXMLSingleWidthReelConversionCharacteristics;
end;

function TXMLSingleWidthReel.Get_ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass;
begin
  Result := ChildNodes['ReelPackagingCharacteristics'] as IXMLReelPackagingCharacteristicsClass;
end;

{ TXMLSingleWidthReelConversionCharacteristics }

procedure TXMLSingleWidthReelConversionCharacteristics.AfterConstruction;
begin
  RegisterChildNode('ReelWidth', TXMLMeasurement);
  RegisterChildNode('ReelDiameter', TXMLMeasurement);
  RegisterChildNode('ReelLength', TXMLMeasurement);
  RegisterChildNode('CoreCharacteristics', TXMLCoreCharacteristics);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLSingleWidthReelConversionCharacteristics.Get_WindingDirection: WideString;
begin
  Result := ChildNodes['WindingDirection'].Text;
end;

procedure TXMLSingleWidthReelConversionCharacteristics.Set_WindingDirection(Value: WideString);
begin
  ChildNodes['WindingDirection'].NodeValue := Value;
end;

function TXMLSingleWidthReelConversionCharacteristics.Get_TrimmedOrderType: WideString;
begin
  Result := ChildNodes['TrimmedOrderType'].Text;
end;

procedure TXMLSingleWidthReelConversionCharacteristics.Set_TrimmedOrderType(Value: WideString);
begin
  ChildNodes['TrimmedOrderType'].NodeValue := Value;
end;

function TXMLSingleWidthReelConversionCharacteristics.Get_ReelWidth: IXMLMeasurement;
begin
  Result := ChildNodes['ReelWidth'] as IXMLMeasurement;
end;

function TXMLSingleWidthReelConversionCharacteristics.Get_ReelDiameter: IXMLMeasurement;
begin
  Result := ChildNodes['ReelDiameter'] as IXMLMeasurement;
end;

function TXMLSingleWidthReelConversionCharacteristics.Get_ReelLength: IXMLMeasurement;
begin
  Result := ChildNodes['ReelLength'] as IXMLMeasurement;
end;

function TXMLSingleWidthReelConversionCharacteristics.Get_CoreCharacteristics: IXMLCoreCharacteristics;
begin
  Result := ChildNodes['CoreCharacteristics'] as IXMLCoreCharacteristics;
end;

function TXMLSingleWidthReelConversionCharacteristics.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLCoreCharacteristics }

procedure TXMLCoreCharacteristics.AfterConstruction;
begin
  RegisterChildNode('CoreDiameterInside', TXMLMeasurement);
  RegisterChildNode('CoreDiameterOutside', TXMLMeasurement);
  RegisterChildNode('CoreStrengthCode', TXMLCoreStrengthCode);
  inherited;
end;

function TXMLCoreCharacteristics.Get_CoreEndType: WideString;
begin
  Result := AttributeNodes['CoreEndType'].Text;
end;

procedure TXMLCoreCharacteristics.Set_CoreEndType(Value: WideString);
begin
  SetAttribute('CoreEndType', Value);
end;

function TXMLCoreCharacteristics.Get_CoreMaterialType: WideString;
begin
  Result := AttributeNodes['CoreMaterialType'].Text;
end;

procedure TXMLCoreCharacteristics.Set_CoreMaterialType(Value: WideString);
begin
  SetAttribute('CoreMaterialType', Value);
end;

function TXMLCoreCharacteristics.Get_CoreDiameterInside: IXMLMeasurement;
begin
  Result := ChildNodes['CoreDiameterInside'] as IXMLMeasurement;
end;

function TXMLCoreCharacteristics.Get_CoreDiameterOutside: IXMLMeasurement;
begin
  Result := ChildNodes['CoreDiameterOutside'] as IXMLMeasurement;
end;

function TXMLCoreCharacteristics.Get_CoreStrengthCode: IXMLCoreStrengthCode;
begin
  Result := ChildNodes['CoreStrengthCode'] as IXMLCoreStrengthCode;
end;

{ TXMLCoreCharacteristicsList }

function TXMLCoreCharacteristicsList.Add: IXMLCoreCharacteristics;
begin
  Result := AddItem(-1) as IXMLCoreCharacteristics;
end;

function TXMLCoreCharacteristicsList.Insert(const Index: Integer): IXMLCoreCharacteristics;
begin
  Result := AddItem(Index) as IXMLCoreCharacteristics;
end;
function TXMLCoreCharacteristicsList.Get_Item(Index: Integer): IXMLCoreCharacteristics;
begin
  Result := List[Index] as IXMLCoreCharacteristics;
end;

{ TXMLCoreStrengthCode }

function TXMLCoreStrengthCode.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLCoreStrengthCode.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLReelPackagingCharacteristicsClass }

procedure TXMLReelPackagingCharacteristicsClass.AfterConstruction;
begin
  RegisterChildNode('PackagingCode', TXMLPackagingCode);
  RegisterChildNode('PackagingDescription', TXMLPackagingDescription);
  RegisterChildNode('Wrap', TXMLWrap);
  RegisterChildNode('BandCharacteristics', TXMLBandCharacteristics);
  RegisterChildNode('PalletCharacteristics', TXMLPalletCharacteristics);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('MaximumHeight', TXMLMeasurement);
  RegisterChildNode('MaximumGrossWeight', TXMLMeasurement);
  RegisterChildNode('MaximumClampingForce', TXMLMaximumClampingForce);
  FWrap := CreateCollection(TXMLWrapList, IXMLWrap, 'Wrap') as IXMLWrapList;
  FEndCaps := CreateCollection(TXMLS20List, IXMLNode, 'EndCaps') as IXMLS20List;
  FCorePlugs := CreateCollection(TXMLNni1List, IXMLNode, 'CorePlugs') as IXMLNni1List;
  FBandCharacteristics := CreateCollection(TXMLBandCharacteristicsList, IXMLBandCharacteristics, 'BandCharacteristics') as IXMLBandCharacteristicsList;
  FPalletCharacteristics := CreateCollection(TXMLPalletCharacteristicsList, IXMLPalletCharacteristics, 'PalletCharacteristics') as IXMLPalletCharacteristicsList;
  FLabelCharacteristics := CreateCollection(TXMLLabelCharacteristicsList, IXMLLabelCharacteristics, 'LabelCharacteristics') as IXMLLabelCharacteristicsList;
  FStencilCharacteristics := CreateCollection(TXMLStencilCharacteristicsList, IXMLStencilCharacteristics, 'StencilCharacteristics') as IXMLStencilCharacteristicsList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLReelPackagingCharacteristicsClass.Get_ActionType: WideString;
begin
  Result := AttributeNodes['ActionType'].Text;
end;

procedure TXMLReelPackagingCharacteristicsClass.Set_ActionType(Value: WideString);
begin
  SetAttribute('ActionType', Value);
end;

function TXMLReelPackagingCharacteristicsClass.Get_PackagingCode: IXMLPackagingCode;
begin
  Result := ChildNodes['PackagingCode'] as IXMLPackagingCode;
end;

function TXMLReelPackagingCharacteristicsClass.Get_PackagingDescription: IXMLPackagingDescription;
begin
  Result := ChildNodes['PackagingDescription'] as IXMLPackagingDescription;
end;

function TXMLReelPackagingCharacteristicsClass.Get_ReelsPerPack: LongWord;
begin
  Result := ChildNodes['ReelsPerPack'].NodeValue;
end;

procedure TXMLReelPackagingCharacteristicsClass.Set_ReelsPerPack(Value: LongWord);
begin
  ChildNodes['ReelsPerPack'].NodeValue := Value;
end;

function TXMLReelPackagingCharacteristicsClass.Get_Wrap: IXMLWrapList;
begin
  Result := FWrap;
end;

function TXMLReelPackagingCharacteristicsClass.Get_EndCaps: IXMLS20List;
begin
  Result := FEndCaps;
end;

function TXMLReelPackagingCharacteristicsClass.Get_CorePlugs: IXMLNni1List;
begin
  Result := FCorePlugs;
end;

function TXMLReelPackagingCharacteristicsClass.Get_BandCharacteristics: IXMLBandCharacteristicsList;
begin
  Result := FBandCharacteristics;
end;

function TXMLReelPackagingCharacteristicsClass.Get_PalletCharacteristics: IXMLPalletCharacteristicsList;
begin
  Result := FPalletCharacteristics;
end;

function TXMLReelPackagingCharacteristicsClass.Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
begin
  Result := FLabelCharacteristics;
end;

function TXMLReelPackagingCharacteristicsClass.Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
begin
  Result := FStencilCharacteristics;
end;

function TXMLReelPackagingCharacteristicsClass.Get_MaximumHeight: IXMLMeasurement;
begin
  Result := ChildNodes['MaximumHeight'] as IXMLMeasurement;
end;

function TXMLReelPackagingCharacteristicsClass.Get_MaximumGrossWeight: IXMLMeasurement;
begin
  Result := ChildNodes['MaximumGrossWeight'] as IXMLMeasurement;
end;

function TXMLReelPackagingCharacteristicsClass.Get_MaximumClampingForce: IXMLMaximumClampingForce;
begin
  Result := ChildNodes['MaximumClampingForce'] as IXMLMaximumClampingForce;
end;

function TXMLReelPackagingCharacteristicsClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLMaximumClampingForce }

procedure TXMLMaximumClampingForce.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  RegisterChildNode('RangeMin', TXMLRangeMin);
  RegisterChildNode('RangeMax', TXMLRangeMax);
  inherited;
end;

function TXMLMaximumClampingForce.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

function TXMLMaximumClampingForce.Get_RangeMin: IXMLRangeMin;
begin
  Result := ChildNodes['RangeMin'] as IXMLRangeMin;
end;

function TXMLMaximumClampingForce.Get_RangeMax: IXMLRangeMax;
begin
  Result := ChildNodes['RangeMax'] as IXMLRangeMax;
end;

{ TXMLTrimmedReel }

procedure TXMLTrimmedReel.AfterConstruction;
begin
  RegisterChildNode('TrimmedReelConversionCharacteristics', TXMLTrimmedReelConversionCharacteristics);
  RegisterChildNode('ReelPackagingCharacteristics', TXMLReelPackagingCharacteristicsClass);
  inherited;
end;

function TXMLTrimmedReel.Get_TrimmedReelConversionCharacteristics: IXMLTrimmedReelConversionCharacteristics;
begin
  Result := ChildNodes['TrimmedReelConversionCharacteristics'] as IXMLTrimmedReelConversionCharacteristics;
end;

function TXMLTrimmedReel.Get_ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass;
begin
  Result := ChildNodes['ReelPackagingCharacteristics'] as IXMLReelPackagingCharacteristicsClass;
end;

{ TXMLTrimmedReelConversionCharacteristics }

procedure TXMLTrimmedReelConversionCharacteristics.AfterConstruction;
begin
  RegisterChildNode('MasterReelWidth', TXMLMeasurement);
  RegisterChildNode('ReelDiameter', TXMLMeasurement);
  RegisterChildNode('ReelLength', TXMLMeasurement);
  RegisterChildNode('MaximumOffcut', TXMLMeasurement);
  RegisterChildNode('CoreCharacteristics', TXMLCoreCharacteristics);
  RegisterChildNode('SlitReel', TXMLSlitReel);
  FSlitReel := CreateCollection(TXMLSlitReelList, IXMLSlitReel, 'SlitReel') as IXMLSlitReelList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLTrimmedReelConversionCharacteristics.Get_WindingDirection: WideString;
begin
  Result := ChildNodes['WindingDirection'].Text;
end;

procedure TXMLTrimmedReelConversionCharacteristics.Set_WindingDirection(Value: WideString);
begin
  ChildNodes['WindingDirection'].NodeValue := Value;
end;

function TXMLTrimmedReelConversionCharacteristics.Get_TrimmedOrderType: WideString;
begin
  Result := ChildNodes['TrimmedOrderType'].Text;
end;

procedure TXMLTrimmedReelConversionCharacteristics.Set_TrimmedOrderType(Value: WideString);
begin
  ChildNodes['TrimmedOrderType'].NodeValue := Value;
end;

function TXMLTrimmedReelConversionCharacteristics.Get_MasterReelWidth: IXMLMeasurement;
begin
  Result := ChildNodes['MasterReelWidth'] as IXMLMeasurement;
end;

function TXMLTrimmedReelConversionCharacteristics.Get_ReelDiameter: IXMLMeasurement;
begin
  Result := ChildNodes['ReelDiameter'] as IXMLMeasurement;
end;

function TXMLTrimmedReelConversionCharacteristics.Get_ReelLength: IXMLMeasurement;
begin
  Result := ChildNodes['ReelLength'] as IXMLMeasurement;
end;

function TXMLTrimmedReelConversionCharacteristics.Get_MaximumOffcut: IXMLMeasurement;
begin
  Result := ChildNodes['MaximumOffcut'] as IXMLMeasurement;
end;

function TXMLTrimmedReelConversionCharacteristics.Get_CoreCharacteristics: IXMLCoreCharacteristics;
begin
  Result := ChildNodes['CoreCharacteristics'] as IXMLCoreCharacteristics;
end;

function TXMLTrimmedReelConversionCharacteristics.Get_SlitReel: IXMLSlitReelList;
begin
  Result := FSlitReel;
end;

function TXMLTrimmedReelConversionCharacteristics.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLSlitReel }

procedure TXMLSlitReel.AfterConstruction;
begin
  RegisterChildNode('SlitReelWidth', TXMLMeasurement);
  RegisterChildNode('SlitReelOrderQuantity', TXMLSlitReelOrderQuantity);
  RegisterChildNode('SlitReelReference', TXMLSlitReelReference);
  FSlitReelReference := CreateCollection(TXMLSlitReelReferenceList, IXMLSlitReelReference, 'SlitReelReference') as IXMLSlitReelReferenceList;
  inherited;
end;

function TXMLSlitReel.Get_DeliveryIndicator: WideString;
begin
  Result := ChildNodes['DeliveryIndicator'].Text;
end;

procedure TXMLSlitReel.Set_DeliveryIndicator(Value: WideString);
begin
  ChildNodes['DeliveryIndicator'].NodeValue := Value;
end;

function TXMLSlitReel.Get_SlitReelLineNumber: LongWord;
begin
  Result := ChildNodes['SlitReelLineNumber'].NodeValue;
end;

procedure TXMLSlitReel.Set_SlitReelLineNumber(Value: LongWord);
begin
  ChildNodes['SlitReelLineNumber'].NodeValue := Value;
end;

function TXMLSlitReel.Get_SlitReelWidth: IXMLMeasurement;
begin
  Result := ChildNodes['SlitReelWidth'] as IXMLMeasurement;
end;

function TXMLSlitReel.Get_SlitReelOrderQuantity: IXMLSlitReelOrderQuantity;
begin
  Result := ChildNodes['SlitReelOrderQuantity'] as IXMLSlitReelOrderQuantity;
end;

function TXMLSlitReel.Get_SlitReelsInSet: LongWord;
begin
  Result := ChildNodes['SlitReelsInSet'].NodeValue;
end;

procedure TXMLSlitReel.Set_SlitReelsInSet(Value: LongWord);
begin
  ChildNodes['SlitReelsInSet'].NodeValue := Value;
end;

function TXMLSlitReel.Get_SlitReelReference: IXMLSlitReelReferenceList;
begin
  Result := FSlitReelReference;
end;

{ TXMLSlitReelList }

function TXMLSlitReelList.Add: IXMLSlitReel;
begin
  Result := AddItem(-1) as IXMLSlitReel;
end;

function TXMLSlitReelList.Insert(const Index: Integer): IXMLSlitReel;
begin
  Result := AddItem(Index) as IXMLSlitReel;
end;
function TXMLSlitReelList.Get_Item(Index: Integer): IXMLSlitReel;
begin
  Result := List[Index] as IXMLSlitReel;
end;

{ TXMLSlitReelOrderQuantity }

function TXMLSlitReelOrderQuantity.Get_QuantityType: WideString;
begin
  Result := AttributeNodes['QuantityType'].Text;
end;

procedure TXMLSlitReelOrderQuantity.Set_QuantityType(Value: WideString);
begin
  SetAttribute('QuantityType', Value);
end;

function TXMLSlitReelOrderQuantity.Get_QuantityTypeContext: WideString;
begin
  Result := AttributeNodes['QuantityTypeContext'].Text;
end;

procedure TXMLSlitReelOrderQuantity.Set_QuantityTypeContext(Value: WideString);
begin
  SetAttribute('QuantityTypeContext', Value);
end;

function TXMLSlitReelOrderQuantity.Get_AdjustmentType: WideString;
begin
  Result := AttributeNodes['AdjustmentType'].Text;
end;

procedure TXMLSlitReelOrderQuantity.Set_AdjustmentType(Value: WideString);
begin
  SetAttribute('AdjustmentType', Value);
end;

{ TXMLSlitReelReference }

function TXMLSlitReelReference.Get_SlitReelReferenceType: WideString;
begin
  Result := AttributeNodes['SlitReelReferenceType'].Text;
end;

procedure TXMLSlitReelReference.Set_SlitReelReferenceType(Value: WideString);
begin
  SetAttribute('SlitReelReferenceType', Value);
end;

function TXMLSlitReelReference.Get_AssignedBy: WideString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLSlitReelReference.Set_AssignedBy(Value: WideString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLSlitReelReferenceList }

function TXMLSlitReelReferenceList.Add: IXMLSlitReelReference;
begin
  Result := AddItem(-1) as IXMLSlitReelReference;
end;

function TXMLSlitReelReferenceList.Insert(const Index: Integer): IXMLSlitReelReference;
begin
  Result := AddItem(Index) as IXMLSlitReelReference;
end;
function TXMLSlitReelReferenceList.Get_Item(Index: Integer): IXMLSlitReelReference;
begin
  Result := List[Index] as IXMLSlitReelReference;
end;

{ TXMLSheet }

procedure TXMLSheet.AfterConstruction;
begin
  RegisterChildNode('SheetConversionCharacteristics', TXMLSheetConversionCharacteristicsClass);
  RegisterChildNode('SheetPackagingCharacteristics', TXMLSheetPackagingCharacteristicsClass);
  inherited;
end;

function TXMLSheet.Get_SheetConversionCharacteristics: IXMLSheetConversionCharacteristicsClass;
begin
  Result := ChildNodes['SheetConversionCharacteristics'] as IXMLSheetConversionCharacteristicsClass;
end;

function TXMLSheet.Get_SheetPackagingCharacteristics: IXMLSheetPackagingCharacteristicsClass;
begin
  Result := ChildNodes['SheetPackagingCharacteristics'] as IXMLSheetPackagingCharacteristicsClass;
end;

{ TXMLSheetConversionCharacteristicsClass }

procedure TXMLSheetConversionCharacteristicsClass.AfterConstruction;
begin
  RegisterChildNode('ConversionCode', TXMLConversionCode);
  RegisterChildNode('SheetSize', TXMLSheetSize);
  RegisterChildNode('TargetProductWeight', TXMLMeasurement);
  RegisterChildNode('PunchedHoleDetails', TXMLPunchedHoleDetails);
  RegisterChildNode('CuttingDetails', TXMLCuttingDetails);
  RegisterChildNode('Embossing', TXMLEmbossing);
  RegisterChildNode('Watermark', TXMLWatermark);
  FSheetSize := CreateCollection(TXMLSheetSizeList, IXMLSheetSize, 'SheetSize') as IXMLSheetSizeList;
  FPunchedHoleDetails := CreateCollection(TXMLPunchedHoleDetailsList, IXMLPunchedHoleDetails, 'PunchedHoleDetails') as IXMLPunchedHoleDetailsList;
  FCuttingDetails := CreateCollection(TXMLCuttingDetailsList, IXMLCuttingDetails, 'CuttingDetails') as IXMLCuttingDetailsList;
  FEmbossing := CreateCollection(TXMLEmbossingList, IXMLEmbossing, 'Embossing') as IXMLEmbossingList;
  FWatermark := CreateCollection(TXMLWatermarkList, IXMLWatermark, 'Watermark') as IXMLWatermarkList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLSheetConversionCharacteristicsClass.Get_ConversionCode: IXMLConversionCode;
begin
  Result := ChildNodes['ConversionCode'] as IXMLConversionCode;
end;

function TXMLSheetConversionCharacteristicsClass.Get_GrainDirection: WideString;
begin
  Result := ChildNodes['GrainDirection'].Text;
end;

procedure TXMLSheetConversionCharacteristicsClass.Set_GrainDirection(Value: WideString);
begin
  ChildNodes['GrainDirection'].NodeValue := Value;
end;

function TXMLSheetConversionCharacteristicsClass.Get_WindingDirection: WideString;
begin
  Result := ChildNodes['WindingDirection'].Text;
end;

procedure TXMLSheetConversionCharacteristicsClass.Set_WindingDirection(Value: WideString);
begin
  ChildNodes['WindingDirection'].NodeValue := Value;
end;

function TXMLSheetConversionCharacteristicsClass.Get_SheetSize: IXMLSheetSizeList;
begin
  Result := FSheetSize;
end;

function TXMLSheetConversionCharacteristicsClass.Get_TargetProductWeight: IXMLMeasurement;
begin
  Result := ChildNodes['TargetProductWeight'] as IXMLMeasurement;
end;

function TXMLSheetConversionCharacteristicsClass.Get_PunchedHoleDetails: IXMLPunchedHoleDetailsList;
begin
  Result := FPunchedHoleDetails;
end;

function TXMLSheetConversionCharacteristicsClass.Get_CuttingDetails: IXMLCuttingDetailsList;
begin
  Result := FCuttingDetails;
end;

function TXMLSheetConversionCharacteristicsClass.Get_Embossing: IXMLEmbossingList;
begin
  Result := FEmbossing;
end;

function TXMLSheetConversionCharacteristicsClass.Get_Watermark: IXMLWatermarkList;
begin
  Result := FWatermark;
end;

function TXMLSheetConversionCharacteristicsClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLConversionCode }

function TXMLConversionCode.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLConversionCode.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLSheetSize }

procedure TXMLSheetSize.AfterConstruction;
begin
  RegisterChildNode('Length', TXMLMeasurement);
  RegisterChildNode('Width', TXMLMeasurement);
  inherited;
end;

function TXMLSheetSize.Get_Length: IXMLMeasurement;
begin
  Result := ChildNodes['Length'] as IXMLMeasurement;
end;

function TXMLSheetSize.Get_Width: IXMLMeasurement;
begin
  Result := ChildNodes['Width'] as IXMLMeasurement;
end;

function TXMLSheetSize.Get_PaperSizeType: WideString;
begin
  Result := ChildNodes['PaperSizeType'].Text;
end;

procedure TXMLSheetSize.Set_PaperSizeType(Value: WideString);
begin
  ChildNodes['PaperSizeType'].NodeValue := Value;
end;

{ TXMLSheetSizeList }

function TXMLSheetSizeList.Add: IXMLSheetSize;
begin
  Result := AddItem(-1) as IXMLSheetSize;
end;

function TXMLSheetSizeList.Insert(const Index: Integer): IXMLSheetSize;
begin
  Result := AddItem(Index) as IXMLSheetSize;
end;
function TXMLSheetSizeList.Get_Item(Index: Integer): IXMLSheetSize;
begin
  Result := List[Index] as IXMLSheetSize;
end;

{ TXMLPunchedHoleDetails }

procedure TXMLPunchedHoleDetails.AfterConstruction;
begin
  RegisterChildNode('NumberOfHoles', TXMLNumberOfHoles);
  RegisterChildNode('SizeOfHolePunch', TXMLSizeOfHolePunch);
  RegisterChildNode('HoleSpacing', TXMLHoleSpacing);
  RegisterChildNode('DistanceFromEdge', TXMLDistanceFromEdge);
  FDistanceFromEdge := CreateCollection(TXMLDistanceFromEdgeList, IXMLDistanceFromEdge, 'DistanceFromEdge') as IXMLDistanceFromEdgeList;
  FHolePunchTemplateReference := CreateCollection(TXMLHolePunchTemplateReferenceTypeList, IXMLNode, 'HolePunchTemplateReference') as IXMLHolePunchTemplateReferenceTypeList;
  inherited;
end;

function TXMLPunchedHoleDetails.Get_NumberOfHoles: IXMLNumberOfHoles;
begin
  Result := ChildNodes['NumberOfHoles'] as IXMLNumberOfHoles;
end;

function TXMLPunchedHoleDetails.Get_HoleReinforcement: WideString;
begin
  Result := ChildNodes['HoleReinforcement'].Text;
end;

procedure TXMLPunchedHoleDetails.Set_HoleReinforcement(Value: WideString);
begin
  ChildNodes['HoleReinforcement'].NodeValue := Value;
end;

function TXMLPunchedHoleDetails.Get_HolePunchType: WideString;
begin
  Result := ChildNodes['HolePunchType'].Text;
end;

procedure TXMLPunchedHoleDetails.Set_HolePunchType(Value: WideString);
begin
  ChildNodes['HolePunchType'].NodeValue := Value;
end;

function TXMLPunchedHoleDetails.Get_StandardSpacing: WideString;
begin
  Result := ChildNodes['StandardSpacing'].Text;
end;

procedure TXMLPunchedHoleDetails.Set_StandardSpacing(Value: WideString);
begin
  ChildNodes['StandardSpacing'].NodeValue := Value;
end;

function TXMLPunchedHoleDetails.Get_SizeOfHolePunch: IXMLSizeOfHolePunch;
begin
  Result := ChildNodes['SizeOfHolePunch'] as IXMLSizeOfHolePunch;
end;

function TXMLPunchedHoleDetails.Get_HoleSpacing: IXMLHoleSpacing;
begin
  Result := ChildNodes['HoleSpacing'] as IXMLHoleSpacing;
end;

function TXMLPunchedHoleDetails.Get_DistanceFromEdge: IXMLDistanceFromEdgeList;
begin
  Result := FDistanceFromEdge;
end;

function TXMLPunchedHoleDetails.Get_HolePunchTemplateReference: IXMLHolePunchTemplateReferenceTypeList;
begin
  Result := FHolePunchTemplateReference;
end;

{ TXMLPunchedHoleDetailsList }

function TXMLPunchedHoleDetailsList.Add: IXMLPunchedHoleDetails;
begin
  Result := AddItem(-1) as IXMLPunchedHoleDetails;
end;

function TXMLPunchedHoleDetailsList.Insert(const Index: Integer): IXMLPunchedHoleDetails;
begin
  Result := AddItem(Index) as IXMLPunchedHoleDetails;
end;
function TXMLPunchedHoleDetailsList.Get_Item(Index: Integer): IXMLPunchedHoleDetails;
begin
  Result := List[Index] as IXMLPunchedHoleDetails;
end;

{ TXMLNumberOfHoles }

{ TXMLSizeOfHolePunch }

function TXMLSizeOfHolePunch.Get_ShapeOfHole: WideString;
begin
  Result := AttributeNodes['ShapeOfHole'].Text;
end;

procedure TXMLSizeOfHolePunch.Set_ShapeOfHole(Value: WideString);
begin
  SetAttribute('ShapeOfHole', Value);
end;

{ TXMLHoleSpacing }

procedure TXMLHoleSpacing.AfterConstruction;
begin
  RegisterChildNode('EvenSpacing', TXMLEvenSpacing);
  inherited;
end;

function TXMLHoleSpacing.Get_EvenSpacing: IXMLEvenSpacing;
begin
  Result := ChildNodes['EvenSpacing'] as IXMLEvenSpacing;
end;

function TXMLHoleSpacing.Get_UnevenSpacing: WideString;
begin
  Result := ChildNodes['UnevenSpacing'].Text;
end;

procedure TXMLHoleSpacing.Set_UnevenSpacing(Value: WideString);
begin
  ChildNodes['UnevenSpacing'].NodeValue := Value;
end;

{ TXMLEvenSpacing }

procedure TXMLEvenSpacing.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  inherited;
end;

function TXMLEvenSpacing.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

{ TXMLDistanceFromEdge }

function TXMLDistanceFromEdge.Get_EdgeType: WideString;
begin
  Result := AttributeNodes['EdgeType'].Text;
end;

procedure TXMLDistanceFromEdge.Set_EdgeType(Value: WideString);
begin
  SetAttribute('EdgeType', Value);
end;

{ TXMLDistanceFromEdgeList }

function TXMLDistanceFromEdgeList.Add: IXMLDistanceFromEdge;
begin
  Result := AddItem(-1) as IXMLDistanceFromEdge;
end;

function TXMLDistanceFromEdgeList.Insert(const Index: Integer): IXMLDistanceFromEdge;
begin
  Result := AddItem(Index) as IXMLDistanceFromEdge;
end;
function TXMLDistanceFromEdgeList.Get_Item(Index: Integer): IXMLDistanceFromEdge;
begin
  Result := List[Index] as IXMLDistanceFromEdge;
end;

{ TXMLCuttingDetails }

procedure TXMLCuttingDetails.AfterConstruction;
begin
  RegisterChildNode('CuttingTemplateCode', TXMLCuttingTemplateCode);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLCuttingDetails.Get_CuttingTemplateCode: IXMLCuttingTemplateCode;
begin
  Result := ChildNodes['CuttingTemplateCode'] as IXMLCuttingTemplateCode;
end;

function TXMLCuttingDetails.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLCuttingDetailsList }

function TXMLCuttingDetailsList.Add: IXMLCuttingDetails;
begin
  Result := AddItem(-1) as IXMLCuttingDetails;
end;

function TXMLCuttingDetailsList.Insert(const Index: Integer): IXMLCuttingDetails;
begin
  Result := AddItem(Index) as IXMLCuttingDetails;
end;
function TXMLCuttingDetailsList.Get_Item(Index: Integer): IXMLCuttingDetails;
begin
  Result := List[Index] as IXMLCuttingDetails;
end;

{ TXMLCuttingTemplateCode }

function TXMLCuttingTemplateCode.Get_AssignedBy: WideString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLCuttingTemplateCode.Set_AssignedBy(Value: WideString);
begin
  SetAttribute('AssignedBy', Value);
end;

function TXMLCuttingTemplateCode.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLCuttingTemplateCode.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLEmbossing }

procedure TXMLEmbossing.AfterConstruction;
begin
  RegisterChildNode('EmbossingCode', TXMLEmbossingCode);
  FEmbossingDescription := CreateCollection(TXMLS60List, IXMLNode, 'EmbossingDescription') as IXMLS60List;
  inherited;
end;

function TXMLEmbossing.Get_EmbossingCode: IXMLEmbossingCode;
begin
  Result := ChildNodes['EmbossingCode'] as IXMLEmbossingCode;
end;

function TXMLEmbossing.Get_EmbossingDescription: IXMLS60List;
begin
  Result := FEmbossingDescription;
end;

{ TXMLEmbossingList }

function TXMLEmbossingList.Add: IXMLEmbossing;
begin
  Result := AddItem(-1) as IXMLEmbossing;
end;

function TXMLEmbossingList.Insert(const Index: Integer): IXMLEmbossing;
begin
  Result := AddItem(Index) as IXMLEmbossing;
end;
function TXMLEmbossingList.Get_Item(Index: Integer): IXMLEmbossing;
begin
  Result := List[Index] as IXMLEmbossing;
end;

{ TXMLEmbossingCode }

function TXMLEmbossingCode.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLEmbossingCode.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLWatermark }

procedure TXMLWatermark.AfterConstruction;
begin
  RegisterChildNode('WatermarkCode', TXMLWatermarkCode);
  FWatermarkDescription := CreateCollection(TXMLS60List, IXMLNode, 'WatermarkDescription') as IXMLS60List;
  inherited;
end;

function TXMLWatermark.Get_WatermarkCode: IXMLWatermarkCode;
begin
  Result := ChildNodes['WatermarkCode'] as IXMLWatermarkCode;
end;

function TXMLWatermark.Get_WatermarkDescription: IXMLS60List;
begin
  Result := FWatermarkDescription;
end;

{ TXMLWatermarkList }

function TXMLWatermarkList.Add: IXMLWatermark;
begin
  Result := AddItem(-1) as IXMLWatermark;
end;

function TXMLWatermarkList.Insert(const Index: Integer): IXMLWatermark;
begin
  Result := AddItem(Index) as IXMLWatermark;
end;
function TXMLWatermarkList.Get_Item(Index: Integer): IXMLWatermark;
begin
  Result := List[Index] as IXMLWatermark;
end;

{ TXMLWatermarkCode }

function TXMLWatermarkCode.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLWatermarkCode.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLSheetPackagingCharacteristicsClass }

procedure TXMLSheetPackagingCharacteristicsClass.AfterConstruction;
begin
  RegisterChildNode('PackagingCode', TXMLPackagingCode);
  RegisterChildNode('PackagingDescription', TXMLPackagingDescription);
  RegisterChildNode('ReamWeight', TXMLMeasurement);
  RegisterChildNode('SheetCount', TXMLSheetCount);
  RegisterChildNode('Wrap', TXMLWrap);
  RegisterChildNode('BandCharacteristics', TXMLBandCharacteristics);
  RegisterChildNode('PalletCharacteristics', TXMLPalletCharacteristics);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('MaximumHeight', TXMLMeasurement);
  RegisterChildNode('MaximumGrossWeight', TXMLMeasurement);
  FPackagingCode := CreateCollection(TXMLPackagingCodeList, IXMLPackagingCode, 'PackagingCode') as IXMLPackagingCodeList;
  FPackagingDescription := CreateCollection(TXMLPackagingDescriptionList, IXMLPackagingDescription, 'PackagingDescription') as IXMLPackagingDescriptionList;
  FReamType := CreateCollection(TXMLReamTypeList, IXMLNode, 'ReamType') as IXMLReamTypeList;
  FReamWeight := CreateCollection(TXMLMeasurementList, IXMLMeasurement, 'ReamWeight') as IXMLMeasurementList;
  FSheetCount := CreateCollection(TXMLSheetCountList, IXMLSheetCount, 'SheetCount') as IXMLSheetCountList;
  FWrap := CreateCollection(TXMLWrapList, IXMLWrap, 'Wrap') as IXMLWrapList;
  FBandCharacteristics := CreateCollection(TXMLBandCharacteristicsList, IXMLBandCharacteristics, 'BandCharacteristics') as IXMLBandCharacteristicsList;
  FPalletCharacteristics := CreateCollection(TXMLPalletCharacteristicsList, IXMLPalletCharacteristics, 'PalletCharacteristics') as IXMLPalletCharacteristicsList;
  FLabelCharacteristics := CreateCollection(TXMLLabelCharacteristicsList, IXMLLabelCharacteristics, 'LabelCharacteristics') as IXMLLabelCharacteristicsList;
  FStencilCharacteristics := CreateCollection(TXMLStencilCharacteristicsList, IXMLStencilCharacteristics, 'StencilCharacteristics') as IXMLStencilCharacteristicsList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_ActionType: WideString;
begin
  Result := AttributeNodes['ActionType'].Text;
end;

procedure TXMLSheetPackagingCharacteristicsClass.Set_ActionType(Value: WideString);
begin
  SetAttribute('ActionType', Value);
end;

function TXMLSheetPackagingCharacteristicsClass.Get_PackagingCode: IXMLPackagingCodeList;
begin
  Result := FPackagingCode;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_PackagingDescription: IXMLPackagingDescriptionList;
begin
  Result := FPackagingDescription;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_ReamType: IXMLReamTypeList;
begin
  Result := FReamType;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_ReamWeight: IXMLMeasurementList;
begin
  Result := FReamWeight;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_SheetCount: IXMLSheetCountList;
begin
  Result := FSheetCount;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_Wrap: IXMLWrapList;
begin
  Result := FWrap;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_BandCharacteristics: IXMLBandCharacteristicsList;
begin
  Result := FBandCharacteristics;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_PalletCharacteristics: IXMLPalletCharacteristicsList;
begin
  Result := FPalletCharacteristics;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
begin
  Result := FLabelCharacteristics;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
begin
  Result := FStencilCharacteristics;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_MaximumHeight: IXMLMeasurement;
begin
  Result := ChildNodes['MaximumHeight'] as IXMLMeasurement;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_MaximumGrossWeight: IXMLMeasurement;
begin
  Result := ChildNodes['MaximumGrossWeight'] as IXMLMeasurement;
end;

function TXMLSheetPackagingCharacteristicsClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLSheetCount }

function TXMLSheetCount.Get_SheetCountMethodType: WideString;
begin
  Result := AttributeNodes['SheetCountMethodType'].Text;
end;

procedure TXMLSheetCount.Set_SheetCountMethodType(Value: WideString);
begin
  SetAttribute('SheetCountMethodType', Value);
end;

function TXMLSheetCount.Get_PerCarton: LongWord;
begin
  Result := ChildNodes['PerCarton'].NodeValue;
end;

procedure TXMLSheetCount.Set_PerCarton(Value: LongWord);
begin
  ChildNodes['PerCarton'].NodeValue := Value;
end;

function TXMLSheetCount.Get_PerReam: LongWord;
begin
  Result := ChildNodes['PerReam'].NodeValue;
end;

procedure TXMLSheetCount.Set_PerReam(Value: LongWord);
begin
  ChildNodes['PerReam'].NodeValue := Value;
end;

function TXMLSheetCount.Get_PerPallet: LongWord;
begin
  Result := ChildNodes['PerPallet'].NodeValue;
end;

procedure TXMLSheetCount.Set_PerPallet(Value: LongWord);
begin
  ChildNodes['PerPallet'].NodeValue := Value;
end;

function TXMLSheetCount.Get_PerTab: LongWord;
begin
  Result := ChildNodes['PerTab'].NodeValue;
end;

procedure TXMLSheetCount.Set_PerTab(Value: LongWord);
begin
  ChildNodes['PerTab'].NodeValue := Value;
end;

{ TXMLSheetCountList }

function TXMLSheetCountList.Add: IXMLSheetCount;
begin
  Result := AddItem(-1) as IXMLSheetCount;
end;

function TXMLSheetCountList.Insert(const Index: Integer): IXMLSheetCount;
begin
  Result := AddItem(Index) as IXMLSheetCount;
end;
function TXMLSheetCountList.Get_Item(Index: Integer): IXMLSheetCount;
begin
  Result := List[Index] as IXMLSheetCount;
end;

{ TXMLPaper }

procedure TXMLPaper.AfterConstruction;
begin
  RegisterChildNode('PaperCharacteristics', TXMLPaperCharacteristics);
  RegisterChildNode('Reel', TXMLReel);
  RegisterChildNode('Sheet', TXMLSheet);
  inherited;
end;

function TXMLPaper.Get_PaperCharacteristics: IXMLPaperCharacteristics;
begin
  Result := ChildNodes['PaperCharacteristics'] as IXMLPaperCharacteristics;
end;

function TXMLPaper.Get_Reel: IXMLReel;
begin
  Result := ChildNodes['Reel'] as IXMLReel;
end;

function TXMLPaper.Get_Sheet: IXMLSheet;
begin
  Result := ChildNodes['Sheet'] as IXMLSheet;
end;

{ TXMLPaperCharacteristics }

procedure TXMLPaperCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Abrasion', TXMLAbrasion);
  RegisterChildNode('AbsorptionInk', TXMLAbsorptionInk);
  RegisterChildNode('AbsorptionLight', TXMLAbsorptionLight);
  RegisterChildNode('AbsorptionWater', TXMLAbsorptionWater);
  RegisterChildNode('Appearance', TXMLAppearance);
  RegisterChildNode('Ash', TXMLAsh);
  RegisterChildNode('BasisWeight', TXMLBasisWeight);
  RegisterChildNode('BendingResistance', TXMLBendingResistance);
  RegisterChildNode('BendingStiffness', TXMLBendingStiffness);
  RegisterChildNode('Brightness', TXMLBrightness);
  RegisterChildNode('Bulk', TXMLBulk);
  RegisterChildNode('Burst', TXMLBurst);
  RegisterChildNode('BurstIndex', TXMLBurstIndex);
  RegisterChildNode('Caliper', TXMLCaliper);
  RegisterChildNode('CoatWeight', TXMLCoatWeight);
  RegisterChildNode('ColourDetail', TXMLColourDetail);
  RegisterChildNode('Density', TXMLDensity);
  RegisterChildNode('Dirt', TXMLDirt);
  RegisterChildNode('DominantWavelength', TXMLDominantWavelength);
  RegisterChildNode('ExcitationPurity', TXMLExcitationPurity);
  RegisterChildNode('FibreLength', TXMLFibreLength);
  RegisterChildNode('FibreClassification', TXMLFibreClassification);
  RegisterChildNode('Folding', TXMLFolding);
  RegisterChildNode('Formation', TXMLFormation);
  RegisterChildNode('Freeness', TXMLFreeness);
  RegisterChildNode('Friction', TXMLFriction);
  RegisterChildNode('Gloss', TXMLGloss);
  RegisterChildNode('LightScattering', TXMLLightScattering);
  RegisterChildNode('Luminance', TXMLLuminance);
  RegisterChildNode('Moisture', TXMLMoisture);
  RegisterChildNode('Mullen', TXMLMullen);
  RegisterChildNode('Opacity', TXMLOpacity);
  RegisterChildNode('Permeability', TXMLPermeability);
  RegisterChildNode('pH', TXMLPH);
  RegisterChildNode('PlyBond', TXMLPlyBond);
  RegisterChildNode('Porosity', TXMLPorosity);
  RegisterChildNode('PostConsumerWaste', TXMLPostConsumerWaste);
  RegisterChildNode('PPI', TXMLMeasurement);
  RegisterChildNode('PreConsumerWaste', TXMLPreConsumerWaste);
  RegisterChildNode('Recycled', TXMLRecycled);
  RegisterChildNode('Resistance', TXMLResistance);
  RegisterChildNode('RingCrush', TXMLRingCrush);
  RegisterChildNode('Roughness', TXMLRoughness);
  RegisterChildNode('RunnabilityIndex', TXMLRunnabilityIndex);
  RegisterChildNode('ShowThrough', TXMLShowThrough);
  RegisterChildNode('Sizing', TXMLSizing);
  RegisterChildNode('Smoothness', TXMLSmoothness);
  RegisterChildNode('Stiffness', TXMLStiffness);
  RegisterChildNode('Stretch', TXMLStretch);
  RegisterChildNode('SurfaceStrength', TXMLSurfaceStrength);
  RegisterChildNode('TEA', TXMLTEA);
  RegisterChildNode('Tear', TXMLTear);
  RegisterChildNode('TearIndex', TXMLTearIndex);
  RegisterChildNode('Tensile', TXMLTensile);
  RegisterChildNode('TensileIndex', TXMLTensileIndex);
  RegisterChildNode('Whiteness', TXMLWhiteness);
  RegisterChildNode('AdditionalTest', TXMLAdditionalTest);
  RegisterChildNode('PlyAttributes', TXMLPlyAttributes);
  RegisterChildNode('PlySet', TXMLPlySet);
  FAbrasion := CreateCollection(TXMLAbrasionList, IXMLAbrasion, 'Abrasion') as IXMLAbrasionList;
  FAbsorptionInk := CreateCollection(TXMLAbsorptionInkList, IXMLAbsorptionInk, 'AbsorptionInk') as IXMLAbsorptionInkList;
  FAbsorptionLight := CreateCollection(TXMLAbsorptionLightList, IXMLAbsorptionLight, 'AbsorptionLight') as IXMLAbsorptionLightList;
  FAbsorptionWater := CreateCollection(TXMLAbsorptionWaterList, IXMLAbsorptionWater, 'AbsorptionWater') as IXMLAbsorptionWaterList;
  FAppearance := CreateCollection(TXMLAppearanceList, IXMLAppearance, 'Appearance') as IXMLAppearanceList;
  FAsh := CreateCollection(TXMLAshList, IXMLAsh, 'Ash') as IXMLAshList;
  FBasisWeight := CreateCollection(TXMLBasisWeightList, IXMLBasisWeight, 'BasisWeight') as IXMLBasisWeightList;
  FBendingResistance := CreateCollection(TXMLBendingResistanceList, IXMLBendingResistance, 'BendingResistance') as IXMLBendingResistanceList;
  FBendingStiffness := CreateCollection(TXMLBendingStiffnessList, IXMLBendingStiffness, 'BendingStiffness') as IXMLBendingStiffnessList;
  FBrightness := CreateCollection(TXMLBrightnessList, IXMLBrightness, 'Brightness') as IXMLBrightnessList;
  FBulk := CreateCollection(TXMLBulkList, IXMLBulk, 'Bulk') as IXMLBulkList;
  FBurst := CreateCollection(TXMLBurstList, IXMLBurst, 'Burst') as IXMLBurstList;
  FBurstIndex := CreateCollection(TXMLBurstIndexList, IXMLBurstIndex, 'BurstIndex') as IXMLBurstIndexList;
  FCaliper := CreateCollection(TXMLCaliperList, IXMLCaliper, 'Caliper') as IXMLCaliperList;
  FCoatWeight := CreateCollection(TXMLCoatWeightList, IXMLCoatWeight, 'CoatWeight') as IXMLCoatWeightList;
  FColourDetail := CreateCollection(TXMLColourDetailList, IXMLColourDetail, 'ColourDetail') as IXMLColourDetailList;
  FDensity := CreateCollection(TXMLDensityList, IXMLDensity, 'Density') as IXMLDensityList;
  FDirt := CreateCollection(TXMLDirtList, IXMLDirt, 'Dirt') as IXMLDirtList;
  FDominantWavelength := CreateCollection(TXMLDominantWavelengthList, IXMLDominantWavelength, 'DominantWavelength') as IXMLDominantWavelengthList;
  FExcitationPurity := CreateCollection(TXMLExcitationPurityList, IXMLExcitationPurity, 'ExcitationPurity') as IXMLExcitationPurityList;
  FFibreLength := CreateCollection(TXMLFibreLengthList, IXMLFibreLength, 'FibreLength') as IXMLFibreLengthList;
  FFibreClassification := CreateCollection(TXMLFibreClassificationList, IXMLFibreClassification, 'FibreClassification') as IXMLFibreClassificationList;
  FFolding := CreateCollection(TXMLFoldingList, IXMLFolding, 'Folding') as IXMLFoldingList;
  FFormation := CreateCollection(TXMLFormationList, IXMLFormation, 'Formation') as IXMLFormationList;
  FFreeness := CreateCollection(TXMLFreenessList, IXMLFreeness, 'Freeness') as IXMLFreenessList;
  FFriction := CreateCollection(TXMLFrictionList, IXMLFriction, 'Friction') as IXMLFrictionList;
  FGloss := CreateCollection(TXMLGlossList, IXMLGloss, 'Gloss') as IXMLGlossList;
  FLightScattering := CreateCollection(TXMLLightScatteringList, IXMLLightScattering, 'LightScattering') as IXMLLightScatteringList;
  FLuminance := CreateCollection(TXMLLuminanceList, IXMLLuminance, 'Luminance') as IXMLLuminanceList;
  FMoisture := CreateCollection(TXMLMoistureList, IXMLMoisture, 'Moisture') as IXMLMoistureList;
  FMullen := CreateCollection(TXMLMullenList, IXMLMullen, 'Mullen') as IXMLMullenList;
  FOpacity := CreateCollection(TXMLOpacityList, IXMLOpacity, 'Opacity') as IXMLOpacityList;
  FPermeability := CreateCollection(TXMLPermeabilityList, IXMLPermeability, 'Permeability') as IXMLPermeabilityList;
  FPH := CreateCollection(TXMLPHList, IXMLPH, 'pH') as IXMLPHList;
  FPlyBond := CreateCollection(TXMLPlyBondList, IXMLPlyBond, 'PlyBond') as IXMLPlyBondList;
  FPorosity := CreateCollection(TXMLPorosityList, IXMLPorosity, 'Porosity') as IXMLPorosityList;
  FPostConsumerWaste := CreateCollection(TXMLPostConsumerWasteList, IXMLPostConsumerWaste, 'PostConsumerWaste') as IXMLPostConsumerWasteList;
  FPPI := CreateCollection(TXMLMeasurementList, IXMLMeasurement, 'PPI') as IXMLMeasurementList;
  FPreConsumerWaste := CreateCollection(TXMLPreConsumerWasteList, IXMLPreConsumerWaste, 'PreConsumerWaste') as IXMLPreConsumerWasteList;
  FRecycled := CreateCollection(TXMLRecycledList, IXMLRecycled, 'Recycled') as IXMLRecycledList;
  FResistance := CreateCollection(TXMLResistanceList, IXMLResistance, 'Resistance') as IXMLResistanceList;
  FRingCrush := CreateCollection(TXMLRingCrushList, IXMLRingCrush, 'RingCrush') as IXMLRingCrushList;
  FRoughness := CreateCollection(TXMLRoughnessList, IXMLRoughness, 'Roughness') as IXMLRoughnessList;
  FRunnabilityIndex := CreateCollection(TXMLRunnabilityIndexList, IXMLRunnabilityIndex, 'RunnabilityIndex') as IXMLRunnabilityIndexList;
  FShowThrough := CreateCollection(TXMLShowThroughList, IXMLShowThrough, 'ShowThrough') as IXMLShowThroughList;
  FSizing := CreateCollection(TXMLSizingList, IXMLSizing, 'Sizing') as IXMLSizingList;
  FSmoothness := CreateCollection(TXMLSmoothnessList, IXMLSmoothness, 'Smoothness') as IXMLSmoothnessList;
  FStiffness := CreateCollection(TXMLStiffnessList, IXMLStiffness, 'Stiffness') as IXMLStiffnessList;
  FStretch := CreateCollection(TXMLStretchList, IXMLStretch, 'Stretch') as IXMLStretchList;
  FSurfaceStrength := CreateCollection(TXMLSurfaceStrengthList, IXMLSurfaceStrength, 'SurfaceStrength') as IXMLSurfaceStrengthList;
  FTEA := CreateCollection(TXMLTEAList, IXMLTEA, 'TEA') as IXMLTEAList;
  FTear := CreateCollection(TXMLTearList, IXMLTear, 'Tear') as IXMLTearList;
  FTearIndex := CreateCollection(TXMLTearIndexList, IXMLTearIndex, 'TearIndex') as IXMLTearIndexList;
  FTensile := CreateCollection(TXMLTensileList, IXMLTensile, 'Tensile') as IXMLTensileList;
  FTensileIndex := CreateCollection(TXMLTensileIndexList, IXMLTensileIndex, 'TensileIndex') as IXMLTensileIndexList;
  FWhiteness := CreateCollection(TXMLWhitenessList, IXMLWhiteness, 'Whiteness') as IXMLWhitenessList;
  FNumberOfPlies := CreateCollection(TXMLNni1List, IXMLNode, 'NumberOfPlies') as IXMLNni1List;
  FPlyAttributes := CreateCollection(TXMLPlyAttributesList, IXMLPlyAttributes, 'PlyAttributes') as IXMLPlyAttributesList;
  FPlySet := CreateCollection(TXMLPlySetList, IXMLPlySet, 'PlySet') as IXMLPlySetList;
  inherited;
end;

function TXMLPaperCharacteristics.Get_CoatingTop: WideString;
begin
  Result := AttributeNodes['CoatingTop'].Text;
end;

procedure TXMLPaperCharacteristics.Set_CoatingTop(Value: WideString);
begin
  SetAttribute('CoatingTop', Value);
end;

function TXMLPaperCharacteristics.Get_CoatingBottom: WideString;
begin
  Result := AttributeNodes['CoatingBottom'].Text;
end;

procedure TXMLPaperCharacteristics.Set_CoatingBottom(Value: WideString);
begin
  SetAttribute('CoatingBottom', Value);
end;

function TXMLPaperCharacteristics.Get_FinishType: WideString;
begin
  Result := AttributeNodes['FinishType'].Text;
end;

procedure TXMLPaperCharacteristics.Set_FinishType(Value: WideString);
begin
  SetAttribute('FinishType', Value);
end;

function TXMLPaperCharacteristics.Get_PrintType: WideString;
begin
  Result := AttributeNodes['PrintType'].Text;
end;

procedure TXMLPaperCharacteristics.Set_PrintType(Value: WideString);
begin
  SetAttribute('PrintType', Value);
end;

function TXMLPaperCharacteristics.Get_Abrasion: IXMLAbrasionList;
begin
  Result := FAbrasion;
end;

function TXMLPaperCharacteristics.Get_AbsorptionInk: IXMLAbsorptionInkList;
begin
  Result := FAbsorptionInk;
end;

function TXMLPaperCharacteristics.Get_AbsorptionLight: IXMLAbsorptionLightList;
begin
  Result := FAbsorptionLight;
end;

function TXMLPaperCharacteristics.Get_AbsorptionWater: IXMLAbsorptionWaterList;
begin
  Result := FAbsorptionWater;
end;

function TXMLPaperCharacteristics.Get_Appearance: IXMLAppearanceList;
begin
  Result := FAppearance;
end;

function TXMLPaperCharacteristics.Get_Ash: IXMLAshList;
begin
  Result := FAsh;
end;

function TXMLPaperCharacteristics.Get_BasisWeight: IXMLBasisWeightList;
begin
  Result := FBasisWeight;
end;

function TXMLPaperCharacteristics.Get_BendingResistance: IXMLBendingResistanceList;
begin
  Result := FBendingResistance;
end;

function TXMLPaperCharacteristics.Get_BendingStiffness: IXMLBendingStiffnessList;
begin
  Result := FBendingStiffness;
end;

function TXMLPaperCharacteristics.Get_Brightness: IXMLBrightnessList;
begin
  Result := FBrightness;
end;

function TXMLPaperCharacteristics.Get_Bulk: IXMLBulkList;
begin
  Result := FBulk;
end;

function TXMLPaperCharacteristics.Get_Burst: IXMLBurstList;
begin
  Result := FBurst;
end;

function TXMLPaperCharacteristics.Get_BurstIndex: IXMLBurstIndexList;
begin
  Result := FBurstIndex;
end;

function TXMLPaperCharacteristics.Get_Caliper: IXMLCaliperList;
begin
  Result := FCaliper;
end;

function TXMLPaperCharacteristics.Get_CoatWeight: IXMLCoatWeightList;
begin
  Result := FCoatWeight;
end;

function TXMLPaperCharacteristics.Get_ColourDetail: IXMLColourDetailList;
begin
  Result := FColourDetail;
end;

function TXMLPaperCharacteristics.Get_Density: IXMLDensityList;
begin
  Result := FDensity;
end;

function TXMLPaperCharacteristics.Get_Dirt: IXMLDirtList;
begin
  Result := FDirt;
end;

function TXMLPaperCharacteristics.Get_DominantWavelength: IXMLDominantWavelengthList;
begin
  Result := FDominantWavelength;
end;

function TXMLPaperCharacteristics.Get_ExcitationPurity: IXMLExcitationPurityList;
begin
  Result := FExcitationPurity;
end;

function TXMLPaperCharacteristics.Get_FibreLength: IXMLFibreLengthList;
begin
  Result := FFibreLength;
end;

function TXMLPaperCharacteristics.Get_FibreClassification: IXMLFibreClassificationList;
begin
  Result := FFibreClassification;
end;

function TXMLPaperCharacteristics.Get_Folding: IXMLFoldingList;
begin
  Result := FFolding;
end;

function TXMLPaperCharacteristics.Get_Formation: IXMLFormationList;
begin
  Result := FFormation;
end;

function TXMLPaperCharacteristics.Get_Freeness: IXMLFreenessList;
begin
  Result := FFreeness;
end;

function TXMLPaperCharacteristics.Get_Friction: IXMLFrictionList;
begin
  Result := FFriction;
end;

function TXMLPaperCharacteristics.Get_Gloss: IXMLGlossList;
begin
  Result := FGloss;
end;

function TXMLPaperCharacteristics.Get_LightScattering: IXMLLightScatteringList;
begin
  Result := FLightScattering;
end;

function TXMLPaperCharacteristics.Get_Luminance: IXMLLuminanceList;
begin
  Result := FLuminance;
end;

function TXMLPaperCharacteristics.Get_Moisture: IXMLMoistureList;
begin
  Result := FMoisture;
end;

function TXMLPaperCharacteristics.Get_Mullen: IXMLMullenList;
begin
  Result := FMullen;
end;

function TXMLPaperCharacteristics.Get_Opacity: IXMLOpacityList;
begin
  Result := FOpacity;
end;

function TXMLPaperCharacteristics.Get_Permeability: IXMLPermeabilityList;
begin
  Result := FPermeability;
end;

function TXMLPaperCharacteristics.Get_PH: IXMLPHList;
begin
  Result := FPH;
end;

function TXMLPaperCharacteristics.Get_PlyBond: IXMLPlyBondList;
begin
  Result := FPlyBond;
end;

function TXMLPaperCharacteristics.Get_Porosity: IXMLPorosityList;
begin
  Result := FPorosity;
end;

function TXMLPaperCharacteristics.Get_PostConsumerWaste: IXMLPostConsumerWasteList;
begin
  Result := FPostConsumerWaste;
end;

function TXMLPaperCharacteristics.Get_PPI: IXMLMeasurementList;
begin
  Result := FPPI;
end;

function TXMLPaperCharacteristics.Get_PreConsumerWaste: IXMLPreConsumerWasteList;
begin
  Result := FPreConsumerWaste;
end;

function TXMLPaperCharacteristics.Get_Recycled: IXMLRecycledList;
begin
  Result := FRecycled;
end;

function TXMLPaperCharacteristics.Get_Resistance: IXMLResistanceList;
begin
  Result := FResistance;
end;

function TXMLPaperCharacteristics.Get_RingCrush: IXMLRingCrushList;
begin
  Result := FRingCrush;
end;

function TXMLPaperCharacteristics.Get_Roughness: IXMLRoughnessList;
begin
  Result := FRoughness;
end;

function TXMLPaperCharacteristics.Get_RunnabilityIndex: IXMLRunnabilityIndexList;
begin
  Result := FRunnabilityIndex;
end;

function TXMLPaperCharacteristics.Get_ShowThrough: IXMLShowThroughList;
begin
  Result := FShowThrough;
end;

function TXMLPaperCharacteristics.Get_Sizing: IXMLSizingList;
begin
  Result := FSizing;
end;

function TXMLPaperCharacteristics.Get_Smoothness: IXMLSmoothnessList;
begin
  Result := FSmoothness;
end;

function TXMLPaperCharacteristics.Get_Stiffness: IXMLStiffnessList;
begin
  Result := FStiffness;
end;

function TXMLPaperCharacteristics.Get_Stretch: IXMLStretchList;
begin
  Result := FStretch;
end;

function TXMLPaperCharacteristics.Get_SurfaceStrength: IXMLSurfaceStrengthList;
begin
  Result := FSurfaceStrength;
end;

function TXMLPaperCharacteristics.Get_TEA: IXMLTEAList;
begin
  Result := FTEA;
end;

function TXMLPaperCharacteristics.Get_Tear: IXMLTearList;
begin
  Result := FTear;
end;

function TXMLPaperCharacteristics.Get_TearIndex: IXMLTearIndexList;
begin
  Result := FTearIndex;
end;

function TXMLPaperCharacteristics.Get_Tensile: IXMLTensileList;
begin
  Result := FTensile;
end;

function TXMLPaperCharacteristics.Get_TensileIndex: IXMLTensileIndexList;
begin
  Result := FTensileIndex;
end;

function TXMLPaperCharacteristics.Get_Whiteness: IXMLWhitenessList;
begin
  Result := FWhiteness;
end;

function TXMLPaperCharacteristics.Get_AdditionalTest: IXMLAdditionalTest;
begin
  Result := ChildNodes['AdditionalTest'] as IXMLAdditionalTest;
end;

function TXMLPaperCharacteristics.Get_NumberOfPlies: IXMLNni1List;
begin
  Result := FNumberOfPlies;
end;

function TXMLPaperCharacteristics.Get_PlyAttributes: IXMLPlyAttributesList;
begin
  Result := FPlyAttributes;
end;

function TXMLPaperCharacteristics.Get_PlySet: IXMLPlySetList;
begin
  Result := FPlySet;
end;

{ TXMLAbrasion }

function TXMLAbrasion.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLAbrasion.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLAbrasion.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLAbrasion.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLAbrasion.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLAbrasion.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLAbrasion.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLAbrasion.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLAbrasionList }

function TXMLAbrasionList.Add: IXMLAbrasion;
begin
  Result := AddItem(-1) as IXMLAbrasion;
end;

function TXMLAbrasionList.Insert(const Index: Integer): IXMLAbrasion;
begin
  Result := AddItem(Index) as IXMLAbrasion;
end;
function TXMLAbrasionList.Get_Item(Index: Integer): IXMLAbrasion;
begin
  Result := List[Index] as IXMLAbrasion;
end;

{ TXMLAbsorptionInk }

function TXMLAbsorptionInk.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLAbsorptionInk.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLAbsorptionInk.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLAbsorptionInk.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLAbsorptionInk.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLAbsorptionInk.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLAbsorptionInk.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLAbsorptionInk.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLAbsorptionInkList }

function TXMLAbsorptionInkList.Add: IXMLAbsorptionInk;
begin
  Result := AddItem(-1) as IXMLAbsorptionInk;
end;

function TXMLAbsorptionInkList.Insert(const Index: Integer): IXMLAbsorptionInk;
begin
  Result := AddItem(Index) as IXMLAbsorptionInk;
end;
function TXMLAbsorptionInkList.Get_Item(Index: Integer): IXMLAbsorptionInk;
begin
  Result := List[Index] as IXMLAbsorptionInk;
end;

{ TXMLAbsorptionLight }

function TXMLAbsorptionLight.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLAbsorptionLight.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLAbsorptionLight.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLAbsorptionLight.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLAbsorptionLight.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLAbsorptionLight.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLAbsorptionLight.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLAbsorptionLight.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLAbsorptionLightList }

function TXMLAbsorptionLightList.Add: IXMLAbsorptionLight;
begin
  Result := AddItem(-1) as IXMLAbsorptionLight;
end;

function TXMLAbsorptionLightList.Insert(const Index: Integer): IXMLAbsorptionLight;
begin
  Result := AddItem(Index) as IXMLAbsorptionLight;
end;
function TXMLAbsorptionLightList.Get_Item(Index: Integer): IXMLAbsorptionLight;
begin
  Result := List[Index] as IXMLAbsorptionLight;
end;

{ TXMLAbsorptionWater }

function TXMLAbsorptionWater.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLAbsorptionWater.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLAbsorptionWater.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLAbsorptionWater.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLAbsorptionWater.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLAbsorptionWater.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLAbsorptionWater.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLAbsorptionWater.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLAbsorptionWaterList }

function TXMLAbsorptionWaterList.Add: IXMLAbsorptionWater;
begin
  Result := AddItem(-1) as IXMLAbsorptionWater;
end;

function TXMLAbsorptionWaterList.Insert(const Index: Integer): IXMLAbsorptionWater;
begin
  Result := AddItem(Index) as IXMLAbsorptionWater;
end;
function TXMLAbsorptionWaterList.Get_Item(Index: Integer): IXMLAbsorptionWater;
begin
  Result := List[Index] as IXMLAbsorptionWater;
end;

{ TXMLAppearance }

function TXMLAppearance.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLAppearance.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLAppearance.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLAppearance.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLAppearance.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLAppearance.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLAppearance.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLAppearance.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLAppearanceList }

function TXMLAppearanceList.Add: IXMLAppearance;
begin
  Result := AddItem(-1) as IXMLAppearance;
end;

function TXMLAppearanceList.Insert(const Index: Integer): IXMLAppearance;
begin
  Result := AddItem(Index) as IXMLAppearance;
end;
function TXMLAppearanceList.Get_Item(Index: Integer): IXMLAppearance;
begin
  Result := List[Index] as IXMLAppearance;
end;

{ TXMLAsh }

function TXMLAsh.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLAsh.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLAsh.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLAsh.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLAsh.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLAsh.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLAsh.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLAsh.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLAshList }

function TXMLAshList.Add: IXMLAsh;
begin
  Result := AddItem(-1) as IXMLAsh;
end;

function TXMLAshList.Insert(const Index: Integer): IXMLAsh;
begin
  Result := AddItem(Index) as IXMLAsh;
end;
function TXMLAshList.Get_Item(Index: Integer): IXMLAsh;
begin
  Result := List[Index] as IXMLAsh;
end;

{ TXMLBasisWeight }

function TXMLBasisWeight.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLBasisWeight.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLBasisWeight.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLBasisWeight.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLBasisWeight.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLBasisWeight.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLBasisWeight.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLBasisWeight.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLBasisWeightList }

function TXMLBasisWeightList.Add: IXMLBasisWeight;
begin
  Result := AddItem(-1) as IXMLBasisWeight;
end;

function TXMLBasisWeightList.Insert(const Index: Integer): IXMLBasisWeight;
begin
  Result := AddItem(Index) as IXMLBasisWeight;
end;
function TXMLBasisWeightList.Get_Item(Index: Integer): IXMLBasisWeight;
begin
  Result := List[Index] as IXMLBasisWeight;
end;

{ TXMLBendingResistance }

function TXMLBendingResistance.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLBendingResistance.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLBendingResistance.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLBendingResistance.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLBendingResistance.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLBendingResistance.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLBendingResistance.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLBendingResistance.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLBendingResistanceList }

function TXMLBendingResistanceList.Add: IXMLBendingResistance;
begin
  Result := AddItem(-1) as IXMLBendingResistance;
end;

function TXMLBendingResistanceList.Insert(const Index: Integer): IXMLBendingResistance;
begin
  Result := AddItem(Index) as IXMLBendingResistance;
end;
function TXMLBendingResistanceList.Get_Item(Index: Integer): IXMLBendingResistance;
begin
  Result := List[Index] as IXMLBendingResistance;
end;

{ TXMLBendingStiffness }

function TXMLBendingStiffness.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLBendingStiffness.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLBendingStiffness.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLBendingStiffness.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLBendingStiffness.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLBendingStiffness.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLBendingStiffness.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLBendingStiffness.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLBendingStiffnessList }

function TXMLBendingStiffnessList.Add: IXMLBendingStiffness;
begin
  Result := AddItem(-1) as IXMLBendingStiffness;
end;

function TXMLBendingStiffnessList.Insert(const Index: Integer): IXMLBendingStiffness;
begin
  Result := AddItem(Index) as IXMLBendingStiffness;
end;
function TXMLBendingStiffnessList.Get_Item(Index: Integer): IXMLBendingStiffness;
begin
  Result := List[Index] as IXMLBendingStiffness;
end;

{ TXMLBrightness }

function TXMLBrightness.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLBrightness.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLBrightness.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLBrightness.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLBrightness.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLBrightness.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLBrightness.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLBrightness.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLBrightnessList }

function TXMLBrightnessList.Add: IXMLBrightness;
begin
  Result := AddItem(-1) as IXMLBrightness;
end;

function TXMLBrightnessList.Insert(const Index: Integer): IXMLBrightness;
begin
  Result := AddItem(Index) as IXMLBrightness;
end;
function TXMLBrightnessList.Get_Item(Index: Integer): IXMLBrightness;
begin
  Result := List[Index] as IXMLBrightness;
end;

{ TXMLBulk }

function TXMLBulk.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLBulk.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLBulk.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLBulk.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLBulk.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLBulk.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLBulk.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLBulk.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLBulkList }

function TXMLBulkList.Add: IXMLBulk;
begin
  Result := AddItem(-1) as IXMLBulk;
end;

function TXMLBulkList.Insert(const Index: Integer): IXMLBulk;
begin
  Result := AddItem(Index) as IXMLBulk;
end;
function TXMLBulkList.Get_Item(Index: Integer): IXMLBulk;
begin
  Result := List[Index] as IXMLBulk;
end;

{ TXMLCaliper }

function TXMLCaliper.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLCaliper.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLCaliper.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLCaliper.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLCaliper.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLCaliper.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLCaliper.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLCaliper.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLCaliperList }

function TXMLCaliperList.Add: IXMLCaliper;
begin
  Result := AddItem(-1) as IXMLCaliper;
end;

function TXMLCaliperList.Insert(const Index: Integer): IXMLCaliper;
begin
  Result := AddItem(Index) as IXMLCaliper;
end;
function TXMLCaliperList.Get_Item(Index: Integer): IXMLCaliper;
begin
  Result := List[Index] as IXMLCaliper;
end;

{ TXMLCoatWeight }

function TXMLCoatWeight.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLCoatWeight.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLCoatWeight.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLCoatWeight.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLCoatWeight.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLCoatWeight.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLCoatWeight.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLCoatWeight.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLCoatWeightList }

function TXMLCoatWeightList.Add: IXMLCoatWeight;
begin
  Result := AddItem(-1) as IXMLCoatWeight;
end;

function TXMLCoatWeightList.Insert(const Index: Integer): IXMLCoatWeight;
begin
  Result := AddItem(Index) as IXMLCoatWeight;
end;
function TXMLCoatWeightList.Get_Item(Index: Integer): IXMLCoatWeight;
begin
  Result := List[Index] as IXMLCoatWeight;
end;

{ TXMLColourDetail }

procedure TXMLColourDetail.AfterConstruction;
begin
  RegisterChildNode('CMYK', TXMLCMYK);
  RegisterChildNode('ColourShade', TXMLColourShade);
  RegisterChildNode('HSB', TXMLHSB);
  RegisterChildNode('Lab', TXMLLab);
  RegisterChildNode('RGB', TXMLRGB);
  RegisterChildNode('ColourCode', TXMLColourCode);
  FColourDescription := CreateCollection(TXMLS72List, IXMLNode, 'ColourDescription') as IXMLS72List;
  inherited;
end;

function TXMLColourDetail.Get_CMYK: IXMLCMYK;
begin
  Result := ChildNodes['CMYK'] as IXMLCMYK;
end;

function TXMLColourDetail.Get_ColourShade: IXMLColourShade;
begin
  Result := ChildNodes['ColourShade'] as IXMLColourShade;
end;

function TXMLColourDetail.Get_HSB: IXMLHSB;
begin
  Result := ChildNodes['HSB'] as IXMLHSB;
end;

function TXMLColourDetail.Get_Lab: IXMLLab;
begin
  Result := ChildNodes['Lab'] as IXMLLab;
end;

function TXMLColourDetail.Get_RGB: IXMLRGB;
begin
  Result := ChildNodes['RGB'] as IXMLRGB;
end;

function TXMLColourDetail.Get_ColourDescription: IXMLS72List;
begin
  Result := FColourDescription;
end;

function TXMLColourDetail.Get_ColourCode: IXMLColourCode;
begin
  Result := ChildNodes['ColourCode'] as IXMLColourCode;
end;

{ TXMLColourDetailList }

function TXMLColourDetailList.Add: IXMLColourDetail;
begin
  Result := AddItem(-1) as IXMLColourDetail;
end;

function TXMLColourDetailList.Insert(const Index: Integer): IXMLColourDetail;
begin
  Result := AddItem(Index) as IXMLColourDetail;
end;
function TXMLColourDetailList.Get_Item(Index: Integer): IXMLColourDetail;
begin
  Result := List[Index] as IXMLColourDetail;
end;

{ TXMLCMYK }

procedure TXMLCMYK.AfterConstruction;
begin
  RegisterChildNode('Cyan', TXMLDetailMeasurement);
  RegisterChildNode('Magenta', TXMLDetailMeasurement);
  RegisterChildNode('Yellow', TXMLDetailMeasurement);
  RegisterChildNode('Black', TXMLDetailMeasurement);
  inherited;
end;

function TXMLCMYK.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLCMYK.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLCMYK.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLCMYK.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLCMYK.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLCMYK.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLCMYK.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLCMYK.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

function TXMLCMYK.Get_Cyan: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Cyan'] as IXMLDetailMeasurement;
end;

function TXMLCMYK.Get_Magenta: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Magenta'] as IXMLDetailMeasurement;
end;

function TXMLCMYK.Get_Yellow: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Yellow'] as IXMLDetailMeasurement;
end;

function TXMLCMYK.Get_Black: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Black'] as IXMLDetailMeasurement;
end;

{ TXMLBurst }

function TXMLBurst.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLBurst.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLBurst.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLBurst.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLBurst.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLBurst.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLBurst.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLBurst.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLBurstList }

function TXMLBurstList.Add: IXMLBurst;
begin
  Result := AddItem(-1) as IXMLBurst;
end;

function TXMLBurstList.Insert(const Index: Integer): IXMLBurst;
begin
  Result := AddItem(Index) as IXMLBurst;
end;
function TXMLBurstList.Get_Item(Index: Integer): IXMLBurst;
begin
  Result := List[Index] as IXMLBurst;
end;

{ TXMLDetailValue }

function TXMLDetailValue.Get_UOM: WideString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLDetailValue.Set_UOM(Value: WideString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLDetailRangeMin }

function TXMLDetailRangeMin.Get_UOM: WideString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLDetailRangeMin.Set_UOM(Value: WideString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLDetailRangeMax }

function TXMLDetailRangeMax.Get_UOM: WideString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLDetailRangeMax.Set_UOM(Value: WideString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLStandardDeviation }

function TXMLStandardDeviation.Get_UOM: WideString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLStandardDeviation.Set_UOM(Value: WideString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLTwoSigmaLower }

function TXMLTwoSigmaLower.Get_UOM: WideString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLTwoSigmaLower.Set_UOM(Value: WideString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLTwoSigmaUpper }

function TXMLTwoSigmaUpper.Get_UOM: WideString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLTwoSigmaUpper.Set_UOM(Value: WideString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLColourShade }

function TXMLColourShade.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLColourShade.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

{ TXMLHSB }

procedure TXMLHSB.AfterConstruction;
begin
  RegisterChildNode('Hue', TXMLDetailMeasurement);
  RegisterChildNode('Saturation', TXMLDetailMeasurement);
  RegisterChildNode('Brilliance', TXMLDetailMeasurement);
  inherited;
end;

function TXMLHSB.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLHSB.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLHSB.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLHSB.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLHSB.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLHSB.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLHSB.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLHSB.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

function TXMLHSB.Get_Hue: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Hue'] as IXMLDetailMeasurement;
end;

function TXMLHSB.Get_Saturation: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Saturation'] as IXMLDetailMeasurement;
end;

function TXMLHSB.Get_Brilliance: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Brilliance'] as IXMLDetailMeasurement;
end;

{ TXMLLab }

procedure TXMLLab.AfterConstruction;
begin
  RegisterChildNode('L', TXMLDetailMeasurement);
  RegisterChildNode('a', TXMLDetailMeasurement);
  RegisterChildNode('b', TXMLDetailMeasurement);
  inherited;
end;

function TXMLLab.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLLab.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLLab.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLLab.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLLab.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLLab.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLLab.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLLab.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

function TXMLLab.Get_L: IXMLDetailMeasurement;
begin
  Result := ChildNodes['L'] as IXMLDetailMeasurement;
end;

function TXMLLab.Get_A: IXMLDetailMeasurement;
begin
  Result := ChildNodes['a'] as IXMLDetailMeasurement;
end;

function TXMLLab.Get_B: IXMLDetailMeasurement;
begin
  Result := ChildNodes['b'] as IXMLDetailMeasurement;
end;

{ TXMLRGB }

procedure TXMLRGB.AfterConstruction;
begin
  RegisterChildNode('Red', TXMLDetailMeasurement);
  RegisterChildNode('Green', TXMLDetailMeasurement);
  RegisterChildNode('Blue', TXMLDetailMeasurement);
  inherited;
end;

function TXMLRGB.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLRGB.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLRGB.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLRGB.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLRGB.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLRGB.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLRGB.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLRGB.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

function TXMLRGB.Get_Red: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Red'] as IXMLDetailMeasurement;
end;

function TXMLRGB.Get_Green: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Green'] as IXMLDetailMeasurement;
end;

function TXMLRGB.Get_Blue: IXMLDetailMeasurement;
begin
  Result := ChildNodes['Blue'] as IXMLDetailMeasurement;
end;

{ TXMLDensity }

function TXMLDensity.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLDensity.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLDensity.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLDensity.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLDensity.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLDensity.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLDensity.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLDensity.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLDensityList }

function TXMLDensityList.Add: IXMLDensity;
begin
  Result := AddItem(-1) as IXMLDensity;
end;

function TXMLDensityList.Insert(const Index: Integer): IXMLDensity;
begin
  Result := AddItem(Index) as IXMLDensity;
end;
function TXMLDensityList.Get_Item(Index: Integer): IXMLDensity;
begin
  Result := List[Index] as IXMLDensity;
end;

{ TXMLDirt }

function TXMLDirt.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLDirt.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLDirt.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLDirt.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLDirt.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLDirt.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLDirt.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLDirt.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLDirtList }

function TXMLDirtList.Add: IXMLDirt;
begin
  Result := AddItem(-1) as IXMLDirt;
end;

function TXMLDirtList.Insert(const Index: Integer): IXMLDirt;
begin
  Result := AddItem(Index) as IXMLDirt;
end;
function TXMLDirtList.Get_Item(Index: Integer): IXMLDirt;
begin
  Result := List[Index] as IXMLDirt;
end;

{ TXMLDominantWavelength }

function TXMLDominantWavelength.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLDominantWavelength.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLDominantWavelength.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLDominantWavelength.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLDominantWavelength.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLDominantWavelength.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLDominantWavelength.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLDominantWavelength.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLDominantWavelengthList }

function TXMLDominantWavelengthList.Add: IXMLDominantWavelength;
begin
  Result := AddItem(-1) as IXMLDominantWavelength;
end;

function TXMLDominantWavelengthList.Insert(const Index: Integer): IXMLDominantWavelength;
begin
  Result := AddItem(Index) as IXMLDominantWavelength;
end;
function TXMLDominantWavelengthList.Get_Item(Index: Integer): IXMLDominantWavelength;
begin
  Result := List[Index] as IXMLDominantWavelength;
end;

{ TXMLExcitationPurity }

function TXMLExcitationPurity.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLExcitationPurity.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLExcitationPurity.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLExcitationPurity.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLExcitationPurity.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLExcitationPurity.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLExcitationPurity.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLExcitationPurity.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLExcitationPurityList }

function TXMLExcitationPurityList.Add: IXMLExcitationPurity;
begin
  Result := AddItem(-1) as IXMLExcitationPurity;
end;

function TXMLExcitationPurityList.Insert(const Index: Integer): IXMLExcitationPurity;
begin
  Result := AddItem(Index) as IXMLExcitationPurity;
end;
function TXMLExcitationPurityList.Get_Item(Index: Integer): IXMLExcitationPurity;
begin
  Result := List[Index] as IXMLExcitationPurity;
end;

{ TXMLFibreLength }

function TXMLFibreLength.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLFibreLength.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLFibreLength.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLFibreLength.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLFibreLength.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLFibreLength.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLFibreLength.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLFibreLength.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLFibreLengthList }

function TXMLFibreLengthList.Add: IXMLFibreLength;
begin
  Result := AddItem(-1) as IXMLFibreLength;
end;

function TXMLFibreLengthList.Insert(const Index: Integer): IXMLFibreLength;
begin
  Result := AddItem(Index) as IXMLFibreLength;
end;
function TXMLFibreLengthList.Get_Item(Index: Integer): IXMLFibreLength;
begin
  Result := List[Index] as IXMLFibreLength;
end;

{ TXMLFibreClassification }

function TXMLFibreClassification.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLFibreClassification.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLFibreClassification.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLFibreClassification.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLFibreClassification.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLFibreClassification.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLFibreClassification.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLFibreClassification.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLFibreClassificationList }

function TXMLFibreClassificationList.Add: IXMLFibreClassification;
begin
  Result := AddItem(-1) as IXMLFibreClassification;
end;

function TXMLFibreClassificationList.Insert(const Index: Integer): IXMLFibreClassification;
begin
  Result := AddItem(Index) as IXMLFibreClassification;
end;
function TXMLFibreClassificationList.Get_Item(Index: Integer): IXMLFibreClassification;
begin
  Result := List[Index] as IXMLFibreClassification;
end;

{ TXMLFolding }

function TXMLFolding.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLFolding.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLFolding.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLFolding.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLFolding.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLFolding.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLFolding.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLFolding.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLFoldingList }

function TXMLFoldingList.Add: IXMLFolding;
begin
  Result := AddItem(-1) as IXMLFolding;
end;

function TXMLFoldingList.Insert(const Index: Integer): IXMLFolding;
begin
  Result := AddItem(Index) as IXMLFolding;
end;
function TXMLFoldingList.Get_Item(Index: Integer): IXMLFolding;
begin
  Result := List[Index] as IXMLFolding;
end;

{ TXMLFormation }

function TXMLFormation.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLFormation.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLFormation.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLFormation.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLFormation.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLFormation.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLFormation.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLFormation.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLFormationList }

function TXMLFormationList.Add: IXMLFormation;
begin
  Result := AddItem(-1) as IXMLFormation;
end;

function TXMLFormationList.Insert(const Index: Integer): IXMLFormation;
begin
  Result := AddItem(Index) as IXMLFormation;
end;
function TXMLFormationList.Get_Item(Index: Integer): IXMLFormation;
begin
  Result := List[Index] as IXMLFormation;
end;

{ TXMLFreeness }

function TXMLFreeness.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLFreeness.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLFreeness.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLFreeness.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLFreeness.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLFreeness.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLFreeness.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLFreeness.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLFreenessList }

function TXMLFreenessList.Add: IXMLFreeness;
begin
  Result := AddItem(-1) as IXMLFreeness;
end;

function TXMLFreenessList.Insert(const Index: Integer): IXMLFreeness;
begin
  Result := AddItem(Index) as IXMLFreeness;
end;
function TXMLFreenessList.Get_Item(Index: Integer): IXMLFreeness;
begin
  Result := List[Index] as IXMLFreeness;
end;

{ TXMLFriction }

function TXMLFriction.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLFriction.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLFriction.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLFriction.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLFriction.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLFriction.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLFriction.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLFriction.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLFrictionList }

function TXMLFrictionList.Add: IXMLFriction;
begin
  Result := AddItem(-1) as IXMLFriction;
end;

function TXMLFrictionList.Insert(const Index: Integer): IXMLFriction;
begin
  Result := AddItem(Index) as IXMLFriction;
end;
function TXMLFrictionList.Get_Item(Index: Integer): IXMLFriction;
begin
  Result := List[Index] as IXMLFriction;
end;

{ TXMLGloss }

function TXMLGloss.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLGloss.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLGloss.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLGloss.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLGloss.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLGloss.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLGloss.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLGloss.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLGlossList }

function TXMLGlossList.Add: IXMLGloss;
begin
  Result := AddItem(-1) as IXMLGloss;
end;

function TXMLGlossList.Insert(const Index: Integer): IXMLGloss;
begin
  Result := AddItem(Index) as IXMLGloss;
end;
function TXMLGlossList.Get_Item(Index: Integer): IXMLGloss;
begin
  Result := List[Index] as IXMLGloss;
end;

{ TXMLLightScattering }

function TXMLLightScattering.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLLightScattering.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLLightScattering.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLLightScattering.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLLightScattering.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLLightScattering.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLLightScattering.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLLightScattering.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLLightScatteringList }

function TXMLLightScatteringList.Add: IXMLLightScattering;
begin
  Result := AddItem(-1) as IXMLLightScattering;
end;

function TXMLLightScatteringList.Insert(const Index: Integer): IXMLLightScattering;
begin
  Result := AddItem(Index) as IXMLLightScattering;
end;
function TXMLLightScatteringList.Get_Item(Index: Integer): IXMLLightScattering;
begin
  Result := List[Index] as IXMLLightScattering;
end;

{ TXMLLuminance }

function TXMLLuminance.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLLuminance.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLLuminance.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLLuminance.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLLuminance.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLLuminance.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLLuminance.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLLuminance.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLLuminanceList }

function TXMLLuminanceList.Add: IXMLLuminance;
begin
  Result := AddItem(-1) as IXMLLuminance;
end;

function TXMLLuminanceList.Insert(const Index: Integer): IXMLLuminance;
begin
  Result := AddItem(Index) as IXMLLuminance;
end;
function TXMLLuminanceList.Get_Item(Index: Integer): IXMLLuminance;
begin
  Result := List[Index] as IXMLLuminance;
end;

{ TXMLMoisture }

function TXMLMoisture.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLMoisture.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLMoisture.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLMoisture.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLMoisture.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLMoisture.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLMoisture.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLMoisture.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLMoistureList }

function TXMLMoistureList.Add: IXMLMoisture;
begin
  Result := AddItem(-1) as IXMLMoisture;
end;

function TXMLMoistureList.Insert(const Index: Integer): IXMLMoisture;
begin
  Result := AddItem(Index) as IXMLMoisture;
end;
function TXMLMoistureList.Get_Item(Index: Integer): IXMLMoisture;
begin
  Result := List[Index] as IXMLMoisture;
end;

{ TXMLMullen }

function TXMLMullen.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLMullen.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLMullen.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLMullen.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLMullen.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLMullen.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLMullen.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLMullen.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLMullenList }

function TXMLMullenList.Add: IXMLMullen;
begin
  Result := AddItem(-1) as IXMLMullen;
end;

function TXMLMullenList.Insert(const Index: Integer): IXMLMullen;
begin
  Result := AddItem(Index) as IXMLMullen;
end;
function TXMLMullenList.Get_Item(Index: Integer): IXMLMullen;
begin
  Result := List[Index] as IXMLMullen;
end;

{ TXMLOpacity }

function TXMLOpacity.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLOpacity.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLOpacity.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLOpacity.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLOpacity.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLOpacity.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLOpacity.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLOpacity.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLOpacityList }

function TXMLOpacityList.Add: IXMLOpacity;
begin
  Result := AddItem(-1) as IXMLOpacity;
end;

function TXMLOpacityList.Insert(const Index: Integer): IXMLOpacity;
begin
  Result := AddItem(Index) as IXMLOpacity;
end;
function TXMLOpacityList.Get_Item(Index: Integer): IXMLOpacity;
begin
  Result := List[Index] as IXMLOpacity;
end;

{ TXMLPermeability }

function TXMLPermeability.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLPermeability.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLPermeability.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLPermeability.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLPermeability.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLPermeability.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLPermeability.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLPermeability.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLPermeabilityList }

function TXMLPermeabilityList.Add: IXMLPermeability;
begin
  Result := AddItem(-1) as IXMLPermeability;
end;

function TXMLPermeabilityList.Insert(const Index: Integer): IXMLPermeability;
begin
  Result := AddItem(Index) as IXMLPermeability;
end;
function TXMLPermeabilityList.Get_Item(Index: Integer): IXMLPermeability;
begin
  Result := List[Index] as IXMLPermeability;
end;

{ TXMLPH }

function TXMLPH.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLPH.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLPH.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLPH.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLPH.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLPH.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLPH.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLPH.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLPHList }

function TXMLPHList.Add: IXMLPH;
begin
  Result := AddItem(-1) as IXMLPH;
end;

function TXMLPHList.Insert(const Index: Integer): IXMLPH;
begin
  Result := AddItem(Index) as IXMLPH;
end;
function TXMLPHList.Get_Item(Index: Integer): IXMLPH;
begin
  Result := List[Index] as IXMLPH;
end;

{ TXMLPlyBond }

function TXMLPlyBond.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLPlyBond.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLPlyBond.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLPlyBond.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLPlyBond.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLPlyBond.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLPlyBond.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLPlyBond.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLPlyBondList }

function TXMLPlyBondList.Add: IXMLPlyBond;
begin
  Result := AddItem(-1) as IXMLPlyBond;
end;

function TXMLPlyBondList.Insert(const Index: Integer): IXMLPlyBond;
begin
  Result := AddItem(Index) as IXMLPlyBond;
end;
function TXMLPlyBondList.Get_Item(Index: Integer): IXMLPlyBond;
begin
  Result := List[Index] as IXMLPlyBond;
end;

{ TXMLPorosity }

function TXMLPorosity.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLPorosity.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLPorosity.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLPorosity.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLPorosity.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLPorosity.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLPorosity.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLPorosity.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLPorosityList }

function TXMLPorosityList.Add: IXMLPorosity;
begin
  Result := AddItem(-1) as IXMLPorosity;
end;

function TXMLPorosityList.Insert(const Index: Integer): IXMLPorosity;
begin
  Result := AddItem(Index) as IXMLPorosity;
end;
function TXMLPorosityList.Get_Item(Index: Integer): IXMLPorosity;
begin
  Result := List[Index] as IXMLPorosity;
end;

{ TXMLPostConsumerWaste }

function TXMLPostConsumerWaste.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLPostConsumerWaste.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLPostConsumerWaste.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLPostConsumerWaste.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLPostConsumerWaste.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLPostConsumerWaste.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLPostConsumerWaste.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLPostConsumerWaste.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLPostConsumerWasteList }

function TXMLPostConsumerWasteList.Add: IXMLPostConsumerWaste;
begin
  Result := AddItem(-1) as IXMLPostConsumerWaste;
end;

function TXMLPostConsumerWasteList.Insert(const Index: Integer): IXMLPostConsumerWaste;
begin
  Result := AddItem(Index) as IXMLPostConsumerWaste;
end;
function TXMLPostConsumerWasteList.Get_Item(Index: Integer): IXMLPostConsumerWaste;
begin
  Result := List[Index] as IXMLPostConsumerWaste;
end;

{ TXMLPreConsumerWaste }

function TXMLPreConsumerWaste.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLPreConsumerWaste.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLPreConsumerWaste.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLPreConsumerWaste.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLPreConsumerWaste.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLPreConsumerWaste.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLPreConsumerWaste.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLPreConsumerWaste.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLPreConsumerWasteList }

function TXMLPreConsumerWasteList.Add: IXMLPreConsumerWaste;
begin
  Result := AddItem(-1) as IXMLPreConsumerWaste;
end;

function TXMLPreConsumerWasteList.Insert(const Index: Integer): IXMLPreConsumerWaste;
begin
  Result := AddItem(Index) as IXMLPreConsumerWaste;
end;
function TXMLPreConsumerWasteList.Get_Item(Index: Integer): IXMLPreConsumerWaste;
begin
  Result := List[Index] as IXMLPreConsumerWaste;
end;

{ TXMLRecycled }

function TXMLRecycled.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLRecycled.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLRecycled.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLRecycled.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLRecycled.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLRecycled.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLRecycled.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLRecycled.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLRecycledList }

function TXMLRecycledList.Add: IXMLRecycled;
begin
  Result := AddItem(-1) as IXMLRecycled;
end;

function TXMLRecycledList.Insert(const Index: Integer): IXMLRecycled;
begin
  Result := AddItem(Index) as IXMLRecycled;
end;
function TXMLRecycledList.Get_Item(Index: Integer): IXMLRecycled;
begin
  Result := List[Index] as IXMLRecycled;
end;

{ TXMLResistance }

function TXMLResistance.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLResistance.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLResistance.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLResistance.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLResistance.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLResistance.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLResistance.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLResistance.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLResistanceList }

function TXMLResistanceList.Add: IXMLResistance;
begin
  Result := AddItem(-1) as IXMLResistance;
end;

function TXMLResistanceList.Insert(const Index: Integer): IXMLResistance;
begin
  Result := AddItem(Index) as IXMLResistance;
end;
function TXMLResistanceList.Get_Item(Index: Integer): IXMLResistance;
begin
  Result := List[Index] as IXMLResistance;
end;

{ TXMLRingCrush }

function TXMLRingCrush.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLRingCrush.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLRingCrush.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLRingCrush.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLRingCrush.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLRingCrush.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLRingCrush.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLRingCrush.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLRingCrushList }

function TXMLRingCrushList.Add: IXMLRingCrush;
begin
  Result := AddItem(-1) as IXMLRingCrush;
end;

function TXMLRingCrushList.Insert(const Index: Integer): IXMLRingCrush;
begin
  Result := AddItem(Index) as IXMLRingCrush;
end;
function TXMLRingCrushList.Get_Item(Index: Integer): IXMLRingCrush;
begin
  Result := List[Index] as IXMLRingCrush;
end;

{ TXMLRoughness }

function TXMLRoughness.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLRoughness.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLRoughness.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLRoughness.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLRoughness.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLRoughness.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLRoughness.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLRoughness.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLRoughnessList }

function TXMLRoughnessList.Add: IXMLRoughness;
begin
  Result := AddItem(-1) as IXMLRoughness;
end;

function TXMLRoughnessList.Insert(const Index: Integer): IXMLRoughness;
begin
  Result := AddItem(Index) as IXMLRoughness;
end;
function TXMLRoughnessList.Get_Item(Index: Integer): IXMLRoughness;
begin
  Result := List[Index] as IXMLRoughness;
end;

{ TXMLRunnabilityIndex }

function TXMLRunnabilityIndex.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLRunnabilityIndex.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLRunnabilityIndex.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLRunnabilityIndex.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLRunnabilityIndex.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLRunnabilityIndex.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLRunnabilityIndex.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLRunnabilityIndex.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLRunnabilityIndexList }

function TXMLRunnabilityIndexList.Add: IXMLRunnabilityIndex;
begin
  Result := AddItem(-1) as IXMLRunnabilityIndex;
end;

function TXMLRunnabilityIndexList.Insert(const Index: Integer): IXMLRunnabilityIndex;
begin
  Result := AddItem(Index) as IXMLRunnabilityIndex;
end;
function TXMLRunnabilityIndexList.Get_Item(Index: Integer): IXMLRunnabilityIndex;
begin
  Result := List[Index] as IXMLRunnabilityIndex;
end;

{ TXMLShowThrough }

function TXMLShowThrough.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLShowThrough.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLShowThrough.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLShowThrough.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLShowThrough.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLShowThrough.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLShowThrough.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLShowThrough.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLShowThroughList }

function TXMLShowThroughList.Add: IXMLShowThrough;
begin
  Result := AddItem(-1) as IXMLShowThrough;
end;

function TXMLShowThroughList.Insert(const Index: Integer): IXMLShowThrough;
begin
  Result := AddItem(Index) as IXMLShowThrough;
end;
function TXMLShowThroughList.Get_Item(Index: Integer): IXMLShowThrough;
begin
  Result := List[Index] as IXMLShowThrough;
end;

{ TXMLSizing }

function TXMLSizing.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLSizing.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLSizing.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLSizing.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLSizing.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLSizing.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLSizing.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLSizing.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLSizingList }

function TXMLSizingList.Add: IXMLSizing;
begin
  Result := AddItem(-1) as IXMLSizing;
end;

function TXMLSizingList.Insert(const Index: Integer): IXMLSizing;
begin
  Result := AddItem(Index) as IXMLSizing;
end;
function TXMLSizingList.Get_Item(Index: Integer): IXMLSizing;
begin
  Result := List[Index] as IXMLSizing;
end;

{ TXMLSmoothness }

function TXMLSmoothness.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLSmoothness.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLSmoothness.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLSmoothness.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLSmoothness.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLSmoothness.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLSmoothness.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLSmoothness.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLSmoothnessList }

function TXMLSmoothnessList.Add: IXMLSmoothness;
begin
  Result := AddItem(-1) as IXMLSmoothness;
end;

function TXMLSmoothnessList.Insert(const Index: Integer): IXMLSmoothness;
begin
  Result := AddItem(Index) as IXMLSmoothness;
end;
function TXMLSmoothnessList.Get_Item(Index: Integer): IXMLSmoothness;
begin
  Result := List[Index] as IXMLSmoothness;
end;

{ TXMLStiffness }

function TXMLStiffness.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLStiffness.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLStiffness.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLStiffness.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLStiffness.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLStiffness.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLStiffness.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLStiffness.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLStiffnessList }

function TXMLStiffnessList.Add: IXMLStiffness;
begin
  Result := AddItem(-1) as IXMLStiffness;
end;

function TXMLStiffnessList.Insert(const Index: Integer): IXMLStiffness;
begin
  Result := AddItem(Index) as IXMLStiffness;
end;
function TXMLStiffnessList.Get_Item(Index: Integer): IXMLStiffness;
begin
  Result := List[Index] as IXMLStiffness;
end;

{ TXMLStretch }

function TXMLStretch.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLStretch.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLStretch.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLStretch.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLStretch.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLStretch.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLStretch.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLStretch.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLStretchList }

function TXMLStretchList.Add: IXMLStretch;
begin
  Result := AddItem(-1) as IXMLStretch;
end;

function TXMLStretchList.Insert(const Index: Integer): IXMLStretch;
begin
  Result := AddItem(Index) as IXMLStretch;
end;
function TXMLStretchList.Get_Item(Index: Integer): IXMLStretch;
begin
  Result := List[Index] as IXMLStretch;
end;

{ TXMLSurfaceStrength }

function TXMLSurfaceStrength.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLSurfaceStrength.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLSurfaceStrength.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLSurfaceStrength.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLSurfaceStrength.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLSurfaceStrength.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLSurfaceStrength.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLSurfaceStrength.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLSurfaceStrengthList }

function TXMLSurfaceStrengthList.Add: IXMLSurfaceStrength;
begin
  Result := AddItem(-1) as IXMLSurfaceStrength;
end;

function TXMLSurfaceStrengthList.Insert(const Index: Integer): IXMLSurfaceStrength;
begin
  Result := AddItem(Index) as IXMLSurfaceStrength;
end;
function TXMLSurfaceStrengthList.Get_Item(Index: Integer): IXMLSurfaceStrength;
begin
  Result := List[Index] as IXMLSurfaceStrength;
end;

{ TXMLTEA }

function TXMLTEA.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLTEA.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLTEA.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLTEA.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLTEA.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLTEA.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLTEA.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLTEA.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLTEAList }

function TXMLTEAList.Add: IXMLTEA;
begin
  Result := AddItem(-1) as IXMLTEA;
end;

function TXMLTEAList.Insert(const Index: Integer): IXMLTEA;
begin
  Result := AddItem(Index) as IXMLTEA;
end;
function TXMLTEAList.Get_Item(Index: Integer): IXMLTEA;
begin
  Result := List[Index] as IXMLTEA;
end;

{ TXMLTear }

function TXMLTear.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLTear.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLTear.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLTear.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLTear.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLTear.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLTear.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLTear.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLTearList }

function TXMLTearList.Add: IXMLTear;
begin
  Result := AddItem(-1) as IXMLTear;
end;

function TXMLTearList.Insert(const Index: Integer): IXMLTear;
begin
  Result := AddItem(Index) as IXMLTear;
end;
function TXMLTearList.Get_Item(Index: Integer): IXMLTear;
begin
  Result := List[Index] as IXMLTear;
end;

{ TXMLTearIndex }

function TXMLTearIndex.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLTearIndex.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLTearIndex.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLTearIndex.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLTearIndex.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLTearIndex.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLTearIndex.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLTearIndex.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLTearIndexList }

function TXMLTearIndexList.Add: IXMLTearIndex;
begin
  Result := AddItem(-1) as IXMLTearIndex;
end;

function TXMLTearIndexList.Insert(const Index: Integer): IXMLTearIndex;
begin
  Result := AddItem(Index) as IXMLTearIndex;
end;
function TXMLTearIndexList.Get_Item(Index: Integer): IXMLTearIndex;
begin
  Result := List[Index] as IXMLTearIndex;
end;

{ TXMLTensile }

function TXMLTensile.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLTensile.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLTensile.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLTensile.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLTensile.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLTensile.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLTensile.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLTensile.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLTensileList }

function TXMLTensileList.Add: IXMLTensile;
begin
  Result := AddItem(-1) as IXMLTensile;
end;

function TXMLTensileList.Insert(const Index: Integer): IXMLTensile;
begin
  Result := AddItem(Index) as IXMLTensile;
end;
function TXMLTensileList.Get_Item(Index: Integer): IXMLTensile;
begin
  Result := List[Index] as IXMLTensile;
end;

{ TXMLTensileIndex }

function TXMLTensileIndex.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLTensileIndex.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLTensileIndex.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLTensileIndex.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLTensileIndex.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLTensileIndex.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLTensileIndex.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLTensileIndex.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLTensileIndexList }

function TXMLTensileIndexList.Add: IXMLTensileIndex;
begin
  Result := AddItem(-1) as IXMLTensileIndex;
end;

function TXMLTensileIndexList.Insert(const Index: Integer): IXMLTensileIndex;
begin
  Result := AddItem(Index) as IXMLTensileIndex;
end;
function TXMLTensileIndexList.Get_Item(Index: Integer): IXMLTensileIndex;
begin
  Result := List[Index] as IXMLTensileIndex;
end;

{ TXMLWhiteness }

function TXMLWhiteness.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLWhiteness.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLWhiteness.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLWhiteness.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLWhiteness.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLWhiteness.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLWhiteness.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLWhiteness.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLWhitenessList }

function TXMLWhitenessList.Add: IXMLWhiteness;
begin
  Result := AddItem(-1) as IXMLWhiteness;
end;

function TXMLWhitenessList.Insert(const Index: Integer): IXMLWhiteness;
begin
  Result := AddItem(Index) as IXMLWhiteness;
end;
function TXMLWhitenessList.Get_Item(Index: Integer): IXMLWhiteness;
begin
  Result := List[Index] as IXMLWhiteness;
end;

{ TXMLAdditionalTest }

procedure TXMLAdditionalTest.AfterConstruction;
begin
  RegisterChildNode('DetailValue', TXMLDetailValue);
  RegisterChildNode('DetailRangeMin', TXMLDetailRangeMin);
  RegisterChildNode('DetailRangeMax', TXMLDetailRangeMax);
  RegisterChildNode('StandardDeviation', TXMLStandardDeviation);
  RegisterChildNode('TwoSigmaLower', TXMLTwoSigmaLower);
  RegisterChildNode('TwoSigmaUpper', TXMLTwoSigmaUpper);
  inherited;
end;

function TXMLAdditionalTest.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLAdditionalTest.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLAdditionalTest.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLAdditionalTest.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLAdditionalTest.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLAdditionalTest.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLAdditionalTest.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLAdditionalTest.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

function TXMLAdditionalTest.Get_AdditionalTestName: WideString;
begin
  Result := ChildNodes['AdditionalTestName'].Text;
end;

procedure TXMLAdditionalTest.Set_AdditionalTestName(Value: WideString);
begin
  ChildNodes['AdditionalTestName'].NodeValue := Value;
end;

function TXMLAdditionalTest.Get_DetailValue: IXMLDetailValue;
begin
  Result := ChildNodes['DetailValue'] as IXMLDetailValue;
end;

function TXMLAdditionalTest.Get_DetailRangeMin: IXMLDetailRangeMin;
begin
  Result := ChildNodes['DetailRangeMin'] as IXMLDetailRangeMin;
end;

function TXMLAdditionalTest.Get_DetailRangeMax: IXMLDetailRangeMax;
begin
  Result := ChildNodes['DetailRangeMax'] as IXMLDetailRangeMax;
end;

function TXMLAdditionalTest.Get_StandardDeviation: IXMLStandardDeviation;
begin
  Result := ChildNodes['StandardDeviation'] as IXMLStandardDeviation;
end;

function TXMLAdditionalTest.Get_SampleSize: LongWord;
begin
  Result := ChildNodes['SampleSize'].NodeValue;
end;

procedure TXMLAdditionalTest.Set_SampleSize(Value: LongWord);
begin
  ChildNodes['SampleSize'].NodeValue := Value;
end;

function TXMLAdditionalTest.Get_TwoSigmaLower: IXMLTwoSigmaLower;
begin
  Result := ChildNodes['TwoSigmaLower'] as IXMLTwoSigmaLower;
end;

function TXMLAdditionalTest.Get_TwoSigmaUpper: IXMLTwoSigmaUpper;
begin
  Result := ChildNodes['TwoSigmaUpper'] as IXMLTwoSigmaUpper;
end;

{ TXMLPlyAttributes }

procedure TXMLPlyAttributes.AfterConstruction;
begin
  RegisterChildNode('Abrasion', TXMLAbrasion);
  RegisterChildNode('AbsorptionInk', TXMLAbsorptionInk);
  RegisterChildNode('AbsorptionLight', TXMLAbsorptionLight);
  RegisterChildNode('AbsorptionWater', TXMLAbsorptionWater);
  RegisterChildNode('Appearance', TXMLAppearance);
  RegisterChildNode('Ash', TXMLAsh);
  RegisterChildNode('BasisWeight', TXMLBasisWeight);
  RegisterChildNode('BendingResistance', TXMLBendingResistance);
  RegisterChildNode('BendingStiffness', TXMLBendingStiffness);
  RegisterChildNode('Brightness', TXMLBrightness);
  RegisterChildNode('Bulk', TXMLBulk);
  RegisterChildNode('Burst', TXMLBurst);
  RegisterChildNode('BurstIndex', TXMLBurstIndex);
  RegisterChildNode('Caliper', TXMLCaliper);
  RegisterChildNode('CoatWeight', TXMLCoatWeight);
  RegisterChildNode('ColourDetail', TXMLColourDetail);
  RegisterChildNode('Density', TXMLDensity);
  RegisterChildNode('Dirt', TXMLDirt);
  RegisterChildNode('DominantWavelength', TXMLDominantWavelength);
  RegisterChildNode('FibreLength', TXMLFibreLength);
  RegisterChildNode('FibreClassification', TXMLFibreClassification);
  RegisterChildNode('Folding', TXMLFolding);
  RegisterChildNode('Formation', TXMLFormation);
  RegisterChildNode('Freeness', TXMLFreeness);
  RegisterChildNode('Friction', TXMLFriction);
  RegisterChildNode('Gloss', TXMLGloss);
  RegisterChildNode('LightScattering', TXMLLightScattering);
  RegisterChildNode('Moisture', TXMLMoisture);
  RegisterChildNode('Opacity', TXMLOpacity);
  RegisterChildNode('Permeability', TXMLPermeability);
  RegisterChildNode('pH', TXMLPH);
  RegisterChildNode('PlyBond', TXMLPlyBond);
  RegisterChildNode('Porosity', TXMLPorosity);
  RegisterChildNode('PostConsumerWaste', TXMLPostConsumerWaste);
  RegisterChildNode('PPI', TXMLMeasurement);
  RegisterChildNode('PreConsumerWaste', TXMLPreConsumerWaste);
  RegisterChildNode('Recycled', TXMLRecycled);
  RegisterChildNode('Resistance', TXMLResistance);
  RegisterChildNode('RingCrush', TXMLRingCrush);
  RegisterChildNode('Roughness', TXMLRoughness);
  RegisterChildNode('RunnabilityIndex', TXMLRunnabilityIndex);
  RegisterChildNode('ShowThrough', TXMLShowThrough);
  RegisterChildNode('Sizing', TXMLSizing);
  RegisterChildNode('Smoothness', TXMLSmoothness);
  RegisterChildNode('Stiffness', TXMLStiffness);
  RegisterChildNode('Stretch', TXMLStretch);
  RegisterChildNode('SurfaceStrength', TXMLSurfaceStrength);
  RegisterChildNode('TEA', TXMLTEA);
  RegisterChildNode('Tear', TXMLTear);
  RegisterChildNode('TearIndex', TXMLTearIndex);
  RegisterChildNode('Tensile', TXMLTensile);
  RegisterChildNode('TensileIndex', TXMLTensileIndex);
  RegisterChildNode('Whiteness', TXMLWhiteness);
  RegisterChildNode('AdditionalTest', TXMLAdditionalTest);
  FAbrasion := CreateCollection(TXMLAbrasionList, IXMLAbrasion, 'Abrasion') as IXMLAbrasionList;
  FAbsorptionInk := CreateCollection(TXMLAbsorptionInkList, IXMLAbsorptionInk, 'AbsorptionInk') as IXMLAbsorptionInkList;
  FAbsorptionLight := CreateCollection(TXMLAbsorptionLightList, IXMLAbsorptionLight, 'AbsorptionLight') as IXMLAbsorptionLightList;
  FAbsorptionWater := CreateCollection(TXMLAbsorptionWaterList, IXMLAbsorptionWater, 'AbsorptionWater') as IXMLAbsorptionWaterList;
  FAppearance := CreateCollection(TXMLAppearanceList, IXMLAppearance, 'Appearance') as IXMLAppearanceList;
  FAsh := CreateCollection(TXMLAshList, IXMLAsh, 'Ash') as IXMLAshList;
  FBasisWeight := CreateCollection(TXMLBasisWeightList, IXMLBasisWeight, 'BasisWeight') as IXMLBasisWeightList;
  FBendingResistance := CreateCollection(TXMLBendingResistanceList, IXMLBendingResistance, 'BendingResistance') as IXMLBendingResistanceList;
  FBendingStiffness := CreateCollection(TXMLBendingStiffnessList, IXMLBendingStiffness, 'BendingStiffness') as IXMLBendingStiffnessList;
  FBrightness := CreateCollection(TXMLBrightnessList, IXMLBrightness, 'Brightness') as IXMLBrightnessList;
  FBulk := CreateCollection(TXMLBulkList, IXMLBulk, 'Bulk') as IXMLBulkList;
  FBurst := CreateCollection(TXMLBurstList, IXMLBurst, 'Burst') as IXMLBurstList;
  FBurstIndex := CreateCollection(TXMLBurstIndexList, IXMLBurstIndex, 'BurstIndex') as IXMLBurstIndexList;
  FCaliper := CreateCollection(TXMLCaliperList, IXMLCaliper, 'Caliper') as IXMLCaliperList;
  FCoatWeight := CreateCollection(TXMLCoatWeightList, IXMLCoatWeight, 'CoatWeight') as IXMLCoatWeightList;
  FColourDetail := CreateCollection(TXMLColourDetailList, IXMLColourDetail, 'ColourDetail') as IXMLColourDetailList;
  FDensity := CreateCollection(TXMLDensityList, IXMLDensity, 'Density') as IXMLDensityList;
  FDirt := CreateCollection(TXMLDirtList, IXMLDirt, 'Dirt') as IXMLDirtList;
  FDominantWavelength := CreateCollection(TXMLDominantWavelengthList, IXMLDominantWavelength, 'DominantWavelength') as IXMLDominantWavelengthList;
  FFibreLength := CreateCollection(TXMLFibreLengthList, IXMLFibreLength, 'FibreLength') as IXMLFibreLengthList;
  FFibreClassification := CreateCollection(TXMLFibreClassificationList, IXMLFibreClassification, 'FibreClassification') as IXMLFibreClassificationList;
  FFolding := CreateCollection(TXMLFoldingList, IXMLFolding, 'Folding') as IXMLFoldingList;
  FFormation := CreateCollection(TXMLFormationList, IXMLFormation, 'Formation') as IXMLFormationList;
  FFreeness := CreateCollection(TXMLFreenessList, IXMLFreeness, 'Freeness') as IXMLFreenessList;
  FFriction := CreateCollection(TXMLFrictionList, IXMLFriction, 'Friction') as IXMLFrictionList;
  FGloss := CreateCollection(TXMLGlossList, IXMLGloss, 'Gloss') as IXMLGlossList;
  FLightScattering := CreateCollection(TXMLLightScatteringList, IXMLLightScattering, 'LightScattering') as IXMLLightScatteringList;
  FMoisture := CreateCollection(TXMLMoistureList, IXMLMoisture, 'Moisture') as IXMLMoistureList;
  FOpacity := CreateCollection(TXMLOpacityList, IXMLOpacity, 'Opacity') as IXMLOpacityList;
  FPermeability := CreateCollection(TXMLPermeabilityList, IXMLPermeability, 'Permeability') as IXMLPermeabilityList;
  FPH := CreateCollection(TXMLPHList, IXMLPH, 'pH') as IXMLPHList;
  FPlyBond := CreateCollection(TXMLPlyBondList, IXMLPlyBond, 'PlyBond') as IXMLPlyBondList;
  FPorosity := CreateCollection(TXMLPorosityList, IXMLPorosity, 'Porosity') as IXMLPorosityList;
  FPostConsumerWaste := CreateCollection(TXMLPostConsumerWasteList, IXMLPostConsumerWaste, 'PostConsumerWaste') as IXMLPostConsumerWasteList;
  FPPI := CreateCollection(TXMLMeasurementList, IXMLMeasurement, 'PPI') as IXMLMeasurementList;
  FPreConsumerWaste := CreateCollection(TXMLPreConsumerWasteList, IXMLPreConsumerWaste, 'PreConsumerWaste') as IXMLPreConsumerWasteList;
  FRecycled := CreateCollection(TXMLRecycledList, IXMLRecycled, 'Recycled') as IXMLRecycledList;
  FResistance := CreateCollection(TXMLResistanceList, IXMLResistance, 'Resistance') as IXMLResistanceList;
  FRingCrush := CreateCollection(TXMLRingCrushList, IXMLRingCrush, 'RingCrush') as IXMLRingCrushList;
  FRoughness := CreateCollection(TXMLRoughnessList, IXMLRoughness, 'Roughness') as IXMLRoughnessList;
  FRunnabilityIndex := CreateCollection(TXMLRunnabilityIndexList, IXMLRunnabilityIndex, 'RunnabilityIndex') as IXMLRunnabilityIndexList;
  FShowThrough := CreateCollection(TXMLShowThroughList, IXMLShowThrough, 'ShowThrough') as IXMLShowThroughList;
  FSizing := CreateCollection(TXMLSizingList, IXMLSizing, 'Sizing') as IXMLSizingList;
  FSmoothness := CreateCollection(TXMLSmoothnessList, IXMLSmoothness, 'Smoothness') as IXMLSmoothnessList;
  FStiffness := CreateCollection(TXMLStiffnessList, IXMLStiffness, 'Stiffness') as IXMLStiffnessList;
  FStretch := CreateCollection(TXMLStretchList, IXMLStretch, 'Stretch') as IXMLStretchList;
  FSurfaceStrength := CreateCollection(TXMLSurfaceStrengthList, IXMLSurfaceStrength, 'SurfaceStrength') as IXMLSurfaceStrengthList;
  FTEA := CreateCollection(TXMLTEAList, IXMLTEA, 'TEA') as IXMLTEAList;
  FTear := CreateCollection(TXMLTearList, IXMLTear, 'Tear') as IXMLTearList;
  FTearIndex := CreateCollection(TXMLTearIndexList, IXMLTearIndex, 'TearIndex') as IXMLTearIndexList;
  FTensile := CreateCollection(TXMLTensileList, IXMLTensile, 'Tensile') as IXMLTensileList;
  FTensileIndex := CreateCollection(TXMLTensileIndexList, IXMLTensileIndex, 'TensileIndex') as IXMLTensileIndexList;
  FWhiteness := CreateCollection(TXMLWhitenessList, IXMLWhiteness, 'Whiteness') as IXMLWhitenessList;
  inherited;
end;

function TXMLPlyAttributes.Get_CoatingLocation: WideString;
begin
  Result := AttributeNodes['CoatingLocation'].Text;
end;

procedure TXMLPlyAttributes.Set_CoatingLocation(Value: WideString);
begin
  SetAttribute('CoatingLocation', Value);
end;

function TXMLPlyAttributes.Get_PlyNumber: LongWord;
begin
  Result := ChildNodes['PlyNumber'].NodeValue;
end;

procedure TXMLPlyAttributes.Set_PlyNumber(Value: LongWord);
begin
  ChildNodes['PlyNumber'].NodeValue := Value;
end;

function TXMLPlyAttributes.Get_Abrasion: IXMLAbrasionList;
begin
  Result := FAbrasion;
end;

function TXMLPlyAttributes.Get_AbsorptionInk: IXMLAbsorptionInkList;
begin
  Result := FAbsorptionInk;
end;

function TXMLPlyAttributes.Get_AbsorptionLight: IXMLAbsorptionLightList;
begin
  Result := FAbsorptionLight;
end;

function TXMLPlyAttributes.Get_AbsorptionWater: IXMLAbsorptionWaterList;
begin
  Result := FAbsorptionWater;
end;

function TXMLPlyAttributes.Get_Appearance: IXMLAppearanceList;
begin
  Result := FAppearance;
end;

function TXMLPlyAttributes.Get_Ash: IXMLAshList;
begin
  Result := FAsh;
end;

function TXMLPlyAttributes.Get_BasisWeight: IXMLBasisWeightList;
begin
  Result := FBasisWeight;
end;

function TXMLPlyAttributes.Get_BendingResistance: IXMLBendingResistanceList;
begin
  Result := FBendingResistance;
end;

function TXMLPlyAttributes.Get_BendingStiffness: IXMLBendingStiffnessList;
begin
  Result := FBendingStiffness;
end;

function TXMLPlyAttributes.Get_Brightness: IXMLBrightnessList;
begin
  Result := FBrightness;
end;

function TXMLPlyAttributes.Get_Bulk: IXMLBulkList;
begin
  Result := FBulk;
end;

function TXMLPlyAttributes.Get_Burst: IXMLBurstList;
begin
  Result := FBurst;
end;

function TXMLPlyAttributes.Get_BurstIndex: IXMLBurstIndexList;
begin
  Result := FBurstIndex;
end;

function TXMLPlyAttributes.Get_Caliper: IXMLCaliperList;
begin
  Result := FCaliper;
end;

function TXMLPlyAttributes.Get_CoatWeight: IXMLCoatWeightList;
begin
  Result := FCoatWeight;
end;

function TXMLPlyAttributes.Get_ColourDetail: IXMLColourDetailList;
begin
  Result := FColourDetail;
end;

function TXMLPlyAttributes.Get_Density: IXMLDensityList;
begin
  Result := FDensity;
end;

function TXMLPlyAttributes.Get_Dirt: IXMLDirtList;
begin
  Result := FDirt;
end;

function TXMLPlyAttributes.Get_DominantWavelength: IXMLDominantWavelengthList;
begin
  Result := FDominantWavelength;
end;

function TXMLPlyAttributes.Get_FibreLength: IXMLFibreLengthList;
begin
  Result := FFibreLength;
end;

function TXMLPlyAttributes.Get_FibreClassification: IXMLFibreClassificationList;
begin
  Result := FFibreClassification;
end;

function TXMLPlyAttributes.Get_Folding: IXMLFoldingList;
begin
  Result := FFolding;
end;

function TXMLPlyAttributes.Get_Formation: IXMLFormationList;
begin
  Result := FFormation;
end;

function TXMLPlyAttributes.Get_Freeness: IXMLFreenessList;
begin
  Result := FFreeness;
end;

function TXMLPlyAttributes.Get_Friction: IXMLFrictionList;
begin
  Result := FFriction;
end;

function TXMLPlyAttributes.Get_Gloss: IXMLGlossList;
begin
  Result := FGloss;
end;

function TXMLPlyAttributes.Get_LightScattering: IXMLLightScatteringList;
begin
  Result := FLightScattering;
end;

function TXMLPlyAttributes.Get_Moisture: IXMLMoistureList;
begin
  Result := FMoisture;
end;

function TXMLPlyAttributes.Get_Opacity: IXMLOpacityList;
begin
  Result := FOpacity;
end;

function TXMLPlyAttributes.Get_Permeability: IXMLPermeabilityList;
begin
  Result := FPermeability;
end;

function TXMLPlyAttributes.Get_PH: IXMLPHList;
begin
  Result := FPH;
end;

function TXMLPlyAttributes.Get_PlyBond: IXMLPlyBondList;
begin
  Result := FPlyBond;
end;

function TXMLPlyAttributes.Get_Porosity: IXMLPorosityList;
begin
  Result := FPorosity;
end;

function TXMLPlyAttributes.Get_PostConsumerWaste: IXMLPostConsumerWasteList;
begin
  Result := FPostConsumerWaste;
end;

function TXMLPlyAttributes.Get_PPI: IXMLMeasurementList;
begin
  Result := FPPI;
end;

function TXMLPlyAttributes.Get_PreConsumerWaste: IXMLPreConsumerWasteList;
begin
  Result := FPreConsumerWaste;
end;

function TXMLPlyAttributes.Get_Recycled: IXMLRecycledList;
begin
  Result := FRecycled;
end;

function TXMLPlyAttributes.Get_Resistance: IXMLResistanceList;
begin
  Result := FResistance;
end;

function TXMLPlyAttributes.Get_RingCrush: IXMLRingCrushList;
begin
  Result := FRingCrush;
end;

function TXMLPlyAttributes.Get_Roughness: IXMLRoughnessList;
begin
  Result := FRoughness;
end;

function TXMLPlyAttributes.Get_RunnabilityIndex: IXMLRunnabilityIndexList;
begin
  Result := FRunnabilityIndex;
end;

function TXMLPlyAttributes.Get_ShowThrough: IXMLShowThroughList;
begin
  Result := FShowThrough;
end;

function TXMLPlyAttributes.Get_Sizing: IXMLSizingList;
begin
  Result := FSizing;
end;

function TXMLPlyAttributes.Get_Smoothness: IXMLSmoothnessList;
begin
  Result := FSmoothness;
end;

function TXMLPlyAttributes.Get_Stiffness: IXMLStiffnessList;
begin
  Result := FStiffness;
end;

function TXMLPlyAttributes.Get_Stretch: IXMLStretchList;
begin
  Result := FStretch;
end;

function TXMLPlyAttributes.Get_SurfaceStrength: IXMLSurfaceStrengthList;
begin
  Result := FSurfaceStrength;
end;

function TXMLPlyAttributes.Get_TEA: IXMLTEAList;
begin
  Result := FTEA;
end;

function TXMLPlyAttributes.Get_Tear: IXMLTearList;
begin
  Result := FTear;
end;

function TXMLPlyAttributes.Get_TearIndex: IXMLTearIndexList;
begin
  Result := FTearIndex;
end;

function TXMLPlyAttributes.Get_Tensile: IXMLTensileList;
begin
  Result := FTensile;
end;

function TXMLPlyAttributes.Get_TensileIndex: IXMLTensileIndexList;
begin
  Result := FTensileIndex;
end;

function TXMLPlyAttributes.Get_Whiteness: IXMLWhitenessList;
begin
  Result := FWhiteness;
end;

function TXMLPlyAttributes.Get_AdditionalTest: IXMLAdditionalTest;
begin
  Result := ChildNodes['AdditionalTest'] as IXMLAdditionalTest;
end;

{ TXMLPlyAttributesList }

function TXMLPlyAttributesList.Add: IXMLPlyAttributes;
begin
  Result := AddItem(-1) as IXMLPlyAttributes;
end;

function TXMLPlyAttributesList.Insert(const Index: Integer): IXMLPlyAttributes;
begin
  Result := AddItem(Index) as IXMLPlyAttributes;
end;
function TXMLPlyAttributesList.Get_Item(Index: Integer): IXMLPlyAttributes;
begin
  Result := List[Index] as IXMLPlyAttributes;
end;

{ TXMLPlySet }

procedure TXMLPlySet.AfterConstruction;
begin
  RegisterChildNode('PlyAttributes', TXMLPlyAttributes);
  FNumberOfPlies := CreateCollection(TXMLNni1List, IXMLNode, 'NumberOfPlies') as IXMLNni1List;
  FPlyAttributes := CreateCollection(TXMLPlyAttributesList, IXMLPlyAttributes, 'PlyAttributes') as IXMLPlyAttributesList;
  inherited;
end;

function TXMLPlySet.Get_EdgePaddable: WideString;
begin
  Result := AttributeNodes['EdgePaddable'].Text;
end;

procedure TXMLPlySet.Set_EdgePaddable(Value: WideString);
begin
  SetAttribute('EdgePaddable', Value);
end;

function TXMLPlySet.Get_NumberOfPlies: IXMLNni1List;
begin
  Result := FNumberOfPlies;
end;

function TXMLPlySet.Get_PlyAttributes: IXMLPlyAttributesList;
begin
  Result := FPlyAttributes;
end;

{ TXMLPlySetList }

function TXMLPlySetList.Add: IXMLPlySet;
begin
  Result := AddItem(-1) as IXMLPlySet;
end;

function TXMLPlySetList.Insert(const Index: Integer): IXMLPlySet;
begin
  Result := AddItem(Index) as IXMLPlySet;
end;
function TXMLPlySetList.Get_Item(Index: Integer): IXMLPlySet;
begin
  Result := List[Index] as IXMLPlySet;
end;

{ TXMLReel }

procedure TXMLReel.AfterConstruction;
begin
  RegisterChildNode('ReelConversionCharacteristics', TXMLReelConversionCharacteristicsClass);
  RegisterChildNode('ReelPackagingCharacteristics', TXMLReelPackagingCharacteristicsClass);
  inherited;
end;

function TXMLReel.Get_ReelConversionCharacteristics: IXMLReelConversionCharacteristicsClass;
begin
  Result := ChildNodes['ReelConversionCharacteristics'] as IXMLReelConversionCharacteristicsClass;
end;

function TXMLReel.Get_ReelPackagingCharacteristics: IXMLReelPackagingCharacteristicsClass;
begin
  Result := ChildNodes['ReelPackagingCharacteristics'] as IXMLReelPackagingCharacteristicsClass;
end;

{ TXMLReelConversionCharacteristicsClass }

procedure TXMLReelConversionCharacteristicsClass.AfterConstruction;
begin
  RegisterChildNode('ConversionCode', TXMLConversionCode);
  RegisterChildNode('ReelWidth', TXMLMeasurement);
  RegisterChildNode('ReelDiameter', TXMLMeasurement);
  RegisterChildNode('ReelLength', TXMLMeasurement);
  RegisterChildNode('TargetProductWeight', TXMLMeasurement);
  RegisterChildNode('CoreCharacteristics', TXMLCoreCharacteristics);
  RegisterChildNode('Embossing', TXMLEmbossing);
  RegisterChildNode('Watermark', TXMLWatermark);
  FReelWidth := CreateCollection(TXMLMeasurementList, IXMLMeasurement, 'ReelWidth') as IXMLMeasurementList;
  FReelDiameter := CreateCollection(TXMLMeasurementList, IXMLMeasurement, 'ReelDiameter') as IXMLMeasurementList;
  FReelLength := CreateCollection(TXMLMeasurementList, IXMLMeasurement, 'ReelLength') as IXMLMeasurementList;
  FCoreCharacteristics := CreateCollection(TXMLCoreCharacteristicsList, IXMLCoreCharacteristics, 'CoreCharacteristics') as IXMLCoreCharacteristicsList;
  FEmbossing := CreateCollection(TXMLEmbossingList, IXMLEmbossing, 'Embossing') as IXMLEmbossingList;
  FWatermark := CreateCollection(TXMLWatermarkList, IXMLWatermark, 'Watermark') as IXMLWatermarkList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLReelConversionCharacteristicsClass.Get_ConversionCode: IXMLConversionCode;
begin
  Result := ChildNodes['ConversionCode'] as IXMLConversionCode;
end;

function TXMLReelConversionCharacteristicsClass.Get_WindingDirection: WideString;
begin
  Result := ChildNodes['WindingDirection'].Text;
end;

procedure TXMLReelConversionCharacteristicsClass.Set_WindingDirection(Value: WideString);
begin
  ChildNodes['WindingDirection'].NodeValue := Value;
end;

function TXMLReelConversionCharacteristicsClass.Get_MakeTo: WideString;
begin
  Result := ChildNodes['MakeTo'].Text;
end;

procedure TXMLReelConversionCharacteristicsClass.Set_MakeTo(Value: WideString);
begin
  ChildNodes['MakeTo'].NodeValue := Value;
end;

function TXMLReelConversionCharacteristicsClass.Get_ReelWidth: IXMLMeasurementList;
begin
  Result := FReelWidth;
end;

function TXMLReelConversionCharacteristicsClass.Get_ReelDiameter: IXMLMeasurementList;
begin
  Result := FReelDiameter;
end;

function TXMLReelConversionCharacteristicsClass.Get_ReelLength: IXMLMeasurementList;
begin
  Result := FReelLength;
end;

function TXMLReelConversionCharacteristicsClass.Get_TargetProductWeight: IXMLMeasurement;
begin
  Result := ChildNodes['TargetProductWeight'] as IXMLMeasurement;
end;

function TXMLReelConversionCharacteristicsClass.Get_CoreCharacteristics: IXMLCoreCharacteristicsList;
begin
  Result := FCoreCharacteristics;
end;

function TXMLReelConversionCharacteristicsClass.Get_Embossing: IXMLEmbossingList;
begin
  Result := FEmbossing;
end;

function TXMLReelConversionCharacteristicsClass.Get_Watermark: IXMLWatermarkList;
begin
  Result := FWatermark;
end;

function TXMLReelConversionCharacteristicsClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLPulpClass }

procedure TXMLPulpClass.AfterConstruction;
begin
  RegisterChildNode('PulpCharacteristics', TXMLPulpCharacteristics);
  RegisterChildNode('Bale', TXMLBale);
  RegisterChildNode('Reel', TXMLReel);
  RegisterChildNode('Slurry', TXMLSlurry);
  RegisterChildNode('NonStandardPulp', TXMLNonStandardPulp);
  inherited;
end;

function TXMLPulpClass.Get_PulpCharacteristics: IXMLPulpCharacteristics;
begin
  Result := ChildNodes['PulpCharacteristics'] as IXMLPulpCharacteristics;
end;

function TXMLPulpClass.Get_Bale: IXMLBale;
begin
  Result := ChildNodes['Bale'] as IXMLBale;
end;

function TXMLPulpClass.Get_Reel: IXMLReel;
begin
  Result := ChildNodes['Reel'] as IXMLReel;
end;

function TXMLPulpClass.Get_Slurry: IXMLSlurry;
begin
  Result := ChildNodes['Slurry'] as IXMLSlurry;
end;

function TXMLPulpClass.Get_NonStandardPulp: IXMLNonStandardPulp;
begin
  Result := ChildNodes['NonStandardPulp'] as IXMLNonStandardPulp;
end;

{ TXMLPulpCharacteristics }

procedure TXMLPulpCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Ash', TXMLAsh);
  RegisterChildNode('BasisWeight', TXMLBasisWeight);
  RegisterChildNode('Brightness', TXMLBrightness);
  RegisterChildNode('Burst', TXMLBurst);
  RegisterChildNode('BurstIndex', TXMLBurstIndex);
  RegisterChildNode('ColourDetail', TXMLColourDetail);
  RegisterChildNode('Density', TXMLDensity);
  RegisterChildNode('Dirt', TXMLDirt);
  RegisterChildNode('DrainageResistance', TXMLDrainageResistance);
  RegisterChildNode('FibreLength', TXMLFibreLength);
  RegisterChildNode('FibreClassification', TXMLFibreClassification);
  RegisterChildNode('Freeness', TXMLFreeness);
  RegisterChildNode('LightScattering', TXMLLightScattering);
  RegisterChildNode('Moisture', TXMLMoisture);
  RegisterChildNode('Opacity', TXMLOpacity);
  RegisterChildNode('pH', TXMLPH);
  RegisterChildNode('PostConsumerWaste', TXMLPostConsumerWaste);
  RegisterChildNode('PreConsumerWaste', TXMLPreConsumerWaste);
  RegisterChildNode('Recycled', TXMLRecycled);
  RegisterChildNode('Tear', TXMLTear);
  RegisterChildNode('TearIndex', TXMLTearIndex);
  RegisterChildNode('Tensile', TXMLTensile);
  RegisterChildNode('TensileIndex', TXMLTensileIndex);
  RegisterChildNode('Viscosity', TXMLViscosity);
  RegisterChildNode('Whiteness', TXMLWhiteness);
  RegisterChildNode('AdditionalTest', TXMLAdditionalTest);
  FAsh := CreateCollection(TXMLAshList, IXMLAsh, 'Ash') as IXMLAshList;
  FBasisWeight := CreateCollection(TXMLBasisWeightList, IXMLBasisWeight, 'BasisWeight') as IXMLBasisWeightList;
  FBrightness := CreateCollection(TXMLBrightnessList, IXMLBrightness, 'Brightness') as IXMLBrightnessList;
  FBurst := CreateCollection(TXMLBurstList, IXMLBurst, 'Burst') as IXMLBurstList;
  FBurstIndex := CreateCollection(TXMLBurstIndexList, IXMLBurstIndex, 'BurstIndex') as IXMLBurstIndexList;
  FColourDetail := CreateCollection(TXMLColourDetailList, IXMLColourDetail, 'ColourDetail') as IXMLColourDetailList;
  FDensity := CreateCollection(TXMLDensityList, IXMLDensity, 'Density') as IXMLDensityList;
  FDirt := CreateCollection(TXMLDirtList, IXMLDirt, 'Dirt') as IXMLDirtList;
  FDrainageResistance := CreateCollection(TXMLDrainageResistanceList, IXMLDrainageResistance, 'DrainageResistance') as IXMLDrainageResistanceList;
  FFibreLength := CreateCollection(TXMLFibreLengthList, IXMLFibreLength, 'FibreLength') as IXMLFibreLengthList;
  FFibreClassification := CreateCollection(TXMLFibreClassificationList, IXMLFibreClassification, 'FibreClassification') as IXMLFibreClassificationList;
  FFreeness := CreateCollection(TXMLFreenessList, IXMLFreeness, 'Freeness') as IXMLFreenessList;
  FLightScattering := CreateCollection(TXMLLightScatteringList, IXMLLightScattering, 'LightScattering') as IXMLLightScatteringList;
  FMoisture := CreateCollection(TXMLMoistureList, IXMLMoisture, 'Moisture') as IXMLMoistureList;
  FOpacity := CreateCollection(TXMLOpacityList, IXMLOpacity, 'Opacity') as IXMLOpacityList;
  FPH := CreateCollection(TXMLPHList, IXMLPH, 'pH') as IXMLPHList;
  FPostConsumerWaste := CreateCollection(TXMLPostConsumerWasteList, IXMLPostConsumerWaste, 'PostConsumerWaste') as IXMLPostConsumerWasteList;
  FPreConsumerWaste := CreateCollection(TXMLPreConsumerWasteList, IXMLPreConsumerWaste, 'PreConsumerWaste') as IXMLPreConsumerWasteList;
  FRecycled := CreateCollection(TXMLRecycledList, IXMLRecycled, 'Recycled') as IXMLRecycledList;
  FTear := CreateCollection(TXMLTearList, IXMLTear, 'Tear') as IXMLTearList;
  FTearIndex := CreateCollection(TXMLTearIndexList, IXMLTearIndex, 'TearIndex') as IXMLTearIndexList;
  FTensile := CreateCollection(TXMLTensileList, IXMLTensile, 'Tensile') as IXMLTensileList;
  FTensileIndex := CreateCollection(TXMLTensileIndexList, IXMLTensileIndex, 'TensileIndex') as IXMLTensileIndexList;
  FViscosity := CreateCollection(TXMLViscosityList, IXMLViscosity, 'Viscosity') as IXMLViscosityList;
  FWhiteness := CreateCollection(TXMLWhitenessList, IXMLWhiteness, 'Whiteness') as IXMLWhitenessList;
  inherited;
end;

function TXMLPulpCharacteristics.Get_PulpingProcess: WideString;
begin
  Result := AttributeNodes['PulpingProcess'].Text;
end;

procedure TXMLPulpCharacteristics.Set_PulpingProcess(Value: WideString);
begin
  SetAttribute('PulpingProcess', Value);
end;

function TXMLPulpCharacteristics.Get_BleachingProcess: WideString;
begin
  Result := AttributeNodes['BleachingProcess'].Text;
end;

procedure TXMLPulpCharacteristics.Set_BleachingProcess(Value: WideString);
begin
  SetAttribute('BleachingProcess', Value);
end;

function TXMLPulpCharacteristics.Get_FibreSource: WideString;
begin
  Result := AttributeNodes['FibreSource'].Text;
end;

procedure TXMLPulpCharacteristics.Set_FibreSource(Value: WideString);
begin
  SetAttribute('FibreSource', Value);
end;

function TXMLPulpCharacteristics.Get_Ash: IXMLAshList;
begin
  Result := FAsh;
end;

function TXMLPulpCharacteristics.Get_BasisWeight: IXMLBasisWeightList;
begin
  Result := FBasisWeight;
end;

function TXMLPulpCharacteristics.Get_Brightness: IXMLBrightnessList;
begin
  Result := FBrightness;
end;

function TXMLPulpCharacteristics.Get_Burst: IXMLBurstList;
begin
  Result := FBurst;
end;

function TXMLPulpCharacteristics.Get_BurstIndex: IXMLBurstIndexList;
begin
  Result := FBurstIndex;
end;

function TXMLPulpCharacteristics.Get_ColourDetail: IXMLColourDetailList;
begin
  Result := FColourDetail;
end;

function TXMLPulpCharacteristics.Get_Density: IXMLDensityList;
begin
  Result := FDensity;
end;

function TXMLPulpCharacteristics.Get_Dirt: IXMLDirtList;
begin
  Result := FDirt;
end;

function TXMLPulpCharacteristics.Get_DrainageResistance: IXMLDrainageResistanceList;
begin
  Result := FDrainageResistance;
end;

function TXMLPulpCharacteristics.Get_FibreLength: IXMLFibreLengthList;
begin
  Result := FFibreLength;
end;

function TXMLPulpCharacteristics.Get_FibreClassification: IXMLFibreClassificationList;
begin
  Result := FFibreClassification;
end;

function TXMLPulpCharacteristics.Get_Freeness: IXMLFreenessList;
begin
  Result := FFreeness;
end;

function TXMLPulpCharacteristics.Get_LightScattering: IXMLLightScatteringList;
begin
  Result := FLightScattering;
end;

function TXMLPulpCharacteristics.Get_Moisture: IXMLMoistureList;
begin
  Result := FMoisture;
end;

function TXMLPulpCharacteristics.Get_Opacity: IXMLOpacityList;
begin
  Result := FOpacity;
end;

function TXMLPulpCharacteristics.Get_PH: IXMLPHList;
begin
  Result := FPH;
end;

function TXMLPulpCharacteristics.Get_PostConsumerWaste: IXMLPostConsumerWasteList;
begin
  Result := FPostConsumerWaste;
end;

function TXMLPulpCharacteristics.Get_PreConsumerWaste: IXMLPreConsumerWasteList;
begin
  Result := FPreConsumerWaste;
end;

function TXMLPulpCharacteristics.Get_Recycled: IXMLRecycledList;
begin
  Result := FRecycled;
end;

function TXMLPulpCharacteristics.Get_Tear: IXMLTearList;
begin
  Result := FTear;
end;

function TXMLPulpCharacteristics.Get_TearIndex: IXMLTearIndexList;
begin
  Result := FTearIndex;
end;

function TXMLPulpCharacteristics.Get_Tensile: IXMLTensileList;
begin
  Result := FTensile;
end;

function TXMLPulpCharacteristics.Get_TensileIndex: IXMLTensileIndexList;
begin
  Result := FTensileIndex;
end;

function TXMLPulpCharacteristics.Get_Viscosity: IXMLViscosityList;
begin
  Result := FViscosity;
end;

function TXMLPulpCharacteristics.Get_Whiteness: IXMLWhitenessList;
begin
  Result := FWhiteness;
end;

function TXMLPulpCharacteristics.Get_AdditionalTest: IXMLAdditionalTest;
begin
  Result := ChildNodes['AdditionalTest'] as IXMLAdditionalTest;
end;

{ TXMLDrainageResistance }

function TXMLDrainageResistance.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLDrainageResistance.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLDrainageResistance.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLDrainageResistance.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLDrainageResistance.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLDrainageResistance.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLDrainageResistance.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLDrainageResistance.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLDrainageResistanceList }

function TXMLDrainageResistanceList.Add: IXMLDrainageResistance;
begin
  Result := AddItem(-1) as IXMLDrainageResistance;
end;

function TXMLDrainageResistanceList.Insert(const Index: Integer): IXMLDrainageResistance;
begin
  Result := AddItem(Index) as IXMLDrainageResistance;
end;
function TXMLDrainageResistanceList.Get_Item(Index: Integer): IXMLDrainageResistance;
begin
  Result := List[Index] as IXMLDrainageResistance;
end;

{ TXMLViscosity }

function TXMLViscosity.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLViscosity.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLViscosity.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLViscosity.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLViscosity.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLViscosity.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLViscosity.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLViscosity.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLViscosityList }

function TXMLViscosityList.Add: IXMLViscosity;
begin
  Result := AddItem(-1) as IXMLViscosity;
end;

function TXMLViscosityList.Insert(const Index: Integer): IXMLViscosity;
begin
  Result := AddItem(Index) as IXMLViscosity;
end;
function TXMLViscosityList.Get_Item(Index: Integer): IXMLViscosity;
begin
  Result := List[Index] as IXMLViscosity;
end;

{ TXMLBale }

procedure TXMLBale.AfterConstruction;
begin
  RegisterChildNode('BaleConversionCharacteristics', TXMLBaleConversionCharacteristics);
  RegisterChildNode('BalePackagingCharacteristics', TXMLBalePackagingCharacteristics);
  inherited;
end;

function TXMLBale.Get_BaleType: WideString;
begin
  Result := AttributeNodes['BaleType'].Text;
end;

procedure TXMLBale.Set_BaleType(Value: WideString);
begin
  SetAttribute('BaleType', Value);
end;

function TXMLBale.Get_BaleConversionCharacteristics: IXMLBaleConversionCharacteristics;
begin
  Result := ChildNodes['BaleConversionCharacteristics'] as IXMLBaleConversionCharacteristics;
end;

function TXMLBale.Get_BalePackagingCharacteristics: IXMLBalePackagingCharacteristics;
begin
  Result := ChildNodes['BalePackagingCharacteristics'] as IXMLBalePackagingCharacteristics;
end;

{ TXMLBaleConversionCharacteristics }

procedure TXMLBaleConversionCharacteristics.AfterConstruction;
begin
  RegisterChildNode('ConversionCode', TXMLConversionCode);
  RegisterChildNode('BaleHeight', TXMLMeasurement);
  RegisterChildNode('BaleWidth', TXMLMeasurement);
  RegisterChildNode('BaleDepth', TXMLMeasurement);
  RegisterChildNode('BaleStandardWeight', TXMLMeasurement);
  inherited;
end;

function TXMLBaleConversionCharacteristics.Get_ConversionCode: IXMLConversionCode;
begin
  Result := ChildNodes['ConversionCode'] as IXMLConversionCode;
end;

function TXMLBaleConversionCharacteristics.Get_BaleHeight: IXMLMeasurement;
begin
  Result := ChildNodes['BaleHeight'] as IXMLMeasurement;
end;

function TXMLBaleConversionCharacteristics.Get_BaleWidth: IXMLMeasurement;
begin
  Result := ChildNodes['BaleWidth'] as IXMLMeasurement;
end;

function TXMLBaleConversionCharacteristics.Get_BaleDepth: IXMLMeasurement;
begin
  Result := ChildNodes['BaleDepth'] as IXMLMeasurement;
end;

function TXMLBaleConversionCharacteristics.Get_BaleStandardWeight: IXMLMeasurement;
begin
  Result := ChildNodes['BaleStandardWeight'] as IXMLMeasurement;
end;

{ TXMLBalePackagingCharacteristics }

procedure TXMLBalePackagingCharacteristics.AfterConstruction;
begin
  RegisterChildNode('PackagingCode', TXMLPackagingCode);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('PulpUnitCharacteristics', TXMLPulpUnitCharacteristics);
  FStencilCharacteristics := CreateCollection(TXMLStencilCharacteristicsList, IXMLStencilCharacteristics, 'StencilCharacteristics') as IXMLStencilCharacteristicsList;
  inherited;
end;

function TXMLBalePackagingCharacteristics.Get_PackagingCode: IXMLPackagingCode;
begin
  Result := ChildNodes['PackagingCode'] as IXMLPackagingCode;
end;

function TXMLBalePackagingCharacteristics.Get_CustomerMarks: WideString;
begin
  Result := ChildNodes['CustomerMarks'].Text;
end;

procedure TXMLBalePackagingCharacteristics.Set_CustomerMarks(Value: WideString);
begin
  ChildNodes['CustomerMarks'].NodeValue := Value;
end;

function TXMLBalePackagingCharacteristics.Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
begin
  Result := FStencilCharacteristics;
end;

function TXMLBalePackagingCharacteristics.Get_PulpUnitCharacteristics: IXMLPulpUnitCharacteristics;
begin
  Result := ChildNodes['PulpUnitCharacteristics'] as IXMLPulpUnitCharacteristics;
end;

{ TXMLPulpUnitCharacteristics }

procedure TXMLPulpUnitCharacteristics.AfterConstruction;
begin
  RegisterChildNode('PackagingDescription', TXMLPackagingDescription);
  RegisterChildNode('Wrap', TXMLWrap);
  RegisterChildNode('PalletCharacteristics', TXMLPalletCharacteristics);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('MaximumGrossWeight', TXMLMeasurement);
  FStencilCharacteristics := CreateCollection(TXMLStencilCharacteristicsList, IXMLStencilCharacteristics, 'StencilCharacteristics') as IXMLStencilCharacteristicsList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLPulpUnitCharacteristics.Get_PackagingDescription: IXMLPackagingDescription;
begin
  Result := ChildNodes['PackagingDescription'] as IXMLPackagingDescription;
end;

function TXMLPulpUnitCharacteristics.Get_Wrap: IXMLWrap;
begin
  Result := ChildNodes['Wrap'] as IXMLWrap;
end;

function TXMLPulpUnitCharacteristics.Get_PalletCharacteristics: IXMLPalletCharacteristics;
begin
  Result := ChildNodes['PalletCharacteristics'] as IXMLPalletCharacteristics;
end;

function TXMLPulpUnitCharacteristics.Get_BalesPerUnit: LongWord;
begin
  Result := ChildNodes['BalesPerUnit'].NodeValue;
end;

procedure TXMLPulpUnitCharacteristics.Set_BalesPerUnit(Value: LongWord);
begin
  ChildNodes['BalesPerUnit'].NodeValue := Value;
end;

function TXMLPulpUnitCharacteristics.Get_LayersPerUnit: LongWord;
begin
  Result := ChildNodes['LayersPerUnit'].NodeValue;
end;

procedure TXMLPulpUnitCharacteristics.Set_LayersPerUnit(Value: LongWord);
begin
  ChildNodes['LayersPerUnit'].NodeValue := Value;
end;

function TXMLPulpUnitCharacteristics.Get_LabelCharacteristics: IXMLLabelCharacteristics;
begin
  Result := ChildNodes['LabelCharacteristics'] as IXMLLabelCharacteristics;
end;

function TXMLPulpUnitCharacteristics.Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
begin
  Result := FStencilCharacteristics;
end;

function TXMLPulpUnitCharacteristics.Get_MaximumGrossWeight: IXMLMeasurement;
begin
  Result := ChildNodes['MaximumGrossWeight'] as IXMLMeasurement;
end;

function TXMLPulpUnitCharacteristics.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLSlurry }

procedure TXMLSlurry.AfterConstruction;
begin
  RegisterChildNode('TargetSolidsContent', TXMLMeasurement);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLSlurry.Get_TargetSolidsContent: IXMLMeasurement;
begin
  Result := ChildNodes['TargetSolidsContent'] as IXMLMeasurement;
end;

function TXMLSlurry.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLNonStandardPulp }

procedure TXMLNonStandardPulp.AfterConstruction;
begin
  RegisterChildNode('TargetMoisture', TXMLMeasurement);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLNonStandardPulp.Get_TargetMoisture: IXMLMeasurement;
begin
  Result := ChildNodes['TargetMoisture'] as IXMLMeasurement;
end;

function TXMLNonStandardPulp.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLRecoveredPaper }

function TXMLRecoveredPaper.Get_RecoveredPaperAttributes: WideString;
begin
  Result := ChildNodes['RecoveredPaperAttributes'].Text;
end;

procedure TXMLRecoveredPaper.Set_RecoveredPaperAttributes(Value: WideString);
begin
  ChildNodes['RecoveredPaperAttributes'].NodeValue := Value;
end;

{ TXMLVirginFibre }

procedure TXMLVirginFibre.AfterConstruction;
begin
  RegisterChildNode('TimberCharacteristics', TXMLTimberCharacteristics);
  RegisterChildNode('Log', TXMLLog);
  RegisterChildNode('Chip', TXMLChip);
  inherited;
end;

function TXMLVirginFibre.Get_TimberCharacteristics: IXMLTimberCharacteristics;
begin
  Result := ChildNodes['TimberCharacteristics'] as IXMLTimberCharacteristics;
end;

function TXMLVirginFibre.Get_Log: IXMLLog;
begin
  Result := ChildNodes['Log'] as IXMLLog;
end;

function TXMLVirginFibre.Get_Chip: IXMLChip;
begin
  Result := ChildNodes['Chip'] as IXMLChip;
end;

{ TXMLTimberCharacteristics }

procedure TXMLTimberCharacteristics.AfterConstruction;
begin
  RegisterChildNode('LumberSpecies', TXMLLumberSpeciesClass);
  RegisterChildNode('Age', TXMLMeasurement);
  FLumberSpecies := CreateCollection(TXMLLumberSpeciesClassList, IXMLLumberSpeciesClass, 'LumberSpecies') as IXMLLumberSpeciesClassList;
  inherited;
end;

function TXMLTimberCharacteristics.Get_LumberSpecies: IXMLLumberSpeciesClassList;
begin
  Result := FLumberSpecies;
end;

function TXMLTimberCharacteristics.Get_Age: IXMLMeasurement;
begin
  Result := ChildNodes['Age'] as IXMLMeasurement;
end;

function TXMLTimberCharacteristics.Get_Grade: WideString;
begin
  Result := ChildNodes['Grade'].Text;
end;

procedure TXMLTimberCharacteristics.Set_Grade(Value: WideString);
begin
  ChildNodes['Grade'].NodeValue := Value;
end;

{ TXMLLumberSpeciesClass }

function TXMLLumberSpeciesClass.Get_SpeciesType: WideString;
begin
  Result := AttributeNodes['SpeciesType'].Text;
end;

procedure TXMLLumberSpeciesClass.Set_SpeciesType(Value: WideString);
begin
  SetAttribute('SpeciesType', Value);
end;

function TXMLLumberSpeciesClass.Get_SpeciesOrigin: WideString;
begin
  Result := AttributeNodes['SpeciesOrigin'].Text;
end;

procedure TXMLLumberSpeciesClass.Set_SpeciesOrigin(Value: WideString);
begin
  SetAttribute('SpeciesOrigin', Value);
end;

function TXMLLumberSpeciesClass.Get_SpeciesAgency: WideString;
begin
  Result := AttributeNodes['SpeciesAgency'].Text;
end;

procedure TXMLLumberSpeciesClass.Set_SpeciesAgency(Value: WideString);
begin
  SetAttribute('SpeciesAgency', Value);
end;

function TXMLLumberSpeciesClass.Get_SpeciesCode: WideString;
begin
  Result := ChildNodes['SpeciesCode'].Text;
end;

procedure TXMLLumberSpeciesClass.Set_SpeciesCode(Value: WideString);
begin
  ChildNodes['SpeciesCode'].NodeValue := Value;
end;

function TXMLLumberSpeciesClass.Get_AdditionalText: WideString;
begin
  Result := ChildNodes['AdditionalText'].Text;
end;

procedure TXMLLumberSpeciesClass.Set_AdditionalText(Value: WideString);
begin
  ChildNodes['AdditionalText'].NodeValue := Value;
end;

{ TXMLLumberSpeciesClassList }

function TXMLLumberSpeciesClassList.Add: IXMLLumberSpeciesClass;
begin
  Result := AddItem(-1) as IXMLLumberSpeciesClass;
end;

function TXMLLumberSpeciesClassList.Insert(const Index: Integer): IXMLLumberSpeciesClass;
begin
  Result := AddItem(Index) as IXMLLumberSpeciesClass;
end;
function TXMLLumberSpeciesClassList.Get_Item(Index: Integer): IXMLLumberSpeciesClass;
begin
  Result := List[Index] as IXMLLumberSpeciesClass;
end;

{ TXMLLog }

procedure TXMLLog.AfterConstruction;
begin
  RegisterChildNode('LogCharacteristics', TXMLLogCharacteristics);
  RegisterChildNode('LogPackagingCharacteristics', TXMLLogPackagingCharacteristics);
  inherited;
end;

function TXMLLog.Get_LogCharacteristics: IXMLLogCharacteristics;
begin
  Result := ChildNodes['LogCharacteristics'] as IXMLLogCharacteristics;
end;

function TXMLLog.Get_LogPackagingCharacteristics: IXMLLogPackagingCharacteristics;
begin
  Result := ChildNodes['LogPackagingCharacteristics'] as IXMLLogPackagingCharacteristics;
end;

{ TXMLLogCharacteristics }

procedure TXMLLogCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Length', TXMLMeasurement);
  RegisterChildNode('SmallEndDiameter', TXMLMeasurement);
  RegisterChildNode('LargeEndDiameter', TXMLMeasurement);
  RegisterChildNode('DiameterBreastHeight', TXMLMeasurement);
  inherited;
end;

function TXMLLogCharacteristics.Get_LogLengthType: WideString;
begin
  Result := AttributeNodes['LogLengthType'].Text;
end;

procedure TXMLLogCharacteristics.Set_LogLengthType(Value: WideString);
begin
  SetAttribute('LogLengthType', Value);
end;

function TXMLLogCharacteristics.Get_Debarked: WideString;
begin
  Result := AttributeNodes['Debarked'].Text;
end;

procedure TXMLLogCharacteristics.Set_Debarked(Value: WideString);
begin
  SetAttribute('Debarked', Value);
end;

function TXMLLogCharacteristics.Get_LogConversionRule: WideString;
begin
  Result := AttributeNodes['LogConversionRule'].Text;
end;

procedure TXMLLogCharacteristics.Set_LogConversionRule(Value: WideString);
begin
  SetAttribute('LogConversionRule', Value);
end;

function TXMLLogCharacteristics.Get_Length: IXMLMeasurement;
begin
  Result := ChildNodes['Length'] as IXMLMeasurement;
end;

function TXMLLogCharacteristics.Get_SmallEndDiameter: IXMLMeasurement;
begin
  Result := ChildNodes['SmallEndDiameter'] as IXMLMeasurement;
end;

function TXMLLogCharacteristics.Get_LargeEndDiameter: IXMLMeasurement;
begin
  Result := ChildNodes['LargeEndDiameter'] as IXMLMeasurement;
end;

function TXMLLogCharacteristics.Get_DiameterBreastHeight: IXMLMeasurement;
begin
  Result := ChildNodes['DiameterBreastHeight'] as IXMLMeasurement;
end;

{ TXMLLogPackagingCharacteristics }

procedure TXMLLogPackagingCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Identifier', TXMLIdentifierS60);
  RegisterChildNode('ItemCount', TXMLMeasurement);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  FIdentifier := CreateCollection(TXMLIdentifierS60List, IXMLIdentifierS60, 'Identifier') as IXMLIdentifierS60List;
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  inherited;
end;

function TXMLLogPackagingCharacteristics.Get_DoubleBunked: WideString;
begin
  Result := AttributeNodes['DoubleBunked'].Text;
end;

procedure TXMLLogPackagingCharacteristics.Set_DoubleBunked(Value: WideString);
begin
  SetAttribute('DoubleBunked', Value);
end;

function TXMLLogPackagingCharacteristics.Get_Identifier: IXMLIdentifierS60List;
begin
  Result := FIdentifier;
end;

function TXMLLogPackagingCharacteristics.Get_ItemCount: IXMLMeasurement;
begin
  Result := ChildNodes['ItemCount'] as IXMLMeasurement;
end;

function TXMLLogPackagingCharacteristics.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLLogPackagingCharacteristics.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

{ TXMLIdentifierS60 }

function TXMLIdentifierS60.Get_IdentifierCodeType: WideString;
begin
  Result := AttributeNodes['IdentifierCodeType'].Text;
end;

procedure TXMLIdentifierS60.Set_IdentifierCodeType(Value: WideString);
begin
  SetAttribute('IdentifierCodeType', Value);
end;

function TXMLIdentifierS60.Get_IdentifierType: WideString;
begin
  Result := AttributeNodes['IdentifierType'].Text;
end;

procedure TXMLIdentifierS60.Set_IdentifierType(Value: WideString);
begin
  SetAttribute('IdentifierType', Value);
end;

function TXMLIdentifierS60.Get_IdentifierFormatType: WideString;
begin
  Result := AttributeNodes['IdentifierFormatType'].Text;
end;

procedure TXMLIdentifierS60.Set_IdentifierFormatType(Value: WideString);
begin
  SetAttribute('IdentifierFormatType', Value);
end;

{ TXMLIdentifierS60List }

function TXMLIdentifierS60List.Add: IXMLIdentifierS60;
begin
  Result := AddItem(-1) as IXMLIdentifierS60;
end;

function TXMLIdentifierS60List.Insert(const Index: Integer): IXMLIdentifierS60;
begin
  Result := AddItem(Index) as IXMLIdentifierS60;
end;
function TXMLIdentifierS60List.Get_Item(Index: Integer): IXMLIdentifierS60;
begin
  Result := List[Index] as IXMLIdentifierS60;
end;

{ TXMLChip }

procedure TXMLChip.AfterConstruction;
begin
  RegisterChildNode('ChipCharacteristics', TXMLChipCharacteristics);
  RegisterChildNode('ChipPackagingCharacteristics', TXMLChipPackagingCharacteristics);
  inherited;
end;

function TXMLChip.Get_ChipCharacteristics: IXMLChipCharacteristics;
begin
  Result := ChildNodes['ChipCharacteristics'] as IXMLChipCharacteristics;
end;

function TXMLChip.Get_ChipPackagingCharacteristics: IXMLChipPackagingCharacteristics;
begin
  Result := ChildNodes['ChipPackagingCharacteristics'] as IXMLChipPackagingCharacteristics;
end;

{ TXMLChipCharacteristics }

procedure TXMLChipCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Thickness', TXMLMeasurement);
  RegisterChildNode('Moisture', TXMLMoisture);
  RegisterChildNode('Dirt', TXMLDirt);
  RegisterChildNode('Bark', TXMLBark);
  RegisterChildNode('Sawdust', TXMLSawdust);
  inherited;
end;

function TXMLChipCharacteristics.Get_Screened: WideString;
begin
  Result := AttributeNodes['Screened'].Text;
end;

procedure TXMLChipCharacteristics.Set_Screened(Value: WideString);
begin
  SetAttribute('Screened', Value);
end;

function TXMLChipCharacteristics.Get_Debarked: WideString;
begin
  Result := AttributeNodes['Debarked'].Text;
end;

procedure TXMLChipCharacteristics.Set_Debarked(Value: WideString);
begin
  SetAttribute('Debarked', Value);
end;

function TXMLChipCharacteristics.Get_Thickness: IXMLMeasurement;
begin
  Result := ChildNodes['Thickness'] as IXMLMeasurement;
end;

function TXMLChipCharacteristics.Get_Moisture: IXMLMoisture;
begin
  Result := ChildNodes['Moisture'] as IXMLMoisture;
end;

function TXMLChipCharacteristics.Get_Dirt: IXMLDirt;
begin
  Result := ChildNodes['Dirt'] as IXMLDirt;
end;

function TXMLChipCharacteristics.Get_Bark: IXMLBark;
begin
  Result := ChildNodes['Bark'] as IXMLBark;
end;

function TXMLChipCharacteristics.Get_Sawdust: IXMLSawdust;
begin
  Result := ChildNodes['Sawdust'] as IXMLSawdust;
end;

{ TXMLBark }

function TXMLBark.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLBark.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLBark.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLBark.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLBark.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLBark.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLBark.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLBark.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLSawdust }

function TXMLSawdust.Get_TestMethod: WideString;
begin
  Result := AttributeNodes['TestMethod'].Text;
end;

procedure TXMLSawdust.Set_TestMethod(Value: WideString);
begin
  SetAttribute('TestMethod', Value);
end;

function TXMLSawdust.Get_TestAgency: WideString;
begin
  Result := AttributeNodes['TestAgency'].Text;
end;

procedure TXMLSawdust.Set_TestAgency(Value: WideString);
begin
  SetAttribute('TestAgency', Value);
end;

function TXMLSawdust.Get_SampleType: WideString;
begin
  Result := AttributeNodes['SampleType'].Text;
end;

procedure TXMLSawdust.Set_SampleType(Value: WideString);
begin
  SetAttribute('SampleType', Value);
end;

function TXMLSawdust.Get_ResultSource: WideString;
begin
  Result := AttributeNodes['ResultSource'].Text;
end;

procedure TXMLSawdust.Set_ResultSource(Value: WideString);
begin
  SetAttribute('ResultSource', Value);
end;

{ TXMLChipPackagingCharacteristics }

procedure TXMLChipPackagingCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Identifier', TXMLIdentifierS60);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  inherited;
end;

function TXMLChipPackagingCharacteristics.Get_Identifier: IXMLIdentifierS60;
begin
  Result := ChildNodes['Identifier'] as IXMLIdentifierS60;
end;

function TXMLChipPackagingCharacteristics.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLChipPackagingCharacteristics.Get_InformationalQuantity: IXMLInformationalQuantity;
begin
  Result := ChildNodes['InformationalQuantity'] as IXMLInformationalQuantity;
end;

{ TXMLWoodProducts }

procedure TXMLWoodProducts.AfterConstruction;
begin
  RegisterChildNode('WoodTimbersDimensionalLumberBoards', TXMLWoodTimbersDimensionalLumberBoards);
  RegisterChildNode('RoofingSidingDeckingFencing', TXMLRoofingSidingDeckingFencing);
  RegisterChildNode('CompositeAndVeneerWoodPanels', TXMLCompositeAndVeneerWoodPanels);
  RegisterChildNode('ConstructionPackagesAndPreFabPanels', TXMLConstructionPackagesAndPreFabPanels);
  RegisterChildNode('ProofInformationalQuantity', TXMLProofInformationalQuantity);
  RegisterChildNode('SuppliedComponentInformation', TXMLSuppliedComponentInformation);
  RegisterChildNode('SafetyAndEnvironmentalInformation', TXMLSafetyAndEnvironmentalInformationClass);
  FProofInformationalQuantity := CreateCollection(TXMLProofInformationalQuantityList, IXMLProofInformationalQuantity, 'ProofInformationalQuantity') as IXMLProofInformationalQuantityList;
  FSuppliedComponentInformation := CreateCollection(TXMLSuppliedComponentInformationList, IXMLSuppliedComponentInformation, 'SuppliedComponentInformation') as IXMLSuppliedComponentInformationList;
  FSafetyAndEnvironmentalInformation := CreateCollection(TXMLSafetyAndEnvironmentalInformationClassList, IXMLSafetyAndEnvironmentalInformationClass, 'SafetyAndEnvironmentalInformation') as IXMLSafetyAndEnvironmentalInformationClassList;
  inherited;
end;

function TXMLWoodProducts.Get_WoodTimbersDimensionalLumberBoards: IXMLWoodTimbersDimensionalLumberBoards;
begin
  Result := ChildNodes['WoodTimbersDimensionalLumberBoards'] as IXMLWoodTimbersDimensionalLumberBoards;
end;

function TXMLWoodProducts.Get_RoofingSidingDeckingFencing: IXMLRoofingSidingDeckingFencing;
begin
  Result := ChildNodes['RoofingSidingDeckingFencing'] as IXMLRoofingSidingDeckingFencing;
end;

function TXMLWoodProducts.Get_CompositeAndVeneerWoodPanels: IXMLCompositeAndVeneerWoodPanels;
begin
  Result := ChildNodes['CompositeAndVeneerWoodPanels'] as IXMLCompositeAndVeneerWoodPanels;
end;

function TXMLWoodProducts.Get_ConstructionPackagesAndPreFabPanels: IXMLConstructionPackagesAndPreFabPanels;
begin
  Result := ChildNodes['ConstructionPackagesAndPreFabPanels'] as IXMLConstructionPackagesAndPreFabPanels;
end;

function TXMLWoodProducts.Get_Millwork: WideString;
begin
  Result := ChildNodes['Millwork'].Text;
end;

procedure TXMLWoodProducts.Set_Millwork(Value: WideString);
begin
  ChildNodes['Millwork'].NodeValue := Value;
end;

function TXMLWoodProducts.Get_Gypsum: WideString;
begin
  Result := ChildNodes['Gypsum'].Text;
end;

procedure TXMLWoodProducts.Set_Gypsum(Value: WideString);
begin
  ChildNodes['Gypsum'].NodeValue := Value;
end;

function TXMLWoodProducts.Get_ProofInformationalQuantity: IXMLProofInformationalQuantityList;
begin
  Result := FProofInformationalQuantity;
end;

function TXMLWoodProducts.Get_SuppliedComponentInformation: IXMLSuppliedComponentInformationList;
begin
  Result := FSuppliedComponentInformation;
end;

function TXMLWoodProducts.Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
begin
  Result := FSafetyAndEnvironmentalInformation;
end;

{ TXMLWoodTimbersDimensionalLumberBoards }

procedure TXMLWoodTimbersDimensionalLumberBoards.AfterConstruction;
begin
  RegisterChildNode('SoftwoodLumber', TXMLSoftwoodLumber);
  RegisterChildNode('HardwoodLumber', TXMLHardwoodLumber);
  inherited;
end;

function TXMLWoodTimbersDimensionalLumberBoards.Get_SoftwoodLumber: IXMLSoftwoodLumber;
begin
  Result := ChildNodes['SoftwoodLumber'] as IXMLSoftwoodLumber;
end;

function TXMLWoodTimbersDimensionalLumberBoards.Get_HardwoodLumber: IXMLHardwoodLumber;
begin
  Result := ChildNodes['HardwoodLumber'] as IXMLHardwoodLumber;
end;

{ TXMLSoftwoodLumber }

procedure TXMLSoftwoodLumber.AfterConstruction;
begin
  RegisterChildNode('SoftwoodLumberCharacteristics', TXMLSoftwoodLumberCharacteristicsClass);
  RegisterChildNode('Packaging', TXMLPackaging);
  inherited;
end;

function TXMLSoftwoodLumber.Get_SoftwoodLumberCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
begin
  Result := ChildNodes['SoftwoodLumberCharacteristics'] as IXMLSoftwoodLumberCharacteristicsClass;
end;

function TXMLSoftwoodLumber.Get_Packaging: IXMLPackaging;
begin
  Result := ChildNodes['Packaging'] as IXMLPackaging;
end;

{ TXMLSoftwoodLumberCharacteristicsClass }

procedure TXMLSoftwoodLumberCharacteristicsClass.AfterConstruction;
begin
  RegisterChildNode('LumberSpecies', TXMLLumberSpeciesClass);
  RegisterChildNode('LumberGrade', TXMLLumberGradeClass);
  RegisterChildNode('Length', TXMLDimensionConstructionClass);
  RegisterChildNode('Width', TXMLDimensionConstructionClass);
  RegisterChildNode('Thickness', TXMLDimensionConstructionClass);
  RegisterChildNode('Seasoning', TXMLLumberSeasoningClass);
  RegisterChildNode('MoistureContent', TXMLLumberMoistureContentClass);
  RegisterChildNode('HeatTreatment', TXMLHeatTreatmentClass);
  RegisterChildNode('ManufacturingProcess', TXMLLumberManufacturingProcessClass);
  RegisterChildNode('PatternProfile', TXMLLumberPatternProfileClass);
  RegisterChildNode('Trim', TXMLLumberTrimClass);
  RegisterChildNode('Joining', TXMLLumberJoiningClass);
  RegisterChildNode('PressureTreatment', TXMLPressureTreatmentClass);
  RegisterChildNode('FireTreatment', TXMLFireTreatmentClass);
  RegisterChildNode('OtherTreatment', TXMLOtherTreatmentClass);
  RegisterChildNode('GradeStamp', TXMLConstructionGradeStampClass);
  RegisterChildNode('ExLog', TXMLExLogClass);
  RegisterChildNode('ClassIdentifier', TXMLIdentifierS60);
  RegisterChildNode('Weight', TXMLMeasurement);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('Wrap', TXMLWrap);
  RegisterChildNode('SafetyAndEnvironmentalInformation', TXMLSafetyAndEnvironmentalInformationClass);
  RegisterChildNode('LengthCutDescription', TXMLLengthCutDescription);
  FLumberSpecies := CreateCollection(TXMLLumberSpeciesClassList, IXMLLumberSpeciesClass, 'LumberSpecies') as IXMLLumberSpeciesClassList;
  FLength := CreateCollection(TXMLDimensionConstructionClassList, IXMLDimensionConstructionClass, 'Length') as IXMLDimensionConstructionClassList;
  FWidth := CreateCollection(TXMLDimensionConstructionClassList, IXMLDimensionConstructionClass, 'Width') as IXMLDimensionConstructionClassList;
  FThickness := CreateCollection(TXMLDimensionConstructionClassList, IXMLDimensionConstructionClass, 'Thickness') as IXMLDimensionConstructionClassList;
  FManufacturingProcess := CreateCollection(TXMLLumberManufacturingProcessClassList, IXMLLumberManufacturingProcessClass, 'ManufacturingProcess') as IXMLLumberManufacturingProcessClassList;
  FClassIdentifier := CreateCollection(TXMLIdentifierS60List, IXMLIdentifierS60, 'ClassIdentifier') as IXMLIdentifierS60List;
  FSafetyAndEnvironmentalInformation := CreateCollection(TXMLSafetyAndEnvironmentalInformationClassList, IXMLSafetyAndEnvironmentalInformationClass, 'SafetyAndEnvironmentalInformation') as IXMLSafetyAndEnvironmentalInformationClassList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_LumberSpecies: IXMLLumberSpeciesClassList;
begin
  Result := FLumberSpecies;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_LumberGrade: IXMLLumberGradeClass;
begin
  Result := ChildNodes['LumberGrade'] as IXMLLumberGradeClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_Length: IXMLDimensionConstructionClassList;
begin
  Result := FLength;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_Width: IXMLDimensionConstructionClassList;
begin
  Result := FWidth;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_Thickness: IXMLDimensionConstructionClassList;
begin
  Result := FThickness;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_Seasoning: IXMLLumberSeasoningClass;
begin
  Result := ChildNodes['Seasoning'] as IXMLLumberSeasoningClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_MoistureContent: IXMLLumberMoistureContentClass;
begin
  Result := ChildNodes['MoistureContent'] as IXMLLumberMoistureContentClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_HeatTreatment: IXMLHeatTreatmentClass;
begin
  Result := ChildNodes['HeatTreatment'] as IXMLHeatTreatmentClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_ManufacturingProcess: IXMLLumberManufacturingProcessClassList;
begin
  Result := FManufacturingProcess;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_PatternProfile: IXMLLumberPatternProfileClass;
begin
  Result := ChildNodes['PatternProfile'] as IXMLLumberPatternProfileClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_Trim: IXMLLumberTrimClass;
begin
  Result := ChildNodes['Trim'] as IXMLLumberTrimClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_Joining: IXMLLumberJoiningClass;
begin
  Result := ChildNodes['Joining'] as IXMLLumberJoiningClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_PressureTreatment: IXMLPressureTreatmentClass;
begin
  Result := ChildNodes['PressureTreatment'] as IXMLPressureTreatmentClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_FireTreatment: IXMLFireTreatmentClass;
begin
  Result := ChildNodes['FireTreatment'] as IXMLFireTreatmentClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_OtherTreatment: IXMLOtherTreatmentClass;
begin
  Result := ChildNodes['OtherTreatment'] as IXMLOtherTreatmentClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_GradeStamp: IXMLConstructionGradeStampClass;
begin
  Result := ChildNodes['GradeStamp'] as IXMLConstructionGradeStampClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_ExLog: IXMLExLogClass;
begin
  Result := ChildNodes['ExLog'] as IXMLExLogClass;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_ClassIdentifier: IXMLIdentifierS60List;
begin
  Result := FClassIdentifier;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_Weight: IXMLMeasurement;
begin
  Result := ChildNodes['Weight'] as IXMLMeasurement;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_LabelCharacteristics: IXMLLabelCharacteristics;
begin
  Result := ChildNodes['LabelCharacteristics'] as IXMLLabelCharacteristics;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_StencilCharacteristics: IXMLStencilCharacteristics;
begin
  Result := ChildNodes['StencilCharacteristics'] as IXMLStencilCharacteristics;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_Wrap: IXMLWrap;
begin
  Result := ChildNodes['Wrap'] as IXMLWrap;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
begin
  Result := FSafetyAndEnvironmentalInformation;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_LengthCutDescription: IXMLLengthCutDescription;
begin
  Result := ChildNodes['LengthCutDescription'] as IXMLLengthCutDescription;
end;

function TXMLSoftwoodLumberCharacteristicsClass.Get_ShippingMark: WideString;
begin
  Result := ChildNodes['ShippingMark'].Text;
end;

procedure TXMLSoftwoodLumberCharacteristicsClass.Set_ShippingMark(Value: WideString);
begin
  ChildNodes['ShippingMark'].NodeValue := Value;
end;

{ TXMLLumberGradeClass }

function TXMLLumberGradeClass.Get_GradeType: WideString;
begin
  Result := AttributeNodes['GradeType'].Text;
end;

procedure TXMLLumberGradeClass.Set_GradeType(Value: WideString);
begin
  SetAttribute('GradeType', Value);
end;

function TXMLLumberGradeClass.Get_GradingRule: WideString;
begin
  Result := AttributeNodes['GradingRule'].Text;
end;

procedure TXMLLumberGradeClass.Set_GradingRule(Value: WideString);
begin
  SetAttribute('GradingRule', Value);
end;

function TXMLLumberGradeClass.Get_GradeAgency: WideString;
begin
  Result := AttributeNodes['GradeAgency'].Text;
end;

procedure TXMLLumberGradeClass.Set_GradeAgency(Value: WideString);
begin
  SetAttribute('GradeAgency', Value);
end;

function TXMLLumberGradeClass.Get_ModulusElasticity: WideString;
begin
  Result := AttributeNodes['ModulusElasticity'].Text;
end;

procedure TXMLLumberGradeClass.Set_ModulusElasticity(Value: WideString);
begin
  SetAttribute('ModulusElasticity', Value);
end;

function TXMLLumberGradeClass.Get_Face: WideString;
begin
  Result := AttributeNodes['Face'].Text;
end;

procedure TXMLLumberGradeClass.Set_Face(Value: WideString);
begin
  SetAttribute('Face', Value);
end;

function TXMLLumberGradeClass.Get_GradeName: WideString;
begin
  Result := ChildNodes['GradeName'].Text;
end;

procedure TXMLLumberGradeClass.Set_GradeName(Value: WideString);
begin
  ChildNodes['GradeName'].NodeValue := Value;
end;

function TXMLLumberGradeClass.Get_GradeCode: WideString;
begin
  Result := ChildNodes['GradeCode'].Text;
end;

procedure TXMLLumberGradeClass.Set_GradeCode(Value: WideString);
begin
  ChildNodes['GradeCode'].NodeValue := Value;
end;

function TXMLLumberGradeClass.Get_AdditionalText: WideString;
begin
  Result := ChildNodes['AdditionalText'].Text;
end;

procedure TXMLLumberGradeClass.Set_AdditionalText(Value: WideString);
begin
  ChildNodes['AdditionalText'].NodeValue := Value;
end;

{ TXMLDimensionConstructionClass }

procedure TXMLDimensionConstructionClass.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  RegisterChildNode('RangeMin', TXMLRangeMin);
  RegisterChildNode('RangeMax', TXMLRangeMax);
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLDimensionConstructionClass.Get_ActualNominal: WideString;
begin
  Result := AttributeNodes['ActualNominal'].Text;
end;

procedure TXMLDimensionConstructionClass.Set_ActualNominal(Value: WideString);
begin
  SetAttribute('ActualNominal', Value);
end;

function TXMLDimensionConstructionClass.Get_WithGrain: WideString;
begin
  Result := AttributeNodes['WithGrain'].Text;
end;

procedure TXMLDimensionConstructionClass.Set_WithGrain(Value: WideString);
begin
  SetAttribute('WithGrain', Value);
end;

function TXMLDimensionConstructionClass.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

function TXMLDimensionConstructionClass.Get_RangeMin: IXMLRangeMin;
begin
  Result := ChildNodes['RangeMin'] as IXMLRangeMin;
end;

function TXMLDimensionConstructionClass.Get_RangeMax: IXMLRangeMax;
begin
  Result := ChildNodes['RangeMax'] as IXMLRangeMax;
end;

function TXMLDimensionConstructionClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLDimensionConstructionClassList }

function TXMLDimensionConstructionClassList.Add: IXMLDimensionConstructionClass;
begin
  Result := AddItem(-1) as IXMLDimensionConstructionClass;
end;

function TXMLDimensionConstructionClassList.Insert(const Index: Integer): IXMLDimensionConstructionClass;
begin
  Result := AddItem(Index) as IXMLDimensionConstructionClass;
end;
function TXMLDimensionConstructionClassList.Get_Item(Index: Integer): IXMLDimensionConstructionClass;
begin
  Result := List[Index] as IXMLDimensionConstructionClass;
end;

{ TXMLLumberSeasoningClass }

function TXMLLumberSeasoningClass.Get_SeasoningType: WideString;
begin
  Result := AttributeNodes['SeasoningType'].Text;
end;

procedure TXMLLumberSeasoningClass.Set_SeasoningType(Value: WideString);
begin
  SetAttribute('SeasoningType', Value);
end;

function TXMLLumberSeasoningClass.Get_AdditionalText: WideString;
begin
  Result := ChildNodes['AdditionalText'].Text;
end;

procedure TXMLLumberSeasoningClass.Set_AdditionalText(Value: WideString);
begin
  ChildNodes['AdditionalText'].NodeValue := Value;
end;

{ TXMLLumberMoistureContentClass }

function TXMLLumberMoistureContentClass.Get_MoistureContentPercentage: WideString;
begin
  Result := AttributeNodes['MoistureContentPercentage'].Text;
end;

procedure TXMLLumberMoistureContentClass.Set_MoistureContentPercentage(Value: WideString);
begin
  SetAttribute('MoistureContentPercentage', Value);
end;

function TXMLLumberMoistureContentClass.Get_AdditionalText: WideString;
begin
  Result := ChildNodes['AdditionalText'].Text;
end;

procedure TXMLLumberMoistureContentClass.Set_AdditionalText(Value: WideString);
begin
  ChildNodes['AdditionalText'].NodeValue := Value;
end;

{ TXMLHeatTreatmentClass }

procedure TXMLHeatTreatmentClass.AfterConstruction;
begin
  ItemTag := 'AdditionalText';
  ItemInterface := IXMLNode;
  inherited;
end;

function TXMLHeatTreatmentClass.Get_HeatTreatmentType: WideString;
begin
  Result := AttributeNodes['HeatTreatmentType'].Text;
end;

procedure TXMLHeatTreatmentClass.Set_HeatTreatmentType(Value: WideString);
begin
  SetAttribute('HeatTreatmentType', Value);
end;

function TXMLHeatTreatmentClass.Get_AdditionalText(Index: Integer): WideString;
begin
  Result := List[Index].Text;
end;

function TXMLHeatTreatmentClass.Add(const AdditionalText: WideString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := AdditionalText;
end;

function TXMLHeatTreatmentClass.Insert(const Index: Integer; const AdditionalText: WideString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := AdditionalText;
end;

{ TXMLLumberManufacturingProcessClass }

function TXMLLumberManufacturingProcessClass.Get_ManufacturingProcessType: WideString;
begin
  Result := AttributeNodes['ManufacturingProcessType'].Text;
end;

procedure TXMLLumberManufacturingProcessClass.Set_ManufacturingProcessType(Value: WideString);
begin
  SetAttribute('ManufacturingProcessType', Value);
end;

function TXMLLumberManufacturingProcessClass.Get_ManufacturingProcessAgency: WideString;
begin
  Result := AttributeNodes['ManufacturingProcessAgency'].Text;
end;

procedure TXMLLumberManufacturingProcessClass.Set_ManufacturingProcessAgency(Value: WideString);
begin
  SetAttribute('ManufacturingProcessAgency', Value);
end;

function TXMLLumberManufacturingProcessClass.Get_Value: Variant;
begin
  Result := ChildNodes['Value'].NodeValue;
end;

procedure TXMLLumberManufacturingProcessClass.Set_Value(Value: Variant);
begin
  ChildNodes['Value'].NodeValue := Value;
end;

function TXMLLumberManufacturingProcessClass.Get_AdditionalText: WideString;
begin
  Result := ChildNodes['AdditionalText'].Text;
end;

procedure TXMLLumberManufacturingProcessClass.Set_AdditionalText(Value: WideString);
begin
  ChildNodes['AdditionalText'].NodeValue := Value;
end;

{ TXMLLumberManufacturingProcessClassList }

function TXMLLumberManufacturingProcessClassList.Add: IXMLLumberManufacturingProcessClass;
begin
  Result := AddItem(-1) as IXMLLumberManufacturingProcessClass;
end;

function TXMLLumberManufacturingProcessClassList.Insert(const Index: Integer): IXMLLumberManufacturingProcessClass;
begin
  Result := AddItem(Index) as IXMLLumberManufacturingProcessClass;
end;
function TXMLLumberManufacturingProcessClassList.Get_Item(Index: Integer): IXMLLumberManufacturingProcessClass;
begin
  Result := List[Index] as IXMLLumberManufacturingProcessClass;
end;

{ TXMLLumberPatternProfileClass }

function TXMLLumberPatternProfileClass.Get_PatternProfileType: WideString;
begin
  Result := AttributeNodes['PatternProfileType'].Text;
end;

procedure TXMLLumberPatternProfileClass.Set_PatternProfileType(Value: WideString);
begin
  SetAttribute('PatternProfileType', Value);
end;

function TXMLLumberPatternProfileClass.Get_PatternProfileAgency: WideString;
begin
  Result := AttributeNodes['PatternProfileAgency'].Text;
end;

procedure TXMLLumberPatternProfileClass.Set_PatternProfileAgency(Value: WideString);
begin
  SetAttribute('PatternProfileAgency', Value);
end;

function TXMLLumberPatternProfileClass.Get_PatternProfileCode: WideString;
begin
  Result := ChildNodes['PatternProfileCode'].Text;
end;

procedure TXMLLumberPatternProfileClass.Set_PatternProfileCode(Value: WideString);
begin
  ChildNodes['PatternProfileCode'].NodeValue := Value;
end;

function TXMLLumberPatternProfileClass.Get_AdditionalText: WideString;
begin
  Result := ChildNodes['AdditionalText'].Text;
end;

procedure TXMLLumberPatternProfileClass.Set_AdditionalText(Value: WideString);
begin
  ChildNodes['AdditionalText'].NodeValue := Value;
end;

{ TXMLLumberTrimClass }

function TXMLLumberTrimClass.Get_TrimType: WideString;
begin
  Result := AttributeNodes['TrimType'].Text;
end;

procedure TXMLLumberTrimClass.Set_TrimType(Value: WideString);
begin
  SetAttribute('TrimType', Value);
end;

function TXMLLumberTrimClass.Get_AdditionalText: WideString;
begin
  Result := ChildNodes['AdditionalText'].Text;
end;

procedure TXMLLumberTrimClass.Set_AdditionalText(Value: WideString);
begin
  ChildNodes['AdditionalText'].NodeValue := Value;
end;

{ TXMLLumberJoiningClass }

function TXMLLumberJoiningClass.Get_JoiningType: WideString;
begin
  Result := AttributeNodes['JoiningType'].Text;
end;

procedure TXMLLumberJoiningClass.Set_JoiningType(Value: WideString);
begin
  SetAttribute('JoiningType', Value);
end;

function TXMLLumberJoiningClass.Get_AdditionalText: WideString;
begin
  Result := ChildNodes['AdditionalText'].Text;
end;

procedure TXMLLumberJoiningClass.Set_AdditionalText(Value: WideString);
begin
  ChildNodes['AdditionalText'].NodeValue := Value;
end;

{ TXMLPressureTreatmentClass }

procedure TXMLPressureTreatmentClass.AfterConstruction;
begin
  RegisterChildNode('PressureTreatmentCompound', TXMLPressureTreatmentCompoundClass);
  RegisterChildNode('PressureTreatmentConcentration', TXMLPressureTreatmentConcentration);
  inherited;
end;

function TXMLPressureTreatmentClass.Get_PressureTreatmentCompound: IXMLPressureTreatmentCompoundClass;
begin
  Result := ChildNodes['PressureTreatmentCompound'] as IXMLPressureTreatmentCompoundClass;
end;

function TXMLPressureTreatmentClass.Get_PressureTreatmentConcentration: IXMLPressureTreatmentConcentration;
begin
  Result := ChildNodes['PressureTreatmentConcentration'] as IXMLPressureTreatmentConcentration;
end;

function TXMLPressureTreatmentClass.Get_PressureTreatmentComStdorUseCategory: WideString;
begin
  Result := ChildNodes['PressureTreatmentComStdorUseCategory'].Text;
end;

procedure TXMLPressureTreatmentClass.Set_PressureTreatmentComStdorUseCategory(Value: WideString);
begin
  ChildNodes['PressureTreatmentComStdorUseCategory'].NodeValue := Value;
end;

{ TXMLPressureTreatmentCompoundClass }

procedure TXMLPressureTreatmentCompoundClass.AfterConstruction;
begin
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLPressureTreatmentCompoundClass.Get_CompoundType: WideString;
begin
  Result := AttributeNodes['CompoundType'].Text;
end;

procedure TXMLPressureTreatmentCompoundClass.Set_CompoundType(Value: WideString);
begin
  SetAttribute('CompoundType', Value);
end;

function TXMLPressureTreatmentCompoundClass.Get_CompoundAgency: WideString;
begin
  Result := AttributeNodes['CompoundAgency'].Text;
end;

procedure TXMLPressureTreatmentCompoundClass.Set_CompoundAgency(Value: WideString);
begin
  SetAttribute('CompoundAgency', Value);
end;

function TXMLPressureTreatmentCompoundClass.Get_Value: Variant;
begin
  Result := ChildNodes['Value'].NodeValue;
end;

procedure TXMLPressureTreatmentCompoundClass.Set_Value(Value: Variant);
begin
  ChildNodes['Value'].NodeValue := Value;
end;

function TXMLPressureTreatmentCompoundClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLPressureTreatmentConcentration }

function TXMLPressureTreatmentConcentration.Get_UOM: WideString;
begin
  Result := AttributeNodes['UOM'].Text;
end;

procedure TXMLPressureTreatmentConcentration.Set_UOM(Value: WideString);
begin
  SetAttribute('UOM', Value);
end;

{ TXMLFireTreatmentClass }

procedure TXMLFireTreatmentClass.AfterConstruction;
begin
  ItemTag := 'AdditionalText';
  ItemInterface := IXMLNode;
  inherited;
end;

function TXMLFireTreatmentClass.Get_FireTreatmentType: WideString;
begin
  Result := AttributeNodes['FireTreatmentType'].Text;
end;

procedure TXMLFireTreatmentClass.Set_FireTreatmentType(Value: WideString);
begin
  SetAttribute('FireTreatmentType', Value);
end;

function TXMLFireTreatmentClass.Get_AdditionalText(Index: Integer): WideString;
begin
  Result := List[Index].Text;
end;

function TXMLFireTreatmentClass.Add(const AdditionalText: WideString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := AdditionalText;
end;

function TXMLFireTreatmentClass.Insert(const Index: Integer; const AdditionalText: WideString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := AdditionalText;
end;

{ TXMLOtherTreatmentClass }

procedure TXMLOtherTreatmentClass.AfterConstruction;
begin
  ItemTag := 'AdditionalText';
  ItemInterface := IXMLNode;
  inherited;
end;

function TXMLOtherTreatmentClass.Get_AdditionalText(Index: Integer): WideString;
begin
  Result := List[Index].Text;
end;

function TXMLOtherTreatmentClass.Add(const AdditionalText: WideString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := AdditionalText;
end;

function TXMLOtherTreatmentClass.Insert(const Index: Integer; const AdditionalText: WideString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := AdditionalText;
end;

{ TXMLConstructionGradeStampClass }

function TXMLConstructionGradeStampClass.Get_GradeStamped: WideString;
begin
  Result := AttributeNodes['GradeStamped'].Text;
end;

procedure TXMLConstructionGradeStampClass.Set_GradeStamped(Value: WideString);
begin
  SetAttribute('GradeStamped', Value);
end;

function TXMLConstructionGradeStampClass.Get_GradeStampMillNumber: WideString;
begin
  Result := ChildNodes['GradeStampMillNumber'].Text;
end;

procedure TXMLConstructionGradeStampClass.Set_GradeStampMillNumber(Value: WideString);
begin
  ChildNodes['GradeStampMillNumber'].NodeValue := Value;
end;

function TXMLConstructionGradeStampClass.Get_GradeStampLocation: WideString;
begin
  Result := ChildNodes['GradeStampLocation'].Text;
end;

procedure TXMLConstructionGradeStampClass.Set_GradeStampLocation(Value: WideString);
begin
  ChildNodes['GradeStampLocation'].NodeValue := Value;
end;

{ TXMLExLogClass }

procedure TXMLExLogClass.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  inherited;
end;

function TXMLExLogClass.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

{ TXMLLengthCutDescription }

function TXMLLengthCutDescription.Get_LengthCutType: WideString;
begin
  Result := AttributeNodes['LengthCutType'].Text;
end;

procedure TXMLLengthCutDescription.Set_LengthCutType(Value: WideString);
begin
  SetAttribute('LengthCutType', Value);
end;

{ TXMLPackaging }

procedure TXMLPackaging.AfterConstruction;
begin
  RegisterChildNode('ProductPackaging', TXMLProductPackagingClass);
  inherited;
end;

function TXMLPackaging.Get_ProductPackaging: IXMLProductPackagingClass;
begin
  Result := ChildNodes['ProductPackaging'] as IXMLProductPackagingClass;
end;

{ TXMLProductPackagingClass }

procedure TXMLProductPackagingClass.AfterConstruction;
begin
  RegisterChildNode('QuantityInUnit', TXMLMeasurement);
  RegisterChildNode('UnitDimension', TXMLUnitDimensionType);
  RegisterChildNode('Weight', TXMLMeasurement);
  RegisterChildNode('PackageIDInformation', TXMLLumberPackageCodeClass);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('BandCharacteristics', TXMLBandCharacteristics);
  RegisterChildNode('PalletCharacteristics', TXMLPalletCharacteristics);
  RegisterChildNode('Wrap', TXMLWrap);
  FLabelCharacteristics := CreateCollection(TXMLLabelCharacteristicsList, IXMLLabelCharacteristics, 'LabelCharacteristics') as IXMLLabelCharacteristicsList;
  FStencilCharacteristics := CreateCollection(TXMLStencilCharacteristicsList, IXMLStencilCharacteristics, 'StencilCharacteristics') as IXMLStencilCharacteristicsList;
  FBandCharacteristics := CreateCollection(TXMLBandCharacteristicsList, IXMLBandCharacteristics, 'BandCharacteristics') as IXMLBandCharacteristicsList;
  FPalletCharacteristics := CreateCollection(TXMLPalletCharacteristicsList, IXMLPalletCharacteristics, 'PalletCharacteristics') as IXMLPalletCharacteristicsList;
  FWrap := CreateCollection(TXMLWrapList, IXMLWrap, 'Wrap') as IXMLWrapList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLProductPackagingClass.Get_QuantityInUnit: IXMLMeasurement;
begin
  Result := ChildNodes['QuantityInUnit'] as IXMLMeasurement;
end;

function TXMLProductPackagingClass.Get_UnitDimension: IXMLUnitDimensionType;
begin
  Result := ChildNodes['UnitDimension'] as IXMLUnitDimensionType;
end;

function TXMLProductPackagingClass.Get_Weight: IXMLMeasurement;
begin
  Result := ChildNodes['Weight'] as IXMLMeasurement;
end;

function TXMLProductPackagingClass.Get_PackageIDInformation: IXMLLumberPackageCodeClass;
begin
  Result := ChildNodes['PackageIDInformation'] as IXMLLumberPackageCodeClass;
end;

function TXMLProductPackagingClass.Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
begin
  Result := FLabelCharacteristics;
end;

function TXMLProductPackagingClass.Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
begin
  Result := FStencilCharacteristics;
end;

function TXMLProductPackagingClass.Get_BandCharacteristics: IXMLBandCharacteristicsList;
begin
  Result := FBandCharacteristics;
end;

function TXMLProductPackagingClass.Get_PalletCharacteristics: IXMLPalletCharacteristicsList;
begin
  Result := FPalletCharacteristics;
end;

function TXMLProductPackagingClass.Get_Wrap: IXMLWrapList;
begin
  Result := FWrap;
end;

function TXMLProductPackagingClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

function TXMLProductPackagingClass.Get_PackageType: WideString;
begin
  Result := ChildNodes['PackageType'].Text;
end;

procedure TXMLProductPackagingClass.Set_PackageType(Value: WideString);
begin
  ChildNodes['PackageType'].NodeValue := Value;
end;

{ TXMLUnitDimensionType }

procedure TXMLUnitDimensionType.AfterConstruction;
begin
  RegisterChildNode('Length', TXMLDimensionMeasurementClass);
  RegisterChildNode('Width', TXMLDimensionMeasurementClass);
  RegisterChildNode('Height', TXMLDimensionMeasurementClass);
  inherited;
end;

function TXMLUnitDimensionType.Get_Length: IXMLDimensionMeasurementClass;
begin
  Result := ChildNodes['Length'] as IXMLDimensionMeasurementClass;
end;

function TXMLUnitDimensionType.Get_Width: IXMLDimensionMeasurementClass;
begin
  Result := ChildNodes['Width'] as IXMLDimensionMeasurementClass;
end;

function TXMLUnitDimensionType.Get_Height: IXMLDimensionMeasurementClass;
begin
  Result := ChildNodes['Height'] as IXMLDimensionMeasurementClass;
end;

function TXMLUnitDimensionType.Get_PiecesPerRow: LongWord;
begin
  Result := ChildNodes['PiecesPerRow'].NodeValue;
end;

procedure TXMLUnitDimensionType.Set_PiecesPerRow(Value: LongWord);
begin
  ChildNodes['PiecesPerRow'].NodeValue := Value;
end;

function TXMLUnitDimensionType.Get_RowsPerUnit: LongWord;
begin
  Result := ChildNodes['RowsPerUnit'].NodeValue;
end;

procedure TXMLUnitDimensionType.Set_RowsPerUnit(Value: LongWord);
begin
  ChildNodes['RowsPerUnit'].NodeValue := Value;
end;

{ TXMLDimensionMeasurementClass }

procedure TXMLDimensionMeasurementClass.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  RegisterChildNode('RangeMin', TXMLRangeMin);
  RegisterChildNode('RangeMax', TXMLRangeMax);
  inherited;
end;

function TXMLDimensionMeasurementClass.Get_ActualNominal: WideString;
begin
  Result := AttributeNodes['ActualNominal'].Text;
end;

procedure TXMLDimensionMeasurementClass.Set_ActualNominal(Value: WideString);
begin
  SetAttribute('ActualNominal', Value);
end;

function TXMLDimensionMeasurementClass.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

function TXMLDimensionMeasurementClass.Get_RangeMin: IXMLRangeMin;
begin
  Result := ChildNodes['RangeMin'] as IXMLRangeMin;
end;

function TXMLDimensionMeasurementClass.Get_RangeMax: IXMLRangeMax;
begin
  Result := ChildNodes['RangeMax'] as IXMLRangeMax;
end;

{ TXMLLumberPackageCodeClass }

function TXMLLumberPackageCodeClass.Get_PackageAgency: WideString;
begin
  Result := AttributeNodes['PackageAgency'].Text;
end;

procedure TXMLLumberPackageCodeClass.Set_PackageAgency(Value: WideString);
begin
  SetAttribute('PackageAgency', Value);
end;

function TXMLLumberPackageCodeClass.Get_PackageCode: WideString;
begin
  Result := ChildNodes['PackageCode'].Text;
end;

procedure TXMLLumberPackageCodeClass.Set_PackageCode(Value: WideString);
begin
  ChildNodes['PackageCode'].NodeValue := Value;
end;

function TXMLLumberPackageCodeClass.Get_PackageName: WideString;
begin
  Result := ChildNodes['PackageName'].Text;
end;

procedure TXMLLumberPackageCodeClass.Set_PackageName(Value: WideString);
begin
  ChildNodes['PackageName'].NodeValue := Value;
end;

{ TXMLHardwoodLumber }

procedure TXMLHardwoodLumber.AfterConstruction;
begin
  RegisterChildNode('Packaging', TXMLPackaging);
  inherited;
end;

function TXMLHardwoodLumber.Get_HardwoodLumberCharacteristics: WideString;
begin
  Result := ChildNodes['HardwoodLumberCharacteristics'].Text;
end;

procedure TXMLHardwoodLumber.Set_HardwoodLumberCharacteristics(Value: WideString);
begin
  ChildNodes['HardwoodLumberCharacteristics'].NodeValue := Value;
end;

function TXMLHardwoodLumber.Get_Packaging: IXMLPackaging;
begin
  Result := ChildNodes['Packaging'] as IXMLPackaging;
end;

{ TXMLRoofingSidingDeckingFencing }

procedure TXMLRoofingSidingDeckingFencing.AfterConstruction;
begin
  RegisterChildNode('NaturalWoodSiding', TXMLNaturalWoodSiding);
  RegisterChildNode('NaturalWoodSiding-Other', TXMLNaturalWoodSidingOther);
  RegisterChildNode('DeckAndPorchFlooringMaterials-NaturalWood', TXMLDeckAndPorchFlooringMaterialsNaturalWood);
  inherited;
end;

function TXMLRoofingSidingDeckingFencing.Get_NaturalWoodSiding: IXMLNaturalWoodSiding;
begin
  Result := ChildNodes['NaturalWoodSiding'] as IXMLNaturalWoodSiding;
end;

function TXMLRoofingSidingDeckingFencing.Get_NaturalWoodSidingOther: IXMLNaturalWoodSidingOther;
begin
  Result := ChildNodes['NaturalWoodSiding-Other'] as IXMLNaturalWoodSidingOther;
end;

function TXMLRoofingSidingDeckingFencing.Get_DeckAndPorchFlooringMaterialsNaturalWood: IXMLDeckAndPorchFlooringMaterialsNaturalWood;
begin
  Result := ChildNodes['DeckAndPorchFlooringMaterials-NaturalWood'] as IXMLDeckAndPorchFlooringMaterialsNaturalWood;
end;

{ TXMLNaturalWoodSiding }

procedure TXMLNaturalWoodSiding.AfterConstruction;
begin
  RegisterChildNode('NaturalWoodSidingCharacteristics', TXMLSoftwoodLumberCharacteristicsClass);
  RegisterChildNode('Packaging', TXMLPackaging);
  inherited;
end;

function TXMLNaturalWoodSiding.Get_NaturalWoodSidingCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
begin
  Result := ChildNodes['NaturalWoodSidingCharacteristics'] as IXMLSoftwoodLumberCharacteristicsClass;
end;

function TXMLNaturalWoodSiding.Get_Packaging: IXMLPackaging;
begin
  Result := ChildNodes['Packaging'] as IXMLPackaging;
end;

{ TXMLNaturalWoodSidingOther }

procedure TXMLNaturalWoodSidingOther.AfterConstruction;
begin
  RegisterChildNode('NaturalWoodSiding-OtherCharacteristics', TXMLSoftwoodLumberCharacteristicsClass);
  RegisterChildNode('Packaging', TXMLPackaging);
  inherited;
end;

function TXMLNaturalWoodSidingOther.Get_NaturalWoodSidingOtherCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
begin
  Result := ChildNodes['NaturalWoodSiding-OtherCharacteristics'] as IXMLSoftwoodLumberCharacteristicsClass;
end;

function TXMLNaturalWoodSidingOther.Get_Packaging: IXMLPackaging;
begin
  Result := ChildNodes['Packaging'] as IXMLPackaging;
end;

{ TXMLDeckAndPorchFlooringMaterialsNaturalWood }

procedure TXMLDeckAndPorchFlooringMaterialsNaturalWood.AfterConstruction;
begin
  RegisterChildNode('DeckAndPorchFlooringMaterials-NaturalWoodCharacteristics', TXMLSoftwoodLumberCharacteristicsClass);
  RegisterChildNode('Packaging', TXMLPackaging);
  inherited;
end;

function TXMLDeckAndPorchFlooringMaterialsNaturalWood.Get_DeckAndPorchFlooringMaterialsNaturalWoodCharacteristics: IXMLSoftwoodLumberCharacteristicsClass;
begin
  Result := ChildNodes['DeckAndPorchFlooringMaterials-NaturalWoodCharacteristics'] as IXMLSoftwoodLumberCharacteristicsClass;
end;

function TXMLDeckAndPorchFlooringMaterialsNaturalWood.Get_Packaging: IXMLPackaging;
begin
  Result := ChildNodes['Packaging'] as IXMLPackaging;
end;

{ TXMLCompositeAndVeneerWoodPanels }

procedure TXMLCompositeAndVeneerWoodPanels.AfterConstruction;
begin
  RegisterChildNode('SoftwoodPlywood', TXMLNAPlywoodOSBCharacteristicsClass);
  RegisterChildNode('Packaging', TXMLPackaging);
  inherited;
end;

function TXMLCompositeAndVeneerWoodPanels.Get_SoftwoodPlywood: IXMLNAPlywoodOSBCharacteristicsClass;
begin
  Result := ChildNodes['SoftwoodPlywood'] as IXMLNAPlywoodOSBCharacteristicsClass;
end;

function TXMLCompositeAndVeneerWoodPanels.Get_Packaging: IXMLPackaging;
begin
  Result := ChildNodes['Packaging'] as IXMLPackaging;
end;

{ TXMLNAPlywoodOSBCharacteristicsClass }

procedure TXMLNAPlywoodOSBCharacteristicsClass.AfterConstruction;
begin
  RegisterChildNode('PlywoodOSBGrade', TXMLPlywoodOSBGradeClass);
  RegisterChildNode('Thickness', TXMLDimensionConstructionClass);
  RegisterChildNode('Width', TXMLDimensionConstructionClass);
  RegisterChildNode('Length', TXMLDimensionConstructionClass);
  RegisterChildNode('Surface', TXMLPlywoodOSBSurfaceClass);
  RegisterChildNode('Overlay', TXMLPlywoodOSBOverlayClass);
  RegisterChildNode('Edge', TXMLPlywoodOSBEdgeClass);
  RegisterChildNode('PressureTreatment', TXMLPressureTreatmentClass);
  RegisterChildNode('FireTreatment', TXMLFireTreatmentClass);
  RegisterChildNode('Supplemental', TXMLPlywoodOSBSupplementalClass);
  RegisterChildNode('GradeStamp', TXMLConstructionGradeStampClass);
  RegisterChildNode('ClassIdentifier', TXMLIdentifierS60);
  RegisterChildNode('LabelCharacteristics', TXMLLabelCharacteristics);
  RegisterChildNode('StencilCharacteristics', TXMLStencilCharacteristics);
  RegisterChildNode('SafetyAndEnvironmentalInformation', TXMLSafetyAndEnvironmentalInformationClass);
  FThickness := CreateCollection(TXMLDimensionConstructionClassList, IXMLDimensionConstructionClass, 'Thickness') as IXMLDimensionConstructionClassList;
  FWidth := CreateCollection(TXMLDimensionConstructionClassList, IXMLDimensionConstructionClass, 'Width') as IXMLDimensionConstructionClassList;
  FLength := CreateCollection(TXMLDimensionConstructionClassList, IXMLDimensionConstructionClass, 'Length') as IXMLDimensionConstructionClassList;
  FPlywoodOSBSpecies := CreateCollection(TXMLPlywoodOSBSpeciesTypeList, IXMLNode, 'PlywoodOSBSpecies') as IXMLPlywoodOSBSpeciesTypeList;
  FOverlay := CreateCollection(TXMLPlywoodOSBOverlayClassList, IXMLPlywoodOSBOverlayClass, 'Overlay') as IXMLPlywoodOSBOverlayClassList;
  FSupplemental := CreateCollection(TXMLPlywoodOSBSupplementalClassList, IXMLPlywoodOSBSupplementalClass, 'Supplemental') as IXMLPlywoodOSBSupplementalClassList;
  FLabelCharacteristics := CreateCollection(TXMLLabelCharacteristicsList, IXMLLabelCharacteristics, 'LabelCharacteristics') as IXMLLabelCharacteristicsList;
  FStencilCharacteristics := CreateCollection(TXMLStencilCharacteristicsList, IXMLStencilCharacteristics, 'StencilCharacteristics') as IXMLStencilCharacteristicsList;
  FSafetyAndEnvironmentalInformation := CreateCollection(TXMLSafetyAndEnvironmentalInformationClassList, IXMLSafetyAndEnvironmentalInformationClass, 'SafetyAndEnvironmentalInformation') as IXMLSafetyAndEnvironmentalInformationClassList;
  inherited;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_PlywoodOSBGrade: IXMLPlywoodOSBGradeClass;
begin
  Result := ChildNodes['PlywoodOSBGrade'] as IXMLPlywoodOSBGradeClass;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_Thickness: IXMLDimensionConstructionClassList;
begin
  Result := FThickness;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_Width: IXMLDimensionConstructionClassList;
begin
  Result := FWidth;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_Length: IXMLDimensionConstructionClassList;
begin
  Result := FLength;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_PlywoodOSBSpecies: IXMLPlywoodOSBSpeciesTypeList;
begin
  Result := FPlywoodOSBSpecies;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_PlyNumber: LongWord;
begin
  Result := ChildNodes['PlyNumber'].NodeValue;
end;

procedure TXMLNAPlywoodOSBCharacteristicsClass.Set_PlyNumber(Value: LongWord);
begin
  ChildNodes['PlyNumber'].NodeValue := Value;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_Surface: IXMLPlywoodOSBSurfaceClass;
begin
  Result := ChildNodes['Surface'] as IXMLPlywoodOSBSurfaceClass;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_Overlay: IXMLPlywoodOSBOverlayClassList;
begin
  Result := FOverlay;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_GlueExposure: WideString;
begin
  Result := ChildNodes['GlueExposure'].Text;
end;

procedure TXMLNAPlywoodOSBCharacteristicsClass.Set_GlueExposure(Value: WideString);
begin
  ChildNodes['GlueExposure'].NodeValue := Value;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_Edge: IXMLPlywoodOSBEdgeClass;
begin
  Result := ChildNodes['Edge'] as IXMLPlywoodOSBEdgeClass;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_PressureTreatment: IXMLPressureTreatmentClass;
begin
  Result := ChildNodes['PressureTreatment'] as IXMLPressureTreatmentClass;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_FireTreatment: IXMLFireTreatmentClass;
begin
  Result := ChildNodes['FireTreatment'] as IXMLFireTreatmentClass;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_Supplemental: IXMLPlywoodOSBSupplementalClassList;
begin
  Result := FSupplemental;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_Brand: WideString;
begin
  Result := ChildNodes['Brand'].Text;
end;

procedure TXMLNAPlywoodOSBCharacteristicsClass.Set_Brand(Value: WideString);
begin
  ChildNodes['Brand'].NodeValue := Value;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_GradeAgency: WideString;
begin
  Result := ChildNodes['GradeAgency'].Text;
end;

procedure TXMLNAPlywoodOSBCharacteristicsClass.Set_GradeAgency(Value: WideString);
begin
  ChildNodes['GradeAgency'].NodeValue := Value;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_GradeStamp: IXMLConstructionGradeStampClass;
begin
  Result := ChildNodes['GradeStamp'] as IXMLConstructionGradeStampClass;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_ClassIdentifier: IXMLIdentifierS60;
begin
  Result := ChildNodes['ClassIdentifier'] as IXMLIdentifierS60;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_LabelCharacteristics: IXMLLabelCharacteristicsList;
begin
  Result := FLabelCharacteristics;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_StencilCharacteristics: IXMLStencilCharacteristicsList;
begin
  Result := FStencilCharacteristics;
end;

function TXMLNAPlywoodOSBCharacteristicsClass.Get_SafetyAndEnvironmentalInformation: IXMLSafetyAndEnvironmentalInformationClassList;
begin
  Result := FSafetyAndEnvironmentalInformation;
end;

{ TXMLPlywoodOSBGradeClass }

function TXMLPlywoodOSBGradeClass.Get_Face: WideString;
begin
  Result := AttributeNodes['Face'].Text;
end;

procedure TXMLPlywoodOSBGradeClass.Set_Face(Value: WideString);
begin
  SetAttribute('Face', Value);
end;

function TXMLPlywoodOSBGradeClass.Get_SpanRating: WideString;
begin
  Result := ChildNodes['SpanRating'].Text;
end;

procedure TXMLPlywoodOSBGradeClass.Set_SpanRating(Value: WideString);
begin
  ChildNodes['SpanRating'].NodeValue := Value;
end;

function TXMLPlywoodOSBGradeClass.Get_StrengthGroup: WideString;
begin
  Result := ChildNodes['StrengthGroup'].Text;
end;

procedure TXMLPlywoodOSBGradeClass.Set_StrengthGroup(Value: WideString);
begin
  ChildNodes['StrengthGroup'].NodeValue := Value;
end;

{ TXMLPlywoodOSBSurfaceClass }

procedure TXMLPlywoodOSBSurfaceClass.AfterConstruction;
begin
  ItemTag := 'AdditionalText';
  ItemInterface := IXMLNode;
  inherited;
end;

function TXMLPlywoodOSBSurfaceClass.Get_SurfaceType: WideString;
begin
  Result := AttributeNodes['SurfaceType'].Text;
end;

procedure TXMLPlywoodOSBSurfaceClass.Set_SurfaceType(Value: WideString);
begin
  SetAttribute('SurfaceType', Value);
end;

function TXMLPlywoodOSBSurfaceClass.Get_AdditionalText(Index: Integer): WideString;
begin
  Result := List[Index].Text;
end;

function TXMLPlywoodOSBSurfaceClass.Add(const AdditionalText: WideString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := AdditionalText;
end;

function TXMLPlywoodOSBSurfaceClass.Insert(const Index: Integer; const AdditionalText: WideString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := AdditionalText;
end;

{ TXMLPlywoodOSBOverlayClass }

procedure TXMLPlywoodOSBOverlayClass.AfterConstruction;
begin
  ItemTag := 'AdditionalText';
  ItemInterface := IXMLNode;
  inherited;
end;

function TXMLPlywoodOSBOverlayClass.Get_OverlaySide: WideString;
begin
  Result := AttributeNodes['OverlaySide'].Text;
end;

procedure TXMLPlywoodOSBOverlayClass.Set_OverlaySide(Value: WideString);
begin
  SetAttribute('OverlaySide', Value);
end;

function TXMLPlywoodOSBOverlayClass.Get_AdditionalText(Index: Integer): WideString;
begin
  Result := List[Index].Text;
end;

function TXMLPlywoodOSBOverlayClass.Add(const AdditionalText: WideString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := AdditionalText;
end;

function TXMLPlywoodOSBOverlayClass.Insert(const Index: Integer; const AdditionalText: WideString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := AdditionalText;
end;

{ TXMLPlywoodOSBOverlayClassList }

function TXMLPlywoodOSBOverlayClassList.Add: IXMLPlywoodOSBOverlayClass;
begin
  Result := AddItem(-1) as IXMLPlywoodOSBOverlayClass;
end;

function TXMLPlywoodOSBOverlayClassList.Insert(const Index: Integer): IXMLPlywoodOSBOverlayClass;
begin
  Result := AddItem(Index) as IXMLPlywoodOSBOverlayClass;
end;
function TXMLPlywoodOSBOverlayClassList.Get_Item(Index: Integer): IXMLPlywoodOSBOverlayClass;
begin
  Result := List[Index] as IXMLPlywoodOSBOverlayClass;
end;

{ TXMLPlywoodOSBEdgeClass }

procedure TXMLPlywoodOSBEdgeClass.AfterConstruction;
begin
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLPlywoodOSBEdgeClass.Get_EdgeType: WideString;
begin
  Result := AttributeNodes['EdgeType'].Text;
end;

procedure TXMLPlywoodOSBEdgeClass.Set_EdgeType(Value: WideString);
begin
  SetAttribute('EdgeType', Value);
end;

function TXMLPlywoodOSBEdgeClass.Get_EdgeLocation: WideString;
begin
  Result := AttributeNodes['EdgeLocation'].Text;
end;

procedure TXMLPlywoodOSBEdgeClass.Set_EdgeLocation(Value: WideString);
begin
  SetAttribute('EdgeLocation', Value);
end;

function TXMLPlywoodOSBEdgeClass.Get_EdgeMachiningProfile: WideString;
begin
  Result := ChildNodes['EdgeMachiningProfile'].Text;
end;

procedure TXMLPlywoodOSBEdgeClass.Set_EdgeMachiningProfile(Value: WideString);
begin
  ChildNodes['EdgeMachiningProfile'].NodeValue := Value;
end;

function TXMLPlywoodOSBEdgeClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLPlywoodOSBSupplementalClass }

procedure TXMLPlywoodOSBSupplementalClass.AfterConstruction;
begin
  ItemTag := 'AdditionalText';
  ItemInterface := IXMLNode;
  inherited;
end;

function TXMLPlywoodOSBSupplementalClass.Get_SupplementalSpecification: WideString;
begin
  Result := AttributeNodes['SupplementalSpecification'].Text;
end;

procedure TXMLPlywoodOSBSupplementalClass.Set_SupplementalSpecification(Value: WideString);
begin
  SetAttribute('SupplementalSpecification', Value);
end;

function TXMLPlywoodOSBSupplementalClass.Get_AdditionalText(Index: Integer): WideString;
begin
  Result := List[Index].Text;
end;

function TXMLPlywoodOSBSupplementalClass.Add(const AdditionalText: WideString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := AdditionalText;
end;

function TXMLPlywoodOSBSupplementalClass.Insert(const Index: Integer; const AdditionalText: WideString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := AdditionalText;
end;

{ TXMLPlywoodOSBSupplementalClassList }

function TXMLPlywoodOSBSupplementalClassList.Add: IXMLPlywoodOSBSupplementalClass;
begin
  Result := AddItem(-1) as IXMLPlywoodOSBSupplementalClass;
end;

function TXMLPlywoodOSBSupplementalClassList.Insert(const Index: Integer): IXMLPlywoodOSBSupplementalClass;
begin
  Result := AddItem(Index) as IXMLPlywoodOSBSupplementalClass;
end;
function TXMLPlywoodOSBSupplementalClassList.Get_Item(Index: Integer): IXMLPlywoodOSBSupplementalClass;
begin
  Result := List[Index] as IXMLPlywoodOSBSupplementalClass;
end;

{ TXMLConstructionPackagesAndPreFabPanels }

procedure TXMLConstructionPackagesAndPreFabPanels.AfterConstruction;
begin
  RegisterChildNode('Floor', TXMLFloor);
  RegisterChildNode('Wall', TXMLWall);
  RegisterChildNode('Roof', TXMLRoof);
  RegisterChildNode('Packaging', TXMLPackaging);
  inherited;
end;

function TXMLConstructionPackagesAndPreFabPanels.Get_Floor: IXMLFloor;
begin
  Result := ChildNodes['Floor'] as IXMLFloor;
end;

function TXMLConstructionPackagesAndPreFabPanels.Get_Wall: IXMLWall;
begin
  Result := ChildNodes['Wall'] as IXMLWall;
end;

function TXMLConstructionPackagesAndPreFabPanels.Get_Roof: IXMLRoof;
begin
  Result := ChildNodes['Roof'] as IXMLRoof;
end;

function TXMLConstructionPackagesAndPreFabPanels.Get_Packaging: IXMLPackaging;
begin
  Result := ChildNodes['Packaging'] as IXMLPackaging;
end;

{ TXMLFloor }

function TXMLFloor.Get_FloorPanel: WideString;
begin
  Result := ChildNodes['FloorPanel'].Text;
end;

procedure TXMLFloor.Set_FloorPanel(Value: WideString);
begin
  ChildNodes['FloorPanel'].NodeValue := Value;
end;

function TXMLFloor.Get_FloorPackage: WideString;
begin
  Result := ChildNodes['FloorPackage'].Text;
end;

procedure TXMLFloor.Set_FloorPackage(Value: WideString);
begin
  ChildNodes['FloorPackage'].NodeValue := Value;
end;

function TXMLFloor.Get_FloorTruss: WideString;
begin
  Result := ChildNodes['FloorTruss'].Text;
end;

procedure TXMLFloor.Set_FloorTruss(Value: WideString);
begin
  ChildNodes['FloorTruss'].NodeValue := Value;
end;

{ TXMLWall }

function TXMLWall.Get_WallPanel: WideString;
begin
  Result := ChildNodes['WallPanel'].Text;
end;

procedure TXMLWall.Set_WallPanel(Value: WideString);
begin
  ChildNodes['WallPanel'].NodeValue := Value;
end;

function TXMLWall.Get_WallPackage: WideString;
begin
  Result := ChildNodes['WallPackage'].Text;
end;

procedure TXMLWall.Set_WallPackage(Value: WideString);
begin
  ChildNodes['WallPackage'].NodeValue := Value;
end;

{ TXMLRoof }

function TXMLRoof.Get_RoofPanel: WideString;
begin
  Result := ChildNodes['RoofPanel'].Text;
end;

procedure TXMLRoof.Set_RoofPanel(Value: WideString);
begin
  ChildNodes['RoofPanel'].NodeValue := Value;
end;

function TXMLRoof.Get_RoofPackage: WideString;
begin
  Result := ChildNodes['RoofPackage'].Text;
end;

procedure TXMLRoof.Set_RoofPackage(Value: WideString);
begin
  ChildNodes['RoofPackage'].NodeValue := Value;
end;

function TXMLRoof.Get_RoofTruss: WideString;
begin
  Result := ChildNodes['RoofTruss'].Text;
end;

procedure TXMLRoof.Set_RoofTruss(Value: WideString);
begin
  ChildNodes['RoofTruss'].NodeValue := Value;
end;

{ TXMLPackageInformationClass }

procedure TXMLPackageInformationClass.AfterConstruction;
begin
  RegisterChildNode('Identifier', TXMLIdentifierS60);
  RegisterChildNode('RawMaterialSet', TXMLIdentifierS60);
  RegisterChildNode('PartyIdentifier', TXMLPartyIdentifier);
  RegisterChildNode('ItemCount', TXMLMeasurement);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('InventoryClass', TXMLInventoryClass);
  RegisterChildNode('PackageCharacteristics', TXMLPackageCharacteristics);
  RegisterChildNode('BaleItem', TXMLBaleItem);
  RegisterChildNode('BoxItem', TXMLBoxItem);
  RegisterChildNode('ReelItem', TXMLReelItem);
  RegisterChildNode('ReamItem', TXMLReamItem);
  RegisterChildNode('SheetItem', TXMLSheetItem);
  RegisterChildNode('UnitItem', TXMLUnitItem);
  RegisterChildNode('WoodItem', TXMLWoodItem);
  RegisterChildNode('OtherDate', TXMLOtherDate);
  RegisterChildNode('e-Attachment', TXMLEAttachment);
  FIdentifier := CreateCollection(TXMLIdentifierS60List, IXMLIdentifierS60, 'Identifier') as IXMLIdentifierS60List;
  FRawMaterialSet := CreateCollection(TXMLIdentifierS60List, IXMLIdentifierS60, 'RawMaterialSet') as IXMLIdentifierS60List;
  FPartyIdentifier := CreateCollection(TXMLPartyIdentifierList, IXMLPartyIdentifier, 'PartyIdentifier') as IXMLPartyIdentifierList;
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  FBaleItem := CreateCollection(TXMLBaleItemList, IXMLBaleItem, 'BaleItem') as IXMLBaleItemList;
  FBoxItem := CreateCollection(TXMLBoxItemList, IXMLBoxItem, 'BoxItem') as IXMLBoxItemList;
  FReelItem := CreateCollection(TXMLReelItemList, IXMLReelItem, 'ReelItem') as IXMLReelItemList;
  FReamItem := CreateCollection(TXMLReamItemList, IXMLReamItem, 'ReamItem') as IXMLReamItemList;
  FSheetItem := CreateCollection(TXMLSheetItemList, IXMLSheetItem, 'SheetItem') as IXMLSheetItemList;
  FUnitItem := CreateCollection(TXMLUnitItemList, IXMLUnitItem, 'UnitItem') as IXMLUnitItemList;
  FWoodItem := CreateCollection(TXMLWoodItemList, IXMLWoodItem, 'WoodItem') as IXMLWoodItemList;
  FOtherDate := CreateCollection(TXMLOtherDateList, IXMLOtherDate, 'OtherDate') as IXMLOtherDateList;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLPackageInformationClass.Get_PackageType: WideString;
begin
  Result := AttributeNodes['PackageType'].Text;
end;

procedure TXMLPackageInformationClass.Set_PackageType(Value: WideString);
begin
  SetAttribute('PackageType', Value);
end;

function TXMLPackageInformationClass.Get_MixedProductPalletIndicator: WideString;
begin
  Result := AttributeNodes['MixedProductPalletIndicator'].Text;
end;

procedure TXMLPackageInformationClass.Set_MixedProductPalletIndicator(Value: WideString);
begin
  SetAttribute('MixedProductPalletIndicator', Value);
end;

function TXMLPackageInformationClass.Get_PackageLevel: WideString;
begin
  Result := AttributeNodes['PackageLevel'].Text;
end;

procedure TXMLPackageInformationClass.Set_PackageLevel(Value: WideString);
begin
  SetAttribute('PackageLevel', Value);
end;

function TXMLPackageInformationClass.Get_Identifier: IXMLIdentifierS60List;
begin
  Result := FIdentifier;
end;

function TXMLPackageInformationClass.Get_RawMaterialSet: IXMLIdentifierS60List;
begin
  Result := FRawMaterialSet;
end;

function TXMLPackageInformationClass.Get_PartyIdentifier: IXMLPartyIdentifierList;
begin
  Result := FPartyIdentifier;
end;

function TXMLPackageInformationClass.Get_MachineID: WideString;
begin
  Result := ChildNodes['MachineID'].Text;
end;

procedure TXMLPackageInformationClass.Set_MachineID(Value: WideString);
begin
  ChildNodes['MachineID'].NodeValue := Value;
end;

function TXMLPackageInformationClass.Get_ItemCount: IXMLMeasurement;
begin
  Result := ChildNodes['ItemCount'] as IXMLMeasurement;
end;

function TXMLPackageInformationClass.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLPackageInformationClass.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLPackageInformationClass.Get_InventoryClass: IXMLInventoryClass;
begin
  Result := ChildNodes['InventoryClass'] as IXMLInventoryClass;
end;

function TXMLPackageInformationClass.Get_PackageCharacteristics: IXMLPackageCharacteristics;
begin
  Result := ChildNodes['PackageCharacteristics'] as IXMLPackageCharacteristics;
end;

function TXMLPackageInformationClass.Get_BaleItem: IXMLBaleItemList;
begin
  Result := FBaleItem;
end;

function TXMLPackageInformationClass.Get_BoxItem: IXMLBoxItemList;
begin
  Result := FBoxItem;
end;

function TXMLPackageInformationClass.Get_ReelItem: IXMLReelItemList;
begin
  Result := FReelItem;
end;

function TXMLPackageInformationClass.Get_ReamItem: IXMLReamItemList;
begin
  Result := FReamItem;
end;

function TXMLPackageInformationClass.Get_SheetItem: IXMLSheetItemList;
begin
  Result := FSheetItem;
end;

function TXMLPackageInformationClass.Get_UnitItem: IXMLUnitItemList;
begin
  Result := FUnitItem;
end;

function TXMLPackageInformationClass.Get_WoodItem: IXMLWoodItemList;
begin
  Result := FWoodItem;
end;

function TXMLPackageInformationClass.Get_OtherDate: IXMLOtherDateList;
begin
  Result := FOtherDate;
end;

function TXMLPackageInformationClass.Get_EAttachment: IXMLEAttachment;
begin
  Result := ChildNodes['e-Attachment'] as IXMLEAttachment;
end;

function TXMLPackageInformationClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLPackageInformationClassList }

function TXMLPackageInformationClassList.Add: IXMLPackageInformationClass;
begin
  Result := AddItem(-1) as IXMLPackageInformationClass;
end;

function TXMLPackageInformationClassList.Insert(const Index: Integer): IXMLPackageInformationClass;
begin
  Result := AddItem(Index) as IXMLPackageInformationClass;
end;
function TXMLPackageInformationClassList.Get_Item(Index: Integer): IXMLPackageInformationClass;
begin
  Result := List[Index] as IXMLPackageInformationClass;
end;

{ TXMLInventoryClass }

procedure TXMLInventoryClass.AfterConstruction;
begin
  RegisterChildNode('InventoryClassCode', TXMLInventoryClassCode);
  FInventoryClassCode := CreateCollection(TXMLInventoryClassCodeList, IXMLInventoryClassCode, 'InventoryClassCode') as IXMLInventoryClassCodeList;
  FInventoryClassDescription := CreateCollection(TXMLS72List, IXMLNode, 'InventoryClassDescription') as IXMLS72List;
  FAdditionalText := CreateCollection(TXMLS255List, IXMLNode, 'AdditionalText') as IXMLS255List;
  inherited;
end;

function TXMLInventoryClass.Get_InventoryStatusType: WideString;
begin
  Result := AttributeNodes['InventoryStatusType'].Text;
end;

procedure TXMLInventoryClass.Set_InventoryStatusType(Value: WideString);
begin
  SetAttribute('InventoryStatusType', Value);
end;

function TXMLInventoryClass.Get_InventoryOwnedBy: WideString;
begin
  Result := AttributeNodes['InventoryOwnedBy'].Text;
end;

procedure TXMLInventoryClass.Set_InventoryOwnedBy(Value: WideString);
begin
  SetAttribute('InventoryOwnedBy', Value);
end;

function TXMLInventoryClass.Get_InventoryClassCode: IXMLInventoryClassCodeList;
begin
  Result := FInventoryClassCode;
end;

function TXMLInventoryClass.Get_InventoryClassDescription: IXMLS72List;
begin
  Result := FInventoryClassDescription;
end;

function TXMLInventoryClass.Get_AdditionalText: IXMLS255List;
begin
  Result := FAdditionalText;
end;

{ TXMLInventoryClassCode }

function TXMLInventoryClassCode.Get_Agency: WideString;
begin
  Result := AttributeNodes['Agency'].Text;
end;

procedure TXMLInventoryClassCode.Set_Agency(Value: WideString);
begin
  SetAttribute('Agency', Value);
end;

function TXMLInventoryClassCode.Get_InventoryClassLevel: LongWord;
begin
  Result := AttributeNodes['InventoryClassLevel'].NodeValue;
end;

procedure TXMLInventoryClassCode.Set_InventoryClassLevel(Value: LongWord);
begin
  SetAttribute('InventoryClassLevel', Value);
end;

{ TXMLInventoryClassCodeList }

function TXMLInventoryClassCodeList.Add: IXMLInventoryClassCode;
begin
  Result := AddItem(-1) as IXMLInventoryClassCode;
end;

function TXMLInventoryClassCodeList.Insert(const Index: Integer): IXMLInventoryClassCode;
begin
  Result := AddItem(Index) as IXMLInventoryClassCode;
end;
function TXMLInventoryClassCodeList.Get_Item(Index: Integer): IXMLInventoryClassCode;
begin
  Result := List[Index] as IXMLInventoryClassCode;
end;

{ TXMLPackageCharacteristics }

procedure TXMLPackageCharacteristics.AfterConstruction;
begin
  RegisterChildNode('Height', TXMLMeasurement);
  RegisterChildNode('Width', TXMLMeasurement);
  RegisterChildNode('Length', TXMLMeasurement);
  RegisterChildNode('LengthCutDescription', TXMLLengthCutDescription);
  inherited;
end;

function TXMLPackageCharacteristics.Get_Height: IXMLMeasurement;
begin
  Result := ChildNodes['Height'] as IXMLMeasurement;
end;

function TXMLPackageCharacteristics.Get_Width: IXMLMeasurement;
begin
  Result := ChildNodes['Width'] as IXMLMeasurement;
end;

function TXMLPackageCharacteristics.Get_Length: IXMLMeasurement;
begin
  Result := ChildNodes['Length'] as IXMLMeasurement;
end;

function TXMLPackageCharacteristics.Get_LengthCutDescription: IXMLLengthCutDescription;
begin
  Result := ChildNodes['LengthCutDescription'] as IXMLLengthCutDescription;
end;

{ TXMLBaleItem }

procedure TXMLBaleItem.AfterConstruction;
begin
  RegisterChildNode('Identifier', TXMLIdentifierS60);
  RegisterChildNode('PartyIdentifier', TXMLPartyIdentifier);
  RegisterChildNode('Product', TXMLProductClass);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('InventoryClass', TXMLInventoryClass);
  FIdentifier := CreateCollection(TXMLIdentifierS60List, IXMLIdentifierS60, 'Identifier') as IXMLIdentifierS60List;
  FPartyIdentifier := CreateCollection(TXMLPartyIdentifierList, IXMLPartyIdentifier, 'PartyIdentifier') as IXMLPartyIdentifierList;
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  inherited;
end;

function TXMLBaleItem.Get_Identifier: IXMLIdentifierS60List;
begin
  Result := FIdentifier;
end;

function TXMLBaleItem.Get_PartyIdentifier: IXMLPartyIdentifierList;
begin
  Result := FPartyIdentifier;
end;

function TXMLBaleItem.Get_MachineID: WideString;
begin
  Result := ChildNodes['MachineID'].Text;
end;

procedure TXMLBaleItem.Set_MachineID(Value: WideString);
begin
  ChildNodes['MachineID'].NodeValue := Value;
end;

function TXMLBaleItem.Get_Product: IXMLProductClass;
begin
  Result := ChildNodes['Product'] as IXMLProductClass;
end;

function TXMLBaleItem.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLBaleItem.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLBaleItem.Get_InventoryClass: IXMLInventoryClass;
begin
  Result := ChildNodes['InventoryClass'] as IXMLInventoryClass;
end;

{ TXMLBaleItemList }

function TXMLBaleItemList.Add: IXMLBaleItem;
begin
  Result := AddItem(-1) as IXMLBaleItem;
end;

function TXMLBaleItemList.Insert(const Index: Integer): IXMLBaleItem;
begin
  Result := AddItem(Index) as IXMLBaleItem;
end;
function TXMLBaleItemList.Get_Item(Index: Integer): IXMLBaleItem;
begin
  Result := List[Index] as IXMLBaleItem;
end;

{ TXMLBoxItem }

procedure TXMLBoxItem.AfterConstruction;
begin
  RegisterChildNode('Identifier', TXMLIdentifierS60);
  RegisterChildNode('PartyIdentifier', TXMLPartyIdentifier);
  RegisterChildNode('ItemCount', TXMLMeasurement);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('ReamItem', TXMLReamItem);
  RegisterChildNode('SheetItem', TXMLSheetItem);
  RegisterChildNode('UnitItem', TXMLUnitItem);
  RegisterChildNode('BoxCharacteristics', TXMLBoxCharacteristics);
  RegisterChildNode('InventoryClass', TXMLInventoryClass);
  FIdentifier := CreateCollection(TXMLIdentifierS60List, IXMLIdentifierS60, 'Identifier') as IXMLIdentifierS60List;
  FPartyIdentifier := CreateCollection(TXMLPartyIdentifierList, IXMLPartyIdentifier, 'PartyIdentifier') as IXMLPartyIdentifierList;
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  FReamItem := CreateCollection(TXMLReamItemList, IXMLReamItem, 'ReamItem') as IXMLReamItemList;
  FUnitItem := CreateCollection(TXMLUnitItemList, IXMLUnitItem, 'UnitItem') as IXMLUnitItemList;
  inherited;
end;

function TXMLBoxItem.Get_MixProductIndicator: WideString;
begin
  Result := AttributeNodes['MixProductIndicator'].Text;
end;

procedure TXMLBoxItem.Set_MixProductIndicator(Value: WideString);
begin
  SetAttribute('MixProductIndicator', Value);
end;

function TXMLBoxItem.Get_Identifier: IXMLIdentifierS60List;
begin
  Result := FIdentifier;
end;

function TXMLBoxItem.Get_PartyIdentifier: IXMLPartyIdentifierList;
begin
  Result := FPartyIdentifier;
end;

function TXMLBoxItem.Get_MachineID: WideString;
begin
  Result := ChildNodes['MachineID'].Text;
end;

procedure TXMLBoxItem.Set_MachineID(Value: WideString);
begin
  ChildNodes['MachineID'].NodeValue := Value;
end;

function TXMLBoxItem.Get_ItemCount: IXMLMeasurement;
begin
  Result := ChildNodes['ItemCount'] as IXMLMeasurement;
end;

function TXMLBoxItem.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLBoxItem.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLBoxItem.Get_ReamItem: IXMLReamItemList;
begin
  Result := FReamItem;
end;

function TXMLBoxItem.Get_SheetItem: IXMLSheetItem;
begin
  Result := ChildNodes['SheetItem'] as IXMLSheetItem;
end;

function TXMLBoxItem.Get_UnitItem: IXMLUnitItemList;
begin
  Result := FUnitItem;
end;

function TXMLBoxItem.Get_BoxCharacteristics: IXMLBoxCharacteristics;
begin
  Result := ChildNodes['BoxCharacteristics'] as IXMLBoxCharacteristics;
end;

function TXMLBoxItem.Get_InventoryClass: IXMLInventoryClass;
begin
  Result := ChildNodes['InventoryClass'] as IXMLInventoryClass;
end;

{ TXMLBoxItemList }

function TXMLBoxItemList.Add: IXMLBoxItem;
begin
  Result := AddItem(-1) as IXMLBoxItem;
end;

function TXMLBoxItemList.Insert(const Index: Integer): IXMLBoxItem;
begin
  Result := AddItem(Index) as IXMLBoxItem;
end;
function TXMLBoxItemList.Get_Item(Index: Integer): IXMLBoxItem;
begin
  Result := List[Index] as IXMLBoxItem;
end;

{ TXMLReamItem }

procedure TXMLReamItem.AfterConstruction;
begin
  RegisterChildNode('Identifier', TXMLIdentifierS60);
  RegisterChildNode('ItemCount', TXMLMeasurement);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('SheetItem', TXMLSheetItem);
  FIdentifier := CreateCollection(TXMLIdentifierS60List, IXMLIdentifierS60, 'Identifier') as IXMLIdentifierS60List;
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  inherited;
end;

function TXMLReamItem.Get_Identifier: IXMLIdentifierS60List;
begin
  Result := FIdentifier;
end;

function TXMLReamItem.Get_ItemCount: IXMLMeasurement;
begin
  Result := ChildNodes['ItemCount'] as IXMLMeasurement;
end;

function TXMLReamItem.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLReamItem.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLReamItem.Get_SheetItem: IXMLSheetItem;
begin
  Result := ChildNodes['SheetItem'] as IXMLSheetItem;
end;

{ TXMLReamItemList }

function TXMLReamItemList.Add: IXMLReamItem;
begin
  Result := AddItem(-1) as IXMLReamItem;
end;

function TXMLReamItemList.Insert(const Index: Integer): IXMLReamItem;
begin
  Result := AddItem(Index) as IXMLReamItem;
end;
function TXMLReamItemList.Get_Item(Index: Integer): IXMLReamItem;
begin
  Result := List[Index] as IXMLReamItem;
end;

{ TXMLSheetItem }

procedure TXMLSheetItem.AfterConstruction;
begin
  RegisterChildNode('DateSheeted', TXMLDateSheeted);
  RegisterChildNode('DateFinished', TXMLDateFinished);
  inherited;
end;

function TXMLSheetItem.Get_DateSheeted: IXMLDateSheeted;
begin
  Result := ChildNodes['DateSheeted'] as IXMLDateSheeted;
end;

function TXMLSheetItem.Get_DateFinished: IXMLDateFinished;
begin
  Result := ChildNodes['DateFinished'] as IXMLDateFinished;
end;

{ TXMLSheetItemList }

function TXMLSheetItemList.Add: IXMLSheetItem;
begin
  Result := AddItem(-1) as IXMLSheetItem;
end;

function TXMLSheetItemList.Insert(const Index: Integer): IXMLSheetItem;
begin
  Result := AddItem(Index) as IXMLSheetItem;
end;
function TXMLSheetItemList.Get_Item(Index: Integer): IXMLSheetItem;
begin
  Result := List[Index] as IXMLSheetItem;
end;

{ TXMLDateSheeted }

procedure TXMLDateSheeted.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDateSheeted.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDateSheeted.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDateSheeted.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLDateFinished }

procedure TXMLDateFinished.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDateFinished.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDateFinished.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDateFinished.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLUnitItem }

procedure TXMLUnitItem.AfterConstruction;
begin
  RegisterChildNode('Product', TXMLProductClass);
  RegisterChildNode('UnitCharacteristics', TXMLUnitCharacteristics);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  inherited;
end;

function TXMLUnitItem.Get_Product: IXMLProductClass;
begin
  Result := ChildNodes['Product'] as IXMLProductClass;
end;

function TXMLUnitItem.Get_UnitCharacteristics: IXMLUnitCharacteristics;
begin
  Result := ChildNodes['UnitCharacteristics'] as IXMLUnitCharacteristics;
end;

function TXMLUnitItem.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLUnitItem.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

{ TXMLUnitItemList }

function TXMLUnitItemList.Add: IXMLUnitItem;
begin
  Result := AddItem(-1) as IXMLUnitItem;
end;

function TXMLUnitItemList.Insert(const Index: Integer): IXMLUnitItem;
begin
  Result := AddItem(Index) as IXMLUnitItem;
end;
function TXMLUnitItemList.Get_Item(Index: Integer): IXMLUnitItem;
begin
  Result := List[Index] as IXMLUnitItem;
end;

{ TXMLReelItem }

procedure TXMLReelItem.AfterConstruction;
begin
  RegisterChildNode('Identifier', TXMLIdentifierS60);
  RegisterChildNode('PartyIdentifier', TXMLPartyIdentifier);
  RegisterChildNode('DeliveryMessageReelCharacteristics', TXMLDeliveryMessageReelCharacteristics);
  RegisterChildNode('InventoryClass', TXMLInventoryClass);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  FIdentifier := CreateCollection(TXMLIdentifierS60List, IXMLIdentifierS60, 'Identifier') as IXMLIdentifierS60List;
  FPartyIdentifier := CreateCollection(TXMLPartyIdentifierList, IXMLPartyIdentifier, 'PartyIdentifier') as IXMLPartyIdentifierList;
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  inherited;
end;

function TXMLReelItem.Get_Identifier: IXMLIdentifierS60List;
begin
  Result := FIdentifier;
end;

function TXMLReelItem.Get_PartyIdentifier: IXMLPartyIdentifierList;
begin
  Result := FPartyIdentifier;
end;

function TXMLReelItem.Get_MachineID: WideString;
begin
  Result := ChildNodes['MachineID'].Text;
end;

procedure TXMLReelItem.Set_MachineID(Value: WideString);
begin
  ChildNodes['MachineID'].NodeValue := Value;
end;

function TXMLReelItem.Get_DeliveryMessageReelCharacteristics: IXMLDeliveryMessageReelCharacteristics;
begin
  Result := ChildNodes['DeliveryMessageReelCharacteristics'] as IXMLDeliveryMessageReelCharacteristics;
end;

function TXMLReelItem.Get_InventoryClass: IXMLInventoryClass;
begin
  Result := ChildNodes['InventoryClass'] as IXMLInventoryClass;
end;

function TXMLReelItem.Get_MillOrderNumber: WideString;
begin
  Result := ChildNodes['MillOrderNumber'].Text;
end;

procedure TXMLReelItem.Set_MillOrderNumber(Value: WideString);
begin
  ChildNodes['MillOrderNumber'].NodeValue := Value;
end;

function TXMLReelItem.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLReelItem.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

{ TXMLReelItemList }

function TXMLReelItemList.Add: IXMLReelItem;
begin
  Result := AddItem(-1) as IXMLReelItem;
end;

function TXMLReelItemList.Insert(const Index: Integer): IXMLReelItem;
begin
  Result := AddItem(Index) as IXMLReelItem;
end;
function TXMLReelItemList.Get_Item(Index: Integer): IXMLReelItem;
begin
  Result := List[Index] as IXMLReelItem;
end;

{ TXMLDeliveryMessageReelCharacteristics }

procedure TXMLDeliveryMessageReelCharacteristics.AfterConstruction;
begin
  RegisterChildNode('ReelWidth', TXMLMeasurement);
  RegisterChildNode('ReelDiameter', TXMLMeasurement);
  RegisterChildNode('ReelLength', TXMLMeasurement);
  RegisterChildNode('MillJoinLocation', TXMLMillJoinLocation);
  RegisterChildNode('DateFinished', TXMLDateFinished);
  RegisterChildNode('DateWound', TXMLDateWound);
  RegisterChildNode('Caliper', TXMLCaliper);
  FMillJoinLocation := CreateCollection(TXMLMillJoinLocationList, IXMLMillJoinLocation, 'MillJoinLocation') as IXMLMillJoinLocationList;
  inherited;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_ReelWidth: IXMLMeasurement;
begin
  Result := ChildNodes['ReelWidth'] as IXMLMeasurement;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_ReelDiameter: IXMLMeasurement;
begin
  Result := ChildNodes['ReelDiameter'] as IXMLMeasurement;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_ReelLength: IXMLMeasurement;
begin
  Result := ChildNodes['ReelLength'] as IXMLMeasurement;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_MachineID: WideString;
begin
  Result := ChildNodes['MachineID'].Text;
end;

procedure TXMLDeliveryMessageReelCharacteristics.Set_MachineID(Value: WideString);
begin
  ChildNodes['MachineID'].NodeValue := Value;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_TambourID: WideString;
begin
  Result := ChildNodes['TambourID'].Text;
end;

procedure TXMLDeliveryMessageReelCharacteristics.Set_TambourID(Value: WideString);
begin
  ChildNodes['TambourID'].NodeValue := Value;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_SetNumber: LongWord;
begin
  Result := ChildNodes['SetNumber'].NodeValue;
end;

procedure TXMLDeliveryMessageReelCharacteristics.Set_SetNumber(Value: LongWord);
begin
  ChildNodes['SetNumber'].NodeValue := Value;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_SetPosition: LongWord;
begin
  Result := ChildNodes['SetPosition'].NodeValue;
end;

procedure TXMLDeliveryMessageReelCharacteristics.Set_SetPosition(Value: LongWord);
begin
  ChildNodes['SetPosition'].NodeValue := Value;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_TotalSetPositions: LongWord;
begin
  Result := ChildNodes['TotalSetPositions'].NodeValue;
end;

procedure TXMLDeliveryMessageReelCharacteristics.Set_TotalSetPositions(Value: LongWord);
begin
  ChildNodes['TotalSetPositions'].NodeValue := Value;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_TotalSetNumbers: LongWord;
begin
  Result := ChildNodes['TotalSetNumbers'].NodeValue;
end;

procedure TXMLDeliveryMessageReelCharacteristics.Set_TotalSetNumbers(Value: LongWord);
begin
  ChildNodes['TotalSetNumbers'].NodeValue := Value;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_NumberOfMillJoins: LongWord;
begin
  Result := ChildNodes['NumberOfMillJoins'].NodeValue;
end;

procedure TXMLDeliveryMessageReelCharacteristics.Set_NumberOfMillJoins(Value: LongWord);
begin
  ChildNodes['NumberOfMillJoins'].NodeValue := Value;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_MillJoinLocation: IXMLMillJoinLocationList;
begin
  Result := FMillJoinLocation;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_DateFinished: IXMLDateFinished;
begin
  Result := ChildNodes['DateFinished'] as IXMLDateFinished;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_DateWound: IXMLDateWound;
begin
  Result := ChildNodes['DateWound'] as IXMLDateWound;
end;

function TXMLDeliveryMessageReelCharacteristics.Get_Caliper: IXMLCaliper;
begin
  Result := ChildNodes['Caliper'] as IXMLCaliper;
end;

{ TXMLMillJoinLocation }

procedure TXMLMillJoinLocation.AfterConstruction;
begin
  RegisterChildNode('LengthFromCore', TXMLMeasurement);
  RegisterChildNode('DistanceFromCore', TXMLMeasurement);
  inherited;
end;

function TXMLMillJoinLocation.Get_MillJoinNumber: LongWord;
begin
  Result := ChildNodes['MillJoinNumber'].NodeValue;
end;

procedure TXMLMillJoinLocation.Set_MillJoinNumber(Value: LongWord);
begin
  ChildNodes['MillJoinNumber'].NodeValue := Value;
end;

function TXMLMillJoinLocation.Get_LengthFromCore: IXMLMeasurement;
begin
  Result := ChildNodes['LengthFromCore'] as IXMLMeasurement;
end;

function TXMLMillJoinLocation.Get_DistanceFromCore: IXMLMeasurement;
begin
  Result := ChildNodes['DistanceFromCore'] as IXMLMeasurement;
end;

{ TXMLMillJoinLocationList }

function TXMLMillJoinLocationList.Add: IXMLMillJoinLocation;
begin
  Result := AddItem(-1) as IXMLMillJoinLocation;
end;

function TXMLMillJoinLocationList.Insert(const Index: Integer): IXMLMillJoinLocation;
begin
  Result := AddItem(Index) as IXMLMillJoinLocation;
end;
function TXMLMillJoinLocationList.Get_Item(Index: Integer): IXMLMillJoinLocation;
begin
  Result := List[Index] as IXMLMillJoinLocation;
end;

{ TXMLDateWound }

procedure TXMLDateWound.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLDateWound.Get_RewoundIndicator: WideString;
begin
  Result := AttributeNodes['RewoundIndicator'].Text;
end;

procedure TXMLDateWound.Set_RewoundIndicator(Value: WideString);
begin
  SetAttribute('RewoundIndicator', Value);
end;

function TXMLDateWound.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLDateWound.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLDateWound.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLWoodItem }

procedure TXMLWoodItem.AfterConstruction;
begin
  RegisterChildNode('Product', TXMLProductClass);
  RegisterChildNode('PackagingInformation', TXMLProductPackagingClass);
  RegisterChildNode('ProductSummary', TXMLProductSummary);
  RegisterChildNode('LengthSpecification', TXMLLengthSpecification);
  FLengthSpecification := CreateCollection(TXMLLengthSpecificationList, IXMLLengthSpecification, 'LengthSpecification') as IXMLLengthSpecificationList;
  inherited;
end;

function TXMLWoodItem.Get_Product: IXMLProductClass;
begin
  Result := ChildNodes['Product'] as IXMLProductClass;
end;

function TXMLWoodItem.Get_PackagingInformation: IXMLProductPackagingClass;
begin
  Result := ChildNodes['PackagingInformation'] as IXMLProductPackagingClass;
end;

function TXMLWoodItem.Get_ProductSummary: IXMLProductSummary;
begin
  Result := ChildNodes['ProductSummary'] as IXMLProductSummary;
end;

function TXMLWoodItem.Get_LengthSpecification: IXMLLengthSpecificationList;
begin
  Result := FLengthSpecification;
end;

{ TXMLWoodItemList }

function TXMLWoodItemList.Add: IXMLWoodItem;
begin
  Result := AddItem(-1) as IXMLWoodItem;
end;

function TXMLWoodItemList.Insert(const Index: Integer): IXMLWoodItem;
begin
  Result := AddItem(Index) as IXMLWoodItem;
end;
function TXMLWoodItemList.Get_Item(Index: Integer): IXMLWoodItem;
begin
  Result := List[Index] as IXMLWoodItem;
end;

{ TXMLProductSummary }

procedure TXMLProductSummary.AfterConstruction;
begin
  RegisterChildNode('TotalQuantity', TXMLTotalQuantity);
  RegisterChildNode('TotalInformationalQuantity', TXMLTotalInformationalQuantity);
  FTotalInformationalQuantity := CreateCollection(TXMLTotalInformationalQuantityList, IXMLTotalInformationalQuantity, 'TotalInformationalQuantity') as IXMLTotalInformationalQuantityList;
  inherited;
end;

function TXMLProductSummary.Get_TotalQuantity: IXMLTotalQuantity;
begin
  Result := ChildNodes['TotalQuantity'] as IXMLTotalQuantity;
end;

function TXMLProductSummary.Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
begin
  Result := FTotalInformationalQuantity;
end;

{ TXMLTotalQuantity }

function TXMLTotalQuantity.Get_QuantityType: WideString;
begin
  Result := AttributeNodes['QuantityType'].Text;
end;

procedure TXMLTotalQuantity.Set_QuantityType(Value: WideString);
begin
  SetAttribute('QuantityType', Value);
end;

function TXMLTotalQuantity.Get_QuantityTypeContext: WideString;
begin
  Result := AttributeNodes['QuantityTypeContext'].Text;
end;

procedure TXMLTotalQuantity.Set_QuantityTypeContext(Value: WideString);
begin
  SetAttribute('QuantityTypeContext', Value);
end;

function TXMLTotalQuantity.Get_AdjustmentType: WideString;
begin
  Result := AttributeNodes['AdjustmentType'].Text;
end;

procedure TXMLTotalQuantity.Set_AdjustmentType(Value: WideString);
begin
  SetAttribute('AdjustmentType', Value);
end;

{ TXMLTotalQuantityList }

function TXMLTotalQuantityList.Add: IXMLTotalQuantity;
begin
  Result := AddItem(-1) as IXMLTotalQuantity;
end;

function TXMLTotalQuantityList.Insert(const Index: Integer): IXMLTotalQuantity;
begin
  Result := AddItem(Index) as IXMLTotalQuantity;
end;
function TXMLTotalQuantityList.Get_Item(Index: Integer): IXMLTotalQuantity;
begin
  Result := List[Index] as IXMLTotalQuantity;
end;

{ TXMLTotalInformationalQuantity }

function TXMLTotalInformationalQuantity.Get_QuantityType: WideString;
begin
  Result := AttributeNodes['QuantityType'].Text;
end;

procedure TXMLTotalInformationalQuantity.Set_QuantityType(Value: WideString);
begin
  SetAttribute('QuantityType', Value);
end;

function TXMLTotalInformationalQuantity.Get_QuantityTypeContext: WideString;
begin
  Result := AttributeNodes['QuantityTypeContext'].Text;
end;

procedure TXMLTotalInformationalQuantity.Set_QuantityTypeContext(Value: WideString);
begin
  SetAttribute('QuantityTypeContext', Value);
end;

function TXMLTotalInformationalQuantity.Get_AdjustmentType: WideString;
begin
  Result := AttributeNodes['AdjustmentType'].Text;
end;

procedure TXMLTotalInformationalQuantity.Set_AdjustmentType(Value: WideString);
begin
  SetAttribute('AdjustmentType', Value);
end;

{ TXMLTotalInformationalQuantityList }

function TXMLTotalInformationalQuantityList.Add: IXMLTotalInformationalQuantity;
begin
  Result := AddItem(-1) as IXMLTotalInformationalQuantity;
end;

function TXMLTotalInformationalQuantityList.Insert(const Index: Integer): IXMLTotalInformationalQuantity;
begin
  Result := AddItem(Index) as IXMLTotalInformationalQuantity;
end;
function TXMLTotalInformationalQuantityList.Get_Item(Index: Integer): IXMLTotalInformationalQuantity;
begin
  Result := List[Index] as IXMLTotalInformationalQuantity;
end;

{ TXMLLengthSpecification }

procedure TXMLLengthSpecification.AfterConstruction;
begin
  RegisterChildNode('TotalNumberOfUnits', TXMLMeasurement);
  inherited;
end;

function TXMLLengthSpecification.Get_LengthCategory: WideString;
begin
  Result := ChildNodes['LengthCategory'].Text;
end;

procedure TXMLLengthSpecification.Set_LengthCategory(Value: WideString);
begin
  ChildNodes['LengthCategory'].NodeValue := Value;
end;

function TXMLLengthSpecification.Get_TotalNumberOfUnits: IXMLMeasurement;
begin
  Result := ChildNodes['TotalNumberOfUnits'] as IXMLMeasurement;
end;

{ TXMLLengthSpecificationList }

function TXMLLengthSpecificationList.Add: IXMLLengthSpecification;
begin
  Result := AddItem(-1) as IXMLLengthSpecification;
end;

function TXMLLengthSpecificationList.Insert(const Index: Integer): IXMLLengthSpecification;
begin
  Result := AddItem(Index) as IXMLLengthSpecification;
end;
function TXMLLengthSpecificationList.Get_Item(Index: Integer): IXMLLengthSpecification;
begin
  Result := List[Index] as IXMLLengthSpecification;
end;

{ TXMLOtherDate }

procedure TXMLOtherDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLOtherDate.Get_DateType: WideString;
begin
  Result := AttributeNodes['DateType'].Text;
end;

procedure TXMLOtherDate.Set_DateType(Value: WideString);
begin
  SetAttribute('DateType', Value);
end;

function TXMLOtherDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLOtherDate.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLOtherDate.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

function TXMLOtherDate.Get_Week: WideString;
begin
  Result := ChildNodes['Week'].Text;
end;

procedure TXMLOtherDate.Set_Week(Value: WideString);
begin
  ChildNodes['Week'].NodeValue := Value;
end;

{ TXMLOtherDateList }

function TXMLOtherDateList.Add: IXMLOtherDate;
begin
  Result := AddItem(-1) as IXMLOtherDate;
end;

function TXMLOtherDateList.Insert(const Index: Integer): IXMLOtherDate;
begin
  Result := AddItem(Index) as IXMLOtherDate;
end;
function TXMLOtherDateList.Get_Item(Index: Integer): IXMLOtherDate;
begin
  Result := List[Index] as IXMLOtherDate;
end;

{ TXMLTransportPackageInformation }

procedure TXMLTransportPackageInformation.AfterConstruction;
begin
  RegisterChildNode('Identifier', TXMLIdentifierS60);
  RegisterChildNode('RawMaterialSet', TXMLIdentifierS60);
  RegisterChildNode('PartyIdentifier', TXMLPartyIdentifier);
  RegisterChildNode('ItemCount', TXMLMeasurement);
  RegisterChildNode('Quantity', TXMLQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  RegisterChildNode('InventoryClass', TXMLInventoryClass);
  RegisterChildNode('TransportVehicleCharacteristics', TXMLTransportVehicleCharacteristics);
  RegisterChildNode('TransportUnitCharacteristics', TXMLTransportUnitCharacteristics);
  RegisterChildNode('PackageCharacteristics', TXMLPackageCharacteristics);
  RegisterChildNode('BaleItem', TXMLBaleItem);
  RegisterChildNode('BoxItem', TXMLBoxItem);
  RegisterChildNode('ReelItem', TXMLReelItem);
  RegisterChildNode('ReamItem', TXMLReamItem);
  RegisterChildNode('SheetItem', TXMLSheetItem);
  RegisterChildNode('UnitItem', TXMLUnitItem);
  RegisterChildNode('WoodItem', TXMLWoodItem);
  RegisterChildNode('OtherDate', TXMLOtherDate);
  FIdentifier := CreateCollection(TXMLIdentifierS60List, IXMLIdentifierS60, 'Identifier') as IXMLIdentifierS60List;
  FRawMaterialSet := CreateCollection(TXMLIdentifierS60List, IXMLIdentifierS60, 'RawMaterialSet') as IXMLIdentifierS60List;
  FPartyIdentifier := CreateCollection(TXMLPartyIdentifierList, IXMLPartyIdentifier, 'PartyIdentifier') as IXMLPartyIdentifierList;
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  FBaleItem := CreateCollection(TXMLBaleItemList, IXMLBaleItem, 'BaleItem') as IXMLBaleItemList;
  FBoxItem := CreateCollection(TXMLBoxItemList, IXMLBoxItem, 'BoxItem') as IXMLBoxItemList;
  FReelItem := CreateCollection(TXMLReelItemList, IXMLReelItem, 'ReelItem') as IXMLReelItemList;
  FReamItem := CreateCollection(TXMLReamItemList, IXMLReamItem, 'ReamItem') as IXMLReamItemList;
  FSheetItem := CreateCollection(TXMLSheetItemList, IXMLSheetItem, 'SheetItem') as IXMLSheetItemList;
  FUnitItem := CreateCollection(TXMLUnitItemList, IXMLUnitItem, 'UnitItem') as IXMLUnitItemList;
  FWoodItem := CreateCollection(TXMLWoodItemList, IXMLWoodItem, 'WoodItem') as IXMLWoodItemList;
  inherited;
end;

function TXMLTransportPackageInformation.Get_PackageType: WideString;
begin
  Result := AttributeNodes['PackageType'].Text;
end;

procedure TXMLTransportPackageInformation.Set_PackageType(Value: WideString);
begin
  SetAttribute('PackageType', Value);
end;

function TXMLTransportPackageInformation.Get_MixedProductPalletIndicator: WideString;
begin
  Result := AttributeNodes['MixedProductPalletIndicator'].Text;
end;

procedure TXMLTransportPackageInformation.Set_MixedProductPalletIndicator(Value: WideString);
begin
  SetAttribute('MixedProductPalletIndicator', Value);
end;

function TXMLTransportPackageInformation.Get_PackageLevel: WideString;
begin
  Result := AttributeNodes['PackageLevel'].Text;
end;

procedure TXMLTransportPackageInformation.Set_PackageLevel(Value: WideString);
begin
  SetAttribute('PackageLevel', Value);
end;

function TXMLTransportPackageInformation.Get_Identifier: IXMLIdentifierS60List;
begin
  Result := FIdentifier;
end;

function TXMLTransportPackageInformation.Get_RawMaterialSet: IXMLIdentifierS60List;
begin
  Result := FRawMaterialSet;
end;

function TXMLTransportPackageInformation.Get_PartyIdentifier: IXMLPartyIdentifierList;
begin
  Result := FPartyIdentifier;
end;

function TXMLTransportPackageInformation.Get_MachineID: WideString;
begin
  Result := ChildNodes['MachineID'].Text;
end;

procedure TXMLTransportPackageInformation.Set_MachineID(Value: WideString);
begin
  ChildNodes['MachineID'].NodeValue := Value;
end;

function TXMLTransportPackageInformation.Get_ItemCount: IXMLMeasurement;
begin
  Result := ChildNodes['ItemCount'] as IXMLMeasurement;
end;

function TXMLTransportPackageInformation.Get_Quantity: IXMLQuantity;
begin
  Result := ChildNodes['Quantity'] as IXMLQuantity;
end;

function TXMLTransportPackageInformation.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

function TXMLTransportPackageInformation.Get_InventoryClass: IXMLInventoryClass;
begin
  Result := ChildNodes['InventoryClass'] as IXMLInventoryClass;
end;

function TXMLTransportPackageInformation.Get_TransportVehicleCharacteristics: IXMLTransportVehicleCharacteristics;
begin
  Result := ChildNodes['TransportVehicleCharacteristics'] as IXMLTransportVehicleCharacteristics;
end;

function TXMLTransportPackageInformation.Get_TransportUnitCharacteristics: IXMLTransportUnitCharacteristics;
begin
  Result := ChildNodes['TransportUnitCharacteristics'] as IXMLTransportUnitCharacteristics;
end;

function TXMLTransportPackageInformation.Get_PackageCharacteristics: IXMLPackageCharacteristics;
begin
  Result := ChildNodes['PackageCharacteristics'] as IXMLPackageCharacteristics;
end;

function TXMLTransportPackageInformation.Get_BaleItem: IXMLBaleItemList;
begin
  Result := FBaleItem;
end;

function TXMLTransportPackageInformation.Get_BoxItem: IXMLBoxItemList;
begin
  Result := FBoxItem;
end;

function TXMLTransportPackageInformation.Get_ReelItem: IXMLReelItemList;
begin
  Result := FReelItem;
end;

function TXMLTransportPackageInformation.Get_ReamItem: IXMLReamItemList;
begin
  Result := FReamItem;
end;

function TXMLTransportPackageInformation.Get_SheetItem: IXMLSheetItemList;
begin
  Result := FSheetItem;
end;

function TXMLTransportPackageInformation.Get_UnitItem: IXMLUnitItemList;
begin
  Result := FUnitItem;
end;

function TXMLTransportPackageInformation.Get_WoodItem: IXMLWoodItemList;
begin
  Result := FWoodItem;
end;

function TXMLTransportPackageInformation.Get_OtherDate: IXMLOtherDate;
begin
  Result := ChildNodes['OtherDate'] as IXMLOtherDate;
end;

{ TXMLTransportPackageInformationList }

function TXMLTransportPackageInformationList.Add: IXMLTransportPackageInformation;
begin
  Result := AddItem(-1) as IXMLTransportPackageInformation;
end;

function TXMLTransportPackageInformationList.Insert(const Index: Integer): IXMLTransportPackageInformation;
begin
  Result := AddItem(Index) as IXMLTransportPackageInformation;
end;
function TXMLTransportPackageInformationList.Get_Item(Index: Integer): IXMLTransportPackageInformation;
begin
  Result := List[Index] as IXMLTransportPackageInformation;
end;

{ TXMLMeasurementWithText }

procedure TXMLMeasurementWithText.AfterConstruction;
begin
  RegisterChildNode('Value', TXMLValue);
  RegisterChildNode('RangeMin', TXMLRangeMin);
  RegisterChildNode('RangeMax', TXMLRangeMax);
  inherited;
end;

function TXMLMeasurementWithText.Get_Value: IXMLValue;
begin
  Result := ChildNodes['Value'] as IXMLValue;
end;

function TXMLMeasurementWithText.Get_RangeMin: IXMLRangeMin;
begin
  Result := ChildNodes['RangeMin'] as IXMLRangeMin;
end;

function TXMLMeasurementWithText.Get_RangeMax: IXMLRangeMax;
begin
  Result := ChildNodes['RangeMax'] as IXMLRangeMax;
end;

function TXMLMeasurementWithText.Get_AdditionalText: WideString;
begin
  Result := ChildNodes['AdditionalText'].Text;
end;

procedure TXMLMeasurementWithText.Set_AdditionalText(Value: WideString);
begin
  ChildNodes['AdditionalText'].NodeValue := Value;
end;

{ TXMLProductGroupSummary }

procedure TXMLProductGroupSummary.AfterConstruction;
begin
  RegisterChildNode('TotalQuantity', TXMLTotalQuantity);
  RegisterChildNode('TotalInformationalQuantity', TXMLTotalInformationalQuantity);
  RegisterChildNode('ProductSummary', TXMLProductSummary);
  RegisterChildNode('LengthSpecification', TXMLLengthSpecification);
  FTotalInformationalQuantity := CreateCollection(TXMLTotalInformationalQuantityList, IXMLTotalInformationalQuantity, 'TotalInformationalQuantity') as IXMLTotalInformationalQuantityList;
  FLengthSpecification := CreateCollection(TXMLLengthSpecificationList, IXMLLengthSpecification, 'LengthSpecification') as IXMLLengthSpecificationList;
  inherited;
end;

function TXMLProductGroupSummary.Get_TotalQuantity: IXMLTotalQuantity;
begin
  Result := ChildNodes['TotalQuantity'] as IXMLTotalQuantity;
end;

function TXMLProductGroupSummary.Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
begin
  Result := FTotalInformationalQuantity;
end;

function TXMLProductGroupSummary.Get_ProductSummary: IXMLProductSummary;
begin
  Result := ChildNodes['ProductSummary'] as IXMLProductSummary;
end;

function TXMLProductGroupSummary.Get_LengthSpecification: IXMLLengthSpecificationList;
begin
  Result := FLengthSpecification;
end;

{ TXMLShipmentSummary }

procedure TXMLShipmentSummary.AfterConstruction;
begin
  RegisterChildNode('TotalQuantity', TXMLTotalQuantity);
  RegisterChildNode('TotalInformationalQuantity', TXMLTotalInformationalQuantity);
  RegisterChildNode('ProductSummary', TXMLProductSummary);
  RegisterChildNode('LengthSpecification', TXMLLengthSpecification);
  FTotalInformationalQuantity := CreateCollection(TXMLTotalInformationalQuantityList, IXMLTotalInformationalQuantity, 'TotalInformationalQuantity') as IXMLTotalInformationalQuantityList;
  FLengthSpecification := CreateCollection(TXMLLengthSpecificationList, IXMLLengthSpecification, 'LengthSpecification') as IXMLLengthSpecificationList;
  inherited;
end;

function TXMLShipmentSummary.Get_TotalQuantity: IXMLTotalQuantity;
begin
  Result := ChildNodes['TotalQuantity'] as IXMLTotalQuantity;
end;

function TXMLShipmentSummary.Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
begin
  Result := FTotalInformationalQuantity;
end;

function TXMLShipmentSummary.Get_ProductSummary: IXMLProductSummary;
begin
  Result := ChildNodes['ProductSummary'] as IXMLProductSummary;
end;

function TXMLShipmentSummary.Get_LengthSpecification: IXMLLengthSpecificationList;
begin
  Result := FLengthSpecification;
end;

{ TXMLDeliveryMessageWoodSummary }

procedure TXMLDeliveryMessageWoodSummary.AfterConstruction;
begin
  RegisterChildNode('TotalQuantity', TXMLTotalQuantity);
  RegisterChildNode('TotalInformationalQuantity', TXMLTotalInformationalQuantity);
  RegisterChildNode('ProductSummary', TXMLProductSummary);
  RegisterChildNode('LengthSpecification', TXMLLengthSpecification);
  RegisterChildNode('QuantityDeviation', TXMLMeasurementWithText);
  RegisterChildNode('CustomsTotals', TXMLCustomsTotals);
  RegisterChildNode('CustomsStampInformation', TXMLCustomsStampInformation);
  RegisterChildNode('TermsAndDisclaimers', TXMLTermsAndDisclaimers);
  FTotalQuantity := CreateCollection(TXMLTotalQuantityList, IXMLTotalQuantity, 'TotalQuantity') as IXMLTotalQuantityList;
  FTotalInformationalQuantity := CreateCollection(TXMLTotalInformationalQuantityList, IXMLTotalInformationalQuantity, 'TotalInformationalQuantity') as IXMLTotalInformationalQuantityList;
  FLengthSpecification := CreateCollection(TXMLLengthSpecificationList, IXMLLengthSpecification, 'LengthSpecification') as IXMLLengthSpecificationList;
  FCustomsTotals := CreateCollection(TXMLCustomsTotalsList, IXMLCustomsTotals, 'CustomsTotals') as IXMLCustomsTotalsList;
  FCustomsStampInformation := CreateCollection(TXMLCustomsStampInformationList, IXMLCustomsStampInformation, 'CustomsStampInformation') as IXMLCustomsStampInformationList;
  FTermsAndDisclaimers := CreateCollection(TXMLTermsAndDisclaimersList, IXMLTermsAndDisclaimers, 'TermsAndDisclaimers') as IXMLTermsAndDisclaimersList;
  inherited;
end;

function TXMLDeliveryMessageWoodSummary.Get_TotalNumberOfShipments: LongWord;
begin
  Result := ChildNodes['TotalNumberOfShipments'].NodeValue;
end;

procedure TXMLDeliveryMessageWoodSummary.Set_TotalNumberOfShipments(Value: LongWord);
begin
  ChildNodes['TotalNumberOfShipments'].NodeValue := Value;
end;

function TXMLDeliveryMessageWoodSummary.Get_TotalQuantity: IXMLTotalQuantityList;
begin
  Result := FTotalQuantity;
end;

function TXMLDeliveryMessageWoodSummary.Get_TotalInformationalQuantity: IXMLTotalInformationalQuantityList;
begin
  Result := FTotalInformationalQuantity;
end;

function TXMLDeliveryMessageWoodSummary.Get_ProductSummary: IXMLProductSummary;
begin
  Result := ChildNodes['ProductSummary'] as IXMLProductSummary;
end;

function TXMLDeliveryMessageWoodSummary.Get_LengthSpecification: IXMLLengthSpecificationList;
begin
  Result := FLengthSpecification;
end;

function TXMLDeliveryMessageWoodSummary.Get_QuantityDeviation: IXMLMeasurementWithText;
begin
  Result := ChildNodes['QuantityDeviation'] as IXMLMeasurementWithText;
end;

function TXMLDeliveryMessageWoodSummary.Get_CustomsTotals: IXMLCustomsTotalsList;
begin
  Result := FCustomsTotals;
end;

function TXMLDeliveryMessageWoodSummary.Get_CustomsStampInformation: IXMLCustomsStampInformationList;
begin
  Result := FCustomsStampInformation;
end;

function TXMLDeliveryMessageWoodSummary.Get_TermsAndDisclaimers: IXMLTermsAndDisclaimersList;
begin
  Result := FTermsAndDisclaimers;
end;

{ TXMLCustomsTotals }

procedure TXMLCustomsTotals.AfterConstruction;
begin
  RegisterChildNode('TotalQuantity', TXMLTotalQuantity);
  RegisterChildNode('InformationalQuantity', TXMLInformationalQuantity);
  FInformationalQuantity := CreateCollection(TXMLInformationalQuantityList, IXMLInformationalQuantity, 'InformationalQuantity') as IXMLInformationalQuantityList;
  inherited;
end;

function TXMLCustomsTotals.Get_CustomsTariffCode: WideString;
begin
  Result := ChildNodes['CustomsTariffCode'].Text;
end;

procedure TXMLCustomsTotals.Set_CustomsTariffCode(Value: WideString);
begin
  ChildNodes['CustomsTariffCode'].NodeValue := Value;
end;

function TXMLCustomsTotals.Get_TotalQuantity: IXMLTotalQuantity;
begin
  Result := ChildNodes['TotalQuantity'] as IXMLTotalQuantity;
end;

function TXMLCustomsTotals.Get_InformationalQuantity: IXMLInformationalQuantityList;
begin
  Result := FInformationalQuantity;
end;

{ TXMLCustomsTotalsList }

function TXMLCustomsTotalsList.Add: IXMLCustomsTotals;
begin
  Result := AddItem(-1) as IXMLCustomsTotals;
end;

function TXMLCustomsTotalsList.Insert(const Index: Integer): IXMLCustomsTotals;
begin
  Result := AddItem(Index) as IXMLCustomsTotals;
end;
function TXMLCustomsTotalsList.Get_Item(Index: Integer): IXMLCustomsTotals;
begin
  Result := List[Index] as IXMLCustomsTotals;
end;

{ TXMLCustomsStampInformation }

procedure TXMLCustomsStampInformation.AfterConstruction;
begin
  RegisterChildNode('CustomsParty', TXMLParty);
  RegisterChildNode('CustomsStampDate', TXMLCustomsStampDate);
  RegisterChildNode('CustomsReferenceNumber', TXMLCustomsReferenceNumber);
  RegisterChildNode('SupplierCustomsReference', TXMLSupplierCustomsReference);
  RegisterChildNode('MillParty', TXMLParty);
  FCustomsStampHeaderText := CreateCollection(TXMLS255List, IXMLNode, 'CustomsStampHeaderText') as IXMLS255List;
  FCustomsStampTrailerText := CreateCollection(TXMLS255List, IXMLNode, 'CustomsStampTrailerText') as IXMLS255List;
  inherited;
end;

function TXMLCustomsStampInformation.Get_CustomsStampHeaderText: IXMLS255List;
begin
  Result := FCustomsStampHeaderText;
end;

function TXMLCustomsStampInformation.Get_CustomsParty: IXMLParty;
begin
  Result := ChildNodes['CustomsParty'] as IXMLParty;
end;

function TXMLCustomsStampInformation.Get_CustomsStampDate: IXMLCustomsStampDate;
begin
  Result := ChildNodes['CustomsStampDate'] as IXMLCustomsStampDate;
end;

function TXMLCustomsStampInformation.Get_CustomsReferenceNumber: IXMLCustomsReferenceNumber;
begin
  Result := ChildNodes['CustomsReferenceNumber'] as IXMLCustomsReferenceNumber;
end;

function TXMLCustomsStampInformation.Get_SupplierCustomsReference: IXMLSupplierCustomsReference;
begin
  Result := ChildNodes['SupplierCustomsReference'] as IXMLSupplierCustomsReference;
end;

function TXMLCustomsStampInformation.Get_MillParty: IXMLParty;
begin
  Result := ChildNodes['MillParty'] as IXMLParty;
end;

function TXMLCustomsStampInformation.Get_CustomsStampTrailerText: IXMLS255List;
begin
  Result := FCustomsStampTrailerText;
end;

{ TXMLCustomsStampInformationList }

function TXMLCustomsStampInformationList.Add: IXMLCustomsStampInformation;
begin
  Result := AddItem(-1) as IXMLCustomsStampInformation;
end;

function TXMLCustomsStampInformationList.Insert(const Index: Integer): IXMLCustomsStampInformation;
begin
  Result := AddItem(Index) as IXMLCustomsStampInformation;
end;
function TXMLCustomsStampInformationList.Get_Item(Index: Integer): IXMLCustomsStampInformation;
begin
  Result := List[Index] as IXMLCustomsStampInformation;
end;

{ TXMLCustomsStampDate }

procedure TXMLCustomsStampDate.AfterConstruction;
begin
  RegisterChildNode('Date', TXMLDateBasis);
  inherited;
end;

function TXMLCustomsStampDate.Get_Date: IXMLDateBasis;
begin
  Result := ChildNodes['Date'] as IXMLDateBasis;
end;

function TXMLCustomsStampDate.Get_Time: WideString;
begin
  Result := ChildNodes['Time'].Text;
end;

procedure TXMLCustomsStampDate.Set_Time(Value: WideString);
begin
  ChildNodes['Time'].NodeValue := Value;
end;

{ TXMLCustomsReferenceNumber }

function TXMLCustomsReferenceNumber.Get_CustomsReferenceNumberType: WideString;
begin
  Result := AttributeNodes['CustomsReferenceNumberType'].Text;
end;

procedure TXMLCustomsReferenceNumber.Set_CustomsReferenceNumberType(Value: WideString);
begin
  SetAttribute('CustomsReferenceNumberType', Value);
end;

{ TXMLSupplierCustomsReference }

function TXMLSupplierCustomsReference.Get_SupplierCustomsReferenceType: WideString;
begin
  Result := AttributeNodes['SupplierCustomsReferenceType'].Text;
end;

procedure TXMLSupplierCustomsReference.Set_SupplierCustomsReferenceType(Value: WideString);
begin
  SetAttribute('SupplierCustomsReferenceType', Value);
end;

function TXMLSupplierCustomsReference.Get_AssignedBy: WideString;
begin
  Result := AttributeNodes['AssignedBy'].Text;
end;

procedure TXMLSupplierCustomsReference.Set_AssignedBy(Value: WideString);
begin
  SetAttribute('AssignedBy', Value);
end;

{ TXMLTermsAndDisclaimers }

function TXMLTermsAndDisclaimers.Get_Language: WideString;
begin
  Result := AttributeNodes['Language'].Text;
end;

procedure TXMLTermsAndDisclaimers.Set_Language(Value: WideString);
begin
  SetAttribute('Language', Value);
end;

{ TXMLTermsAndDisclaimersList }

function TXMLTermsAndDisclaimersList.Add: IXMLTermsAndDisclaimers;
begin
  Result := AddItem(-1) as IXMLTermsAndDisclaimers;
end;

function TXMLTermsAndDisclaimersList.Insert(const Index: Integer): IXMLTermsAndDisclaimers;
begin
  Result := AddItem(Index) as IXMLTermsAndDisclaimers;
end;
function TXMLTermsAndDisclaimersList.Get_Item(Index: Integer): IXMLTermsAndDisclaimers;
begin
  Result := List[Index] as IXMLTermsAndDisclaimers;
end;

{ TXMLS255List }

function TXMLS255List.Add(const Value: WideString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLS255List.Insert(const Index: Integer; const Value: WideString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;
function TXMLS255List.Get_Item(Index: Integer): WideString;
begin
  Result := List[Index].NodeValue;
end;

{ TXMLS60List }

function TXMLS60List.Add(const Value: WideString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLS60List.Insert(const Index: Integer; const Value: WideString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;
function TXMLS60List.Get_Item(Index: Integer): WideString;
begin
  Result := List[Index].NodeValue;
end;

{ TXMLAnyURIList }

function TXMLAnyURIList.Add(const Value: WideString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLAnyURIList.Insert(const Index: Integer; const Value: WideString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;
function TXMLAnyURIList.Get_Item(Index: Integer): WideString;
begin
  Result := List[Index].NodeValue;
end;

{ TXMLS72List }

function TXMLS72List.Add(const Value: WideString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLS72List.Insert(const Index: Integer; const Value: WideString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;
function TXMLS72List.Get_Item(Index: Integer): WideString;
begin
  Result := List[Index].NodeValue;
end;

{ TXMLS20List }

function TXMLS20List.Add(const Value: WideString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLS20List.Insert(const Index: Integer; const Value: WideString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;
function TXMLS20List.Get_Item(Index: Integer): WideString;
begin
  Result := List[Index].NodeValue;
end;

{ TXMLNni1List }

function TXMLNni1List.Add(const Value: LongWord): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLNni1List.Insert(const Index: Integer; const Value: LongWord): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;
function TXMLNni1List.Get_Item(Index: Integer): LongWord;
begin
  Result := List[Index].NodeValue;
end;

{ TXMLHolePunchTemplateReferenceTypeList }

function TXMLHolePunchTemplateReferenceTypeList.Add(const Value: WideString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLHolePunchTemplateReferenceTypeList.Insert(const Index: Integer; const Value: WideString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;
function TXMLHolePunchTemplateReferenceTypeList.Get_Item(Index: Integer): WideString;
begin
  Result := List[Index].NodeValue;
end;

{ TXMLReamTypeList }

function TXMLReamTypeList.Add(const Value: WideString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLReamTypeList.Insert(const Index: Integer; const Value: WideString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;
function TXMLReamTypeList.Get_Item(Index: Integer): WideString;
begin
  Result := List[Index].NodeValue;
end;

{ TXMLPlywoodOSBSpeciesTypeList }

function TXMLPlywoodOSBSpeciesTypeList.Add(const Value: WideString): IXMLNode;
begin
  Result := AddItem(-1);
  Result.NodeValue := Value;
end;

function TXMLPlywoodOSBSpeciesTypeList.Insert(const Index: Integer; const Value: WideString): IXMLNode;
begin
  Result := AddItem(Index);
  Result.NodeValue := Value;
end;
function TXMLPlywoodOSBSpeciesTypeList.Get_Item(Index: Integer): WideString;
begin
  Result := List[Index].NodeValue;
end;

end.
